{"title":"[Java笔记]接口&Lambda表达式","date":"2023-05-10T00:00:00.000Z","date_formatted":{"ll":"May 10, 2023","L":"05/10/2023","MM-DD":"05-10"},"link":"2023/05/10/[Java笔记]接口&Lambda表达式","comments":true,"categories":["Java"],"updated":"2023-05-10T00:00:00.000Z","content":"<blockquote>\n<p>Java 笔记</p>\n</blockquote>\n<h2 id=\"接口\">接口<a title=\"#接口\" href=\"#接口\"></a></h2>\n<p>接口 (interface)定义了一种可以被类层次中任何类实现行为的协议，是<code>常量、抽象方法、默认方法和静态方法</code>的集合。接口可以用来实现多重继承。<br>\n接口被看作是一种特殊的类型。与常规类一样，每个接口都被编译为独立的字节码文件。使用接口与使用抽象类相似。接口可以作为引用变量的数据类型或类型转换的结果等。与抽象类一样，不能用 new运算符创建接口的实例.<br>\n接口中的抽象方法只有声明，没有实现。抽象方法也可以省略修饰符，省略修饰符编译器自动加上<br>\n<code>public abstract</code><br>\n接口通常表示某种能力，因此接口名后缀通常是 able</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceName</span> [<span class=\"keyword\">extends</span> <span class=\"title class_\">SuperInterfaces</span> ]&#123;</span><br><span class=\"line\"><span class=\"comment\">//1.常量的定义</span></span><br><span class=\"line\"><span class=\"comment\">//2.抽象方法的定义</span></span><br><span class=\"line\"><span class=\"comment\">//3.静态方法的定义</span></span><br><span class=\"line\"><span class=\"comment\">//4.默认方法的定义</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InterfaceList</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//类体定义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果实现接口的类不是 abstract类，则在类的定义部分必须实现接口中的所有抽象方法，即必须保证非 abstract类中不能存在 abstract方法。<br>\n接口方法的访问修饰符都是 public, 所以类在实现方法时，必须显式使用 public 修饰符，否则编译器警告缩小了访问控制范围.<br>\n定义在<code>接口中的变量</code>都自动加上<code>public、final、static</code>属性，因此它们都是常量，<br>\n常量的定义可以省略修饰符，下面三行代码效果相同.<br>\n<code>int STATUS = 100;</code><br>\n<code>public int STATUS = 100;</code><br>\n<code>public final static int STATUS = 100;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">capable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">thinkable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">desire</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">capable</span>, thinkable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String capability, desire;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am capable of &quot;</span> + capability);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">desire</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I wanna &quot;</span> + desire);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person (String capability, String desire) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.desire = desire;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.capability = capability;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">slacr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;writing Java&quot;</span>, <span class=\"string\">&quot;hava a rest&quot;</span>);</span><br><span class=\"line\">        slacr.work();</span><br><span class=\"line\">        slacr.desire();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认方法与接口继承\">默认方法与接口继承<a title=\"#默认方法与接口继承\" href=\"#默认方法与接口继承\"></a></h3>\n<p>与类的继承类似，子接口继承父接口中的<code>常量、抽象方法、默认方法</code>， 除了静态方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">int01</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">STATUS</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fn_1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;default method from int01&quot;</span>); <span class=\"comment\">// 默认方法, 可以被子接口和实现类继承， 接口中需要给出实现, 子类无需给出实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">int02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;default method from int02&quot;</span>); <span class=\"comment\">// 默认方法, 接口中需要给出实现, 子类无需给出实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">int03</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int01</span>, int02 &#123;  <span class=\"comment\">// 接口可以多继承, 类只能单继承</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">// 这里如果不覆盖默认方法会报错, 不能确定相同签名的默认方法, C++中就不会,</span></span><br><span class=\"line\">        int01.<span class=\"built_in\">super</span>.test();  <span class=\"comment\">// 委托一个父接口的默认方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">int04</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test in class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">int05</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int04</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">int02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fn5</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">// 同时实现一个接口和继承一个类, 类中有同名方法, 继承的优先级要比接口默认方法高,</span></span><br><span class=\"line\">        test();            <span class=\"comment\">// 优先调用继承来的方法.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Switch</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">int01</span>, int03, int02 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fn_1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;fn_1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Switch</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Switch</span>();</span><br><span class=\"line\">        System.out.println(s.STATUS);</span><br><span class=\"line\">        s.fn_1();</span><br><span class=\"line\">        s.test();</span><br><span class=\"line\">        <span class=\"comment\">// 0</span></span><br><span class=\"line\">        <span class=\"comment\">//fn_1</span></span><br><span class=\"line\">        <span class=\"comment\">//default method from int01</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>接口是特殊的抽象类, 接口只能继承接口, 类只能实现接口(某种程度上的继承).</p>\n<h3 id=\"接口类型使用\">接口类型使用<a title=\"#接口类型使用\" href=\"#接口类型使用\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test static interface method&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>,B &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span>, B, C&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();            <span class=\"comment\">// 上转型对象，和C++中的隐式类型转换差不多</span></span><br><span class=\"line\">        <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();</span><br><span class=\"line\">        <span class=\"type\">C</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();</span><br><span class=\"line\">        <span class=\"type\">D</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();</span><br><span class=\"line\">        System.out.println(a.a);</span><br><span class=\"line\">        System.out.println(b.b);</span><br><span class=\"line\">        System.out.println(c.a + <span class=\"string\">&quot; &quot;</span>+ c.b + <span class=\"string\">&quot; &quot;</span> + c.c);</span><br><span class=\"line\">        System.out.println(d.a + <span class=\"string\">&quot; &quot;</span> + d.b + <span class=\"string\">&quot; &quot;</span> + d.c + <span class=\"string\">&quot; &quot;</span> + d.d);</span><br><span class=\"line\"></span><br><span class=\"line\">        A.test();   <span class=\"comment\">// 接口中静态方法和普通类中的差不多，只不过接口和抽象类不能实例化，只能类名调用</span></span><br><span class=\"line\">        <span class=\"comment\">//1</span></span><br><span class=\"line\">        <span class=\"comment\">//2</span></span><br><span class=\"line\">        <span class=\"comment\">//1 2 3</span></span><br><span class=\"line\">        <span class=\"comment\">//1 2 3 4</span></span><br><span class=\"line\">        <span class=\"comment\">//test static interface method</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"comparable接口\">Comparable接口<a title=\"#comparable接口\" href=\"#comparable接口\"></a></h3>\n<p>Java类库中也定义了许多接口，有些接口中没有定义任何方法，这些接口称为标识接口，如java.lang包中定义的 Cloneable接口、java.io包中的 Serializable接口。有些接口中定义了若干方法，如java.lang包中Comparable接口中定义的comapreTo()方法、AutoClosable接口定义的 close()方法、Runnable 接口中定义的 run()方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">Comparable</span>&lt;Circle&gt;&#123;   <span class=\"comment\">// 实现Comparable接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> r;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> area;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Circle</span> <span class=\"params\">(<span class=\"type\">double</span> r)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.r = r;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.area = Math.PI*r*r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(Circle c)</span> &#123;    <span class=\"comment\">// 实现compareTo方法, 使得两个对象能够比较</span></span><br><span class=\"line\">        <span class=\"comment\">// return this.area &gt; c.area ? 1 : (this.area == c.area ? 0 : -1 );</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Double.compare(<span class=\"built_in\">this</span>.area, c.area);</span><br><span class=\"line\">        <span class=\"comment\">// 或者使用Double类的compare方法比较浮点数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Circle</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Circle</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"type\">Circle</span> <span class=\"variable\">c11</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(c1.compareTo(c2));   <span class=\"comment\">// -1</span></span><br><span class=\"line\">        System.out.println(c2.compareTo(c1));   <span class=\"comment\">// 1</span></span><br><span class=\"line\">        System.out.println(c1.compareTo(c11));  <span class=\"comment\">// 0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JavaAPI中许多类实现了 Comparable<T>接口，如基本数据类型包装类 (Byte、Short、Integer、Long、Float、Double、Character、Boolean)。File类、String类、LocalDate 类、BigInteger类和 BigDecimal类也实现了 Comparable<T>接口，这些类的对象都可按自然顺序排序.</p>\n<h3 id=\"comparator-接口\">Comparator 接口<a title=\"#comparator-接口\" href=\"#comparator-接口\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> &#123;   <span class=\"comment\">// 实现Comparable接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> r;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> area;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Circle</span> <span class=\"params\">(<span class=\"type\">double</span> r)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.r = r;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.area = Math.PI*r*r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format( <span class=\"string\">&quot;%.2f&quot;</span>, <span class=\"built_in\">this</span>.area) + <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CircleComparator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparator</span>&lt;Circle&gt;&#123;   <span class=\"comment\">// 实现Comparator接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Circle l, Circle r)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(r.area - l.area);   <span class=\"comment\">// 按面积倒序排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Circle[] circles = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; circles.length; i++) &#123;</span><br><span class=\"line\">            circles[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// public static &lt;T&gt;void sort(T[] a, Comparator&lt;? super T&gt;c)</span></span><br><span class=\"line\">        Arrays.sort(circles, <span class=\"keyword\">new</span> <span class=\"title class_\">CircleComparator</span>());   <span class=\"comment\">// Arrays.sort() 传一个Comparator接口实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Circle circle : circles) &#123;</span><br><span class=\"line\">            System.out.print(circle);  <span class=\"comment\">// 50.27 28.27 12.57 3.14 0.00</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"lambda表达式\">Lambda表达式<a title=\"#lambda表达式\" href=\"#lambda表达式\"></a></h2>\n<p>Lambda表达式是Java SE 8 新增的一个语言特征。它将 Java的面向对象编程范式与函数式编程结合起来，可以增强Java在并发编程和事件驱动编程中的优势。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 老版本Java倒序排列字符串数组, 创建匿名接口实现类对象, 实现Comparator接口的compare方法</span></span><br><span class=\"line\">        String[] names = &#123;<span class=\"string\">&quot;andy&quot;</span>, <span class=\"string\">&quot;bible&quot;</span>, <span class=\"string\">&quot;candy&quot;</span>, <span class=\"string\">&quot;david&quot;</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(names, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String o1, String o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">            System.out.print(name + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">// 使用lambda表达式, js里面也有</span></span><br><span class=\"line\">        String[] names_2 = &#123;<span class=\"string\">&quot;andy&quot;</span>, <span class=\"string\">&quot;bible&quot;</span>, <span class=\"string\">&quot;candy&quot;</span>, <span class=\"string\">&quot;david&quot;</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(names_2, (String a, String b) -&gt; &#123;<span class=\"keyword\">return</span> b.compareTo(a);&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : names_2) &#123;</span><br><span class=\"line\">            System.out.print(name + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数式接口\">函数式接口<a title=\"#函数式接口\" href=\"#函数式接口\"></a></h3>\n<p><code>函数式接口 (function interface)是指仅包含一个抽象方法的接口，因此也称为单抽象方法 (single abstract method,SAM) 接口。每一个Lambda 表达式都对应一个函数式接口类型</code>。可以将 <code>Lambda 表达式看作实现函数式接口的类的一个实例</code>。默认方法不是抽象方法，所以在函数式接口中可以定义默认方法。<br>\n可以根据需要定义函数式接口，只要接口只包含一个抽象方法即可。在定义函数式接口时可以给接口添加<code>@FunctionalInterface</code>注解，如果接口定义多于一个的抽象方法，编译器会报错.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Converter</span>&lt;F, T&gt; &#123;     <span class=\"comment\">//函数式接口</span></span><br><span class=\"line\">    T <span class=\"title function_\">convert</span><span class=\"params\">(F from)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">convertInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用Lambda表达式创建函数式接口对象</span></span><br><span class=\"line\">        Converter&lt;String, Integer&gt; converter = (from -&gt;  Integer.valueOf(from)); <span class=\"comment\">// 省略&#123;&#125;与return</span></span><br><span class=\"line\">        <span class=\"comment\">// 等同于匿名接口实现类的对象</span></span><br><span class=\"line\">        Converter&lt;String, Integer&gt; converter1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Converter</span>&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Integer <span class=\"title function_\">convert</span><span class=\"params\">(String from)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Integer.valueOf(from);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">converted</span> <span class=\"operator\">=</span> converter.convert(<span class=\"string\">&quot;382938&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">converted1</span> <span class=\"operator\">=</span> converter1.convert(<span class=\"string\">&quot;21234321&quot;</span>);</span><br><span class=\"line\">        System.out.println(converted);</span><br><span class=\"line\">        System.out.println(converted1);</span><br><span class=\"line\">        converter.convertInfo();</span><br><span class=\"line\">        <span class=\"comment\">// don&#x27;t think that much</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Java API中有些接口就只含有一个抽象方法，如 Runnable 接口、AutoCloseable 接口、Comparable 接口和 Comparator 接口等。此外，java.util.function中包含几十个函数式接口。函数式接口之所以重要是因为可以使用 Lambda 表达式创建一个与匿名内部类等价的对象。</p>\n<h3 id=\"预定义的函数式接口\">预定义的函数式接口<a title=\"#预定义的函数式接口\" href=\"#预定义的函数式接口\"></a></h3>\n<p>在<code>java.util.function</code>包中定义了大量的函数式接口，它们使编写Lambda表达式变得容易。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305141637127.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        public interface Function&lt;T, R&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            R apply(T argument);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Function&lt;Integer, Double&gt; getPerimeter = (Integer r) -&gt; &#123;<span class=\"keyword\">return</span> <span class=\"number\">2</span>*Math.PI*r;&#125;;</span><br><span class=\"line\">        System.out.println(getPerimeter.apply(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        BiFunction&lt;Float, Float, Float&gt; calcArea = (w, l) -&gt; w*l;</span><br><span class=\"line\">        System.out.println(calcArea.apply(<span class=\"number\">3f</span>, <span class=\"number\">5f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// UnaryOperator, Function子接口; BinaryOperator, BiFunction子接口; 参数类型只有一个</span></span><br><span class=\"line\">        UnaryOperator&lt;Integer&gt; getfactorial = (Integer i) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">                res*=j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(getfactorial.apply(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        public interface Predicate&lt;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            boolean test(T t);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        Predicate&lt;String&gt; isAllDigital = (String s) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!Character.isDigit(s.charAt(i))) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(isAllDigital.test(<span class=\"string\">&quot;12345&quot;</span>) + <span class=\"string\">&quot; &quot;</span> + isAllDigital.test(<span class=\"string\">&quot;123ad22&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        public interface Supplier&lt;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            T get();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        Supplier&lt;Integer&gt; randomDigit = () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(randomDigit.get());</span><br><span class=\"line\">        <span class=\"comment\">//Java API 还提供了 Supplier 接口的各种变体，如 DoubleSupplier (返回 Double)、</span></span><br><span class=\"line\">        <span class=\"comment\">//IntSupplier以及LongSupplier等。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        public interface Consumer&lt;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            void accept(T t);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;<span class=\"type\">char</span>[]&gt; printcharArr = (chars -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">                System.out.print(chars[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">char</span>[] chars = (<span class=\"string\">&quot;goodbye world&quot;</span>).toCharArray();</span><br><span class=\"line\">        printcharArr.accept(chars);</span><br><span class=\"line\">        <span class=\"comment\">//Java API 还提供了 Consumer 接口的各种变体，如 DoubleConsumer (返回</span></span><br><span class=\"line\">        <span class=\"comment\">//Double)、IntConsumer 以及LongConsumer等</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法引用与构造方法引用\">方法引用与构造方法引用<a title=\"#方法引用与构造方法引用\" href=\"#方法引用与构造方法引用\"></a></h3>\n<p>Java中有许多方法带一个函数式接口对象作为参数。如果传递的表达式有实现的方法，可以使用一种特殊的语法，<code>方法引用 (method referencing)</code> 代替Lambda 表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; AL = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        AL.forEach(<span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Integer integer)</span> &#123;</span><br><span class=\"line\">                System.out.println(integer+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        AL.forEach( i -&gt; System.out.println(i+<span class=\"number\">2</span>));</span><br><span class=\"line\">        AL.forEach(System.out::println); <span class=\"comment\">// 方法引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// public static T[] sort(T[] array, Comparator&lt;? super T&gt; comparator)</span></span><br><span class=\"line\">        String arr[] = &#123;<span class=\"string\">&quot;Ali&quot;</span>, <span class=\"string\">&quot;Baidu&quot;</span>, <span class=\"string\">&quot;Tencent&quot;</span>, <span class=\"string\">&quot;ByteDance&quot;</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(arr, String::compareToIgnoreCase);  <span class=\"comment\">// 方法引用</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法引用是类名或对象引用，后跟<code>::</code> 然后是方法名.<br>\n双冒号(:)是Java SE8 引进的一种新运算符，可以引用静态方法、实例方法甚至构造方法。方法引用有以下三种使用方式：<br>\n对象::实例方法名<br>\n类名::静态方法名<br>\n类名::实例方法名</p>\n<p>使用第一种方式，在对象上调用实例方法，<code>将给定的参数传递给实例方法</code>，因此，<code>System.out::println 等同于 x-&gt;System.out.println(x)</code><br>\n使用第二种方式，用类名调用静态方法，<code>将给定的参数传递给静态方法</code>。例如，java.util.Objects类定义了 isNull()静态方法，调用 Objects.isNull(x)直接返回x=null 的值。使用 list.removeif(Objects::isNull)将从列表中删除所有的 null值。<br>\n使用第三种方式，用类名调用实例方法，<code>第一个参数作为方法的调用者，其他参数传递给方法</code>。例如， String::compareToIgnoreCase 等同于(x,y)-&gt;x.compareToIgnoreCase(y)</p>\n<p>构造方法引用中需要使用 new 运算符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用构造方法引用创建Person对象</span></span><br><span class=\"line\">        BiFunction&lt;String, Integer, Person&gt; personFactory = Person::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> personFactory.apply(<span class=\"string\">&quot;John Doe&quot;</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Name: &quot;</span> + person.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age: &quot;</span> + person.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以使用数组类型编写构造方法引用。例如， <code>int[]::new</code> 是一个含有一个参数的构造方法引用，该参数为数组长度。它等同于 Lambda 表达式 <code>n-&gt;new int[n]</code>。</p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n","prev":{"title":"[Notion]搭建个人电子图书馆","link":"2023/05/13/[Notion]搭建个人电子图书馆"},"next":{"title":"[Java笔记]常用核心类内部类枚举注解","link":"2023/05/09/[Java笔记]常用核心类内部类枚举注解"},"plink":"https://s1acr.github.io/2023/05/10/[Java笔记]接口&Lambda表达式/","toc":[{"id":"接口","title":"接口","index":"1","children":[{"id":"默认方法与接口继承","title":"默认方法与接口继承","index":"1.1"},{"id":"接口类型使用","title":"接口类型使用","index":"1.2"},{"id":"comparable接口","title":"Comparable接口","index":"1.3"},{"id":"comparator-接口","title":"Comparator 接口","index":"1.4"}]},{"id":"lambda表达式","title":"Lambda表达式","index":"2","children":[{"id":"函数式接口","title":"函数式接口","index":"2.1"},{"id":"预定义的函数式接口","title":"预定义的函数式接口","index":"2.2"},{"id":"方法引用与构造方法引用","title":"方法引用与构造方法引用","index":"2.3"}]}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"May 10, 2023","updated":"May 10, 2023"},"reading_time":"3214 words in 21 min"}