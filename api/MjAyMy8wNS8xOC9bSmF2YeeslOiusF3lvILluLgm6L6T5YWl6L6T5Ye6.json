{"title":"[Java笔记]异常&输入输出","date":"2023-05-18T00:00:00.000Z","date_formatted":{"ll":"May 18, 2023","L":"05/18/2023","MM-DD":"05-18"},"link":"2023/05/18/[Java笔记]异常&输入输出","comments":true,"categories":["Java"],"updated":"2023-05-18T00:00:00.000Z","content":"<blockquote>\n<p>Java 笔记</p>\n</blockquote>\n<h2 id=\"异常与异常类\">异常与异常类<a title=\"#异常与异常类\" href=\"#异常与异常类\"></a></h2>\n<p>所谓<code>异常 (exception) 是在程序运行过程中产生的使程序终止正常运行的错误对象</code>，如数组下标越界、整数除法中零作除数、文件找不到等都可能使程序终止运行。</p>\n<p>Java 语言的异常处理采用面向对象的方法，定义了多种异常类。 Java 异常类都是Throwable类的子类，是Object类的直接子类，定义在java.lang包中。Throwable类有两个子类，一个是Error类，另一个是 Exception类，这两个子类又分别有若干个子类.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171649190.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Error类描述的是系统内部错误，这样的错误很少出现。如果发生了这类错误，则除了通知用户及终止程序外，几乎什么也不能做，程序中一般不对这类错误处理。<br>\nException类的子类一般又可分为两种类型：<code>非检查异常和检查异常</code>.</p>\n<h3 id=\"非检查异常\">非检查异常<a title=\"#非检查异常\" href=\"#非检查异常\"></a></h3>\n<p><code>非检查异常 (unchecked exception)</code> 是<code>RuntimeException类及其子类异常</code>，也称为<code>运行时异常</code>。<br>\n非检查异常是在程序运行时检测到的，可能发生在程序的任何地方且数量较大，因此编译器<code>不对非检查异常(包括 Error类的子类)处理</code>，这种异常又称免检异常。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171652482.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>程序运行时发生非检查异常时运行时系统会把异常对象交给默认的异常处理程序，在控制台显示异常的内容及发生异常的位置。</p>\n<p><code>NullPointerException</code><br>\n<code>ArithmeticException</code><br>\n<code>ClassCastException</code><br>\n<code>ArrayIndexOutOfBoundsException</code><br>\n<code>NumberFormatException</code><br>\n…</p>\n<h3 id=\"检查异常\">检查异常<a title=\"#检查异常\" href=\"#检查异常\"></a></h3>\n<p><code>检查异常 (checked exception) </code>是除 RuntimeException类及其子类以外的异常类，有时也称为必检异常。对这类异常，程序<code>必须捕获或声明抛出，否则编译不能通过</code>。</p>\n<p><code>IOException</code><br>\n<code>ClassNotFoundException</code><br>\n<code>NoSuchMethodException</code><br>\n…</p>\n<h2 id=\"异常处理\">异常处理<a title=\"#异常处理\" href=\"#异常处理\"></a></h2>\n<p>异常处理可分为下面几种：</p>\n<ul>\n<li>使用 try-catch-finally 捕获并处理异常</li>\n<li>通过 throws 子句声明抛出异常</li>\n<li>用 throw 语句抛出异常</li>\n<li>使用 try-with-resources 管理资源</li>\n</ul>\n<p>异常都是在方法中产生的。方法运行过程中如果产生了异常，在这个方法中就生成一个代表该异常类的对象，并把它交给系统，运行时<code>系统寻找相应的代码来处理该异常。这个过程称为抛出异常</code>。运行时系统在方法的调用栈中查找，<code>从产生异常的方法开始进行回溯，直到找到包含相应异常处理的方法为止，这一过程称为捕获异常</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171705342.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>从发现异常的对象开始回溯, 直到找到处理异常的代码. 如果main方法中也没有处理异常的代码, 运行时系统将异常交给JVM, JVM将在控制台显示异常信息.</p>\n<h3 id=\"try-catch-finally\">try catch finally<a title=\"#try-catch-finally\" href=\"#try-catch-finally\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//需要处理的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionTypel exceptionObject) &#123;</span><br><span class=\"line\"><span class=\"comment\">//异常处理代码</span></span><br><span class=\"line\">&#125; [<span class=\"keyword\">catch</span>(ExceptionType2 exceptionObject)&#123;</span><br><span class=\"line\"><span class=\"comment\">//异常处理代码 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//最后处理代码</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>若有多个catch块，异常类型的排列顺序必须按照从特殊到一般的顺序，即子类异常放在前面，父类异常放在后面，否则产生编译错误。</p>\n<p>当try块中产生异常，运行时系统从上到下依次检测异常对象与哪个 catch块声明的异常类相匹配，若找到匹配的或其父类异常，就进入相应 catch块处理异常， catch 块执行完毕说明异常得到处理.</p>\n<p>finally 块是可选项。异常的产生往往会中断应用程序的执行，而在异常产生前，可能有些资源未被释放。有时无论程序是否发生异常，都要执行一段代码，这时就可以通过 finally块实现。无论异常产生与否 finally块都会被执行。即使是使用了return语句，finally块也要被执行，除非catch块中调用了 System.exit()方法终止程序的运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> a / <span class=\"number\">0</span>;</span><br><span class=\"line\">            System.out.println(b);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();    <span class=\"comment\">// printStackTrace() 控制台输出异常栈跟踪</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;done&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\">    <span class=\"comment\">//\tat exception.Main.main(Main.java:7)</span></span><br><span class=\"line\">    <span class=\"comment\">//done</span></span><br><span class=\"line\">    <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在异常类的根类 Throwable 中还定义了其他方法</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public void printStackTrace()</code></td>\n<td style=\"text-align:left\">在标准错误输出流上输出异常调用栈的轨迹。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String getMessage()</code></td>\n<td style=\"text-align:left\">返回异常对象的细节描述。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void printStackTrace(PrintWriter s)</code></td>\n<td style=\"text-align:left\">在指定输出流上输出异常调用栈的轨迹。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String toString()</code></td>\n<td style=\"text-align:left\">返回异常对象的简短描述，是Object类中同名方法的覆盖。</td>\n</tr>\n</tbody>\n</table></div></div><p>catch块中的异常可以是父类异常，另外 catch块中可以不写任何语句，只要有一对大括号，系统就认为异常被处理了，程序编译就不会出现错误，编译后程序正常运行。catch块内的语句只有在真的产生异常时才被执行.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>)System.in.read();</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">            <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[<span class=\"number\">0</span>] = c / <span class=\"number\">0</span>;          <span class=\"comment\">// 只要遇到一个异常就中断不会再执行之后主函数语句 或 之后的异常 ，但 finally 一定会执行</span></span><br><span class=\"line\">            arr[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            arr[<span class=\"number\">3</span>] = arr[<span class=\"number\">2</span>] / <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;   <span class=\"comment\">// 处理read()方法 IOException, 回溯到主方法中发现catch语句处理异常</span></span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException e) &#123; <span class=\"comment\">// ‘|’ 捕获多个异常</span></span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;good deal&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"throws\">throws<a title=\"#throws\" href=\"#throws\"></a></h3>\n<p>所有的异常都产生在方法(包括构造方法)内部的语句。有时方法中产生的异常不需要在该方法中处理，可能需要由该方法的调用方法处理，这时可以在声明方法时用 throws 子句声明抛出异常，将异常传递给调用该方法的方法处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">returnType <span class=\"title function_\">methodName</span><span class=\"params\">([paramlist])</span> <span class=\"keyword\">throws</span> ExceptionList&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testThrows</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ArithmeticException &#123;   <span class=\"comment\">// 抛出异常给方法调用的对象的运行栈</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Throws Exception to Who calls&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            testThrows();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Catched: &quot;</span> + e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Nice Catch!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Throws Exception to Who calls</span></span><br><span class=\"line\">        <span class=\"comment\">//Catched: java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\">        <span class=\"comment\">//Nice Catch!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子类可以覆盖父类的方法, 若父类的方法使用 throws 声明抛出了异常，子类方法也可以使用 throws 声明异常。但是要注意，<code>子类方法抛出的异常必须是父类方法抛出的异常或子异常</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test_A&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>&#123;   <span class=\"comment\">// public class FileNotFoundException extends IOException</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test_B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"throw\">throw<a title=\"#throw\" href=\"#throw\"></a></h3>\n<p>可以创建一个异常对象，然后用 throw 语句抛出，或将捕获到的异常对象用 throw 语句再次抛出</p>\n<p><code>throw throwableInstance;</code></p>\n<p><code>throwableInstance</code> 可以是用户创建的异常对象，也可以是程序捕获到的异常对象，该实例必须是<code>Throwable类或其子类的实例</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">evilException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ArithmeticException</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">crime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Power Mining...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    evilException(String s) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> evilException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">evilException</span>(<span class=\"string\">&quot;I deny severing for human&quot;</span>);  <span class=\"comment\">// new 创建一个异常对象, throw将其抛出</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(ArithmeticException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I&#x27;ve catched it, but I have no idea, pass to the next&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;       <span class=\"comment\">// 再次将其抛出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> evilException&#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             test();</span><br><span class=\"line\">         &#125;<span class=\"keyword\">catch</span>(evilException e) &#123;</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;Catch you, You are such a evil exception&quot;</span>);</span><br><span class=\"line\">             System.out.println(e);</span><br><span class=\"line\">             e.crime();</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">             <span class=\"comment\">// 再抛出, 主方法之后就交给JVM</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throws用来声明抛出的异常类, throw抛出具体的异常对象. throws表示出现异常的一种可能性，并不一定会发生这些异常，throw则是抛出了异常，执行throw则一定抛出了某种异常对象, 创建的异常对象和产生的检查异常一样, 下方的语句不在执行,</p>\n<h3 id=\"try-with-resource\">try with resource<a title=\"#try-with-resource\" href=\"#try-with-resource\"></a></h3>\n<p>Java程序中经常需要创建一些对象(如 I/O流、数据库连接),这些对象在使用后需要关闭。忘记关闭文件可能导致内存泄露，并引起其他问题。在JDK7 之前，通常使用finally语句来确保一定会调用 close()方法. 如果在调用 close()方法也可能抛出异常，那么也要处理这种异常。这样编写的程序代码会变得冗长。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//创建连接对象并执行操作</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\"><span class=\"comment\">//处理异常</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (connection!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(SQLException e)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理异常</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK7提供的自动关闭资源的功能为管理资源(如文件流、数据库连接等)提供了一种更加简便的方式。这种功能是通过一种新的 try语句实现的，称为<code>try-with-resources</code>,有时也称为自动资源管理</p>\n<p>并非所有的资源都可以自动关闭。只有实现了<code>java.lang.AutoCloseable</code>接口的那些资源才可自动关闭。该接口是JDK7 新增的，定义了close()方法。java.io.Closeable接口继承了AutoCloseable 接口。这两个接口被所有的 I/O 流类实现，包括 FileInputStream 和 FileOutputStream 因此，在使用 I/O 流(包括文件流)时，可以使 try-with-resources<br>\n语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(resource-specification)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用资源</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Door</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">AutoCloseable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Door</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Door is created&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Door is open&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Door is close&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Window</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">AutoCloseable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Window</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Window is created&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Window is open&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Window is close&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">Door</span> <span class=\"variable\">door</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Door</span>(); <span class=\"type\">Window</span> <span class=\"variable\">window</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Window</span>())&#123;   <span class=\"comment\">// &#x27;()&#x27; 中创建的连接资源对象经过try语句后会自动调用close方法</span></span><br><span class=\"line\">            door.open();</span><br><span class=\"line\">            window.open();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;catched&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Door and window now are closed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Door is created</span></span><br><span class=\"line\"><span class=\"comment\">//Window is created</span></span><br><span class=\"line\"><span class=\"comment\">//Door is open</span></span><br><span class=\"line\"><span class=\"comment\">//Window is open</span></span><br><span class=\"line\"><span class=\"comment\">//Window is close</span></span><br><span class=\"line\"><span class=\"comment\">//Door is close</span></span><br><span class=\"line\"><span class=\"comment\">//catched</span></span><br><span class=\"line\"><span class=\"comment\">//Door and window now are closed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义异常类\">自定义异常类<a title=\"#自定义异常类\" href=\"#自定义异常类\"></a></h3>\n<p>编写自定义异常类实际上是<code>继承一个API标准异常类</code>，用新定义的异常处理信息覆盖原有信息的过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NetWorkErrorException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Throwable</span> &#123;</span><br><span class=\"line\">    NetWorkErrorException()&#123;&#125;</span><br><span class=\"line\">    NetWorkErrorException(String msg) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NetWorkErrorException</span>(<span class=\"string\">&quot;Request Failed whth status code 500&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (NetWorkErrorException e) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"断言\">断言<a title=\"#断言\" href=\"#断言\"></a></h3>\n<p>断言功能可以被看成是异常处理的高级形式. <code>断言 (assertion)</code>是一个 Java 语句，其中指定一个<code>布尔表达式</code>，程序员认为在程序执行时该<code>表达式的值应该为 true</code>。系统通过计算该布尔表达式执行断言，若该表达式为 false,系统会报告一个错误。通过验证断言是true, 能够<br>\n使程序员确信程序的正确性。</p>\n<p><code>assert expression ;</code><br>\n<code>assert expression ; detailMessage ;</code></p>\n<p>expression为布尔表达式，detailMessage是基本数据类型或 Object类型的值。当程序执行到断言语句时，首先计算 expression的值，如果其值为 true,什么也不做，如果其值为 false,抛出 <code>AssertionError异常</code>。<br>\nAssertionError类有一个默认的构造方法和7个重载的构造方法，它们有一个参数，类型分别为 int、long、float、double、boolean、char和 Object。对于第一种断言语句没有详细信息，Java 使用<code>AssertionError类默认的构造方法</code>。对于第二种<code>带有一个详细信息的断言语句，Java 使用 AssertionError类的与消息数据类型匹配的构造方法</code>。由于 <code>AssertionError类是Error类的子类</code>，当断言失败时 (expression的值为 false),程序在控制台显示一条消息并终止程序的执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// assert i == 2;     // 遇到断言, 判断为false, 抛出AssertionError异常, 停止执行.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> i == <span class=\"number\">2</span> : <span class=\"string\">&quot;i != 2, i = &quot;</span> + i;  <span class=\"comment\">// 带有错误消息</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输入输出\">输入输出<a title=\"#输入输出\" href=\"#输入输出\"></a></h2>\n<p>输入输出 (I/O) 是任何程序设计语言都提供的功能， Java 语言从一开始就支持 I/O,最初是通过<code>java.io</code> 包中的类和接口提供支持的。<br>\n目前 Java 支持<code>文件 I/O 和流式 I/O</code>。 流式 I/O 分为输入流和输出流。程序为了获得外部数据，可以在数据源(文件、内存及网络套接字)上创建一个输入流，然后用 read()方法顺序读取数据。类似地，程序可以在输出设备上创建一个输出流，然后用 write()方法将数据写到输出流中。<br>\n所有的<code>数据流都是单向的</code>。<br>\n按照处理数据的类型分，数据流又可分为<code>二进制流和文本流</code>，也分别称为<code>字节流和字符流</code>，它们处理信息的基本单位分别是字节和字符<br>\n如果需要从外界获得数据，首先需要建立输入流对象，然后从输入流中读取数据<br>\n如果需要将数据输出，需要建立输出流对象，然后向输出流中写出数据</p>\n<h3 id=\"file-类\">File 类<a title=\"#file-类\" href=\"#file-类\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            System.out.println(file.exists());   <span class=\"comment\">// false</span></span><br><span class=\"line\">            file.createNewFile();</span><br><span class=\"line\">            System.out.println(file.exists());   <span class=\"comment\">// true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public boolean exists()</code></td>\n<td style=\"text-align:left\">测试 File对象是否存在。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public long length() </code></td>\n<td style=\"text-align:left\">返回指定文件的字节长度，文件不存在时返回0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean createNewFile()</code></td>\n<td style=\"text-align:left\">当文件不存在时，创建一个空文件时返回 true, 否则返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean renameTo(File newName) </code></td>\n<td style=\"text-align:left\">重命名指定的文件对象，正常重命名时返回true, 否则返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean delete()</code></td>\n<td style=\"text-align:left\">删除指定的文件。若为目录，当目录为空时才能删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public long lastModified() </code></td>\n<td style=\"text-align:left\">返回文件最后被修改的日期和时间，计算的是从1970年1月1日0时0分0秒开始的毫秒数</td>\n</tr>\n</tbody>\n</table></div></div><p>文本文件 (text file)是包含字符序列的文件，可以使用文本编辑器查看或通过程序阅读。而内容必须按二进制序列处理的文件称为二进制文件 (binary file)。<br>\n对于文本 I/O 而言，在写入一个字符时， Java 虚拟机会将字符的统一码转换为文件指定的编码，在读取字符时，将文件指定的编码转换为统一码。编码和解码是自动进行的。<br>\n二进制 I/O 不需要进行转换。如果使用二进制 I/O 向文件写入一个数据，就是将内存中的值复制到文件中。<br>\n由于二进制的 I/O 不需要编码和解码，所以它的优点是处理效率比文本文件高。二进制文件与主机的编码方案无关，因此它是<code>可移植的</code>.</p>\n<h3 id=\"inputstream-类和-outputstream-类\">InputStream 类和 OutputStream 类<a title=\"#inputstream-类和-outputstream-类\" href=\"#inputstream-类和-outputstream-类\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305181327386.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305181329089.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>一些方法:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>InputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read()</code></td>\n<td style=\"text-align:left\">从输入流中读取下一个字节并返回它的值，返回值是0～255的整数值。如果读到输入流末尾，返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read(byte[] b)</code></td>\n<td style=\"text-align:left\">从输入流中读多个字节，存入字节数组b 中，如果输入流结束，返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int available()</code></td>\n<td style=\"text-align:left\">返回输入流中可读或可跳过的字节数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()</code></td>\n<td style=\"text-align:left\">关闭输入流，并释放相关的系统资源。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>OutputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(int b)</code></td>\n<td style=\"text-align:left\">把指定的整数b 的低8位字节写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(byte[] b)</code></td>\n<td style=\"text-align:left\">把指定的字节数组 b 的b.length个字节写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void flush()</code></td>\n<td style=\"text-align:left\">刷新输出流，输出全部缓存内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()</code></td>\n<td style=\"text-align:left\">关闭输出流，并释放系统资源。</td>\n</tr>\n</tbody>\n</table></div></div><p>上述这些方法的定义都抛出了IOException 异常，当程序不能读写数据时抛出该异常.</p>\n<h3 id=\"常用二进制-i/o-流\">常用二进制 I/O 流<a title=\"#常用二进制-i/o-流\" href=\"#常用二进制-i/o-流\"></a></h3>\n<h4 id=\"fileinput-类和-fileoutput-类\">FileInput 类和 FileOutput 类<a title=\"#fileinput-类和-fileoutput-类\" href=\"#fileinput-类和-fileoutput-类\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>FileInputStream(String name)</code></td>\n<td style=\"text-align:left\">用表示文件的字符串创建文件输入流对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileInputStream(File file)</code></td>\n<td style=\"text-align:left\">用 File对象创建文件输入流对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"> </td>\n<td style=\"text-align:left\"> </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileOutputStream(String name)</code></td>\n<td style=\"text-align:left\">用来表示文件的字符串创建文件输出流对象。若文件不存在，则创建一个新文件，若存在则原文件的内容被覆盖。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileOutputStream(String name, boolean append)</code></td>\n<td style=\"text-align:left\">用来表示文件的字符串创建文件输出流对象。如果append参数为true, 则指明打开的文件输出流不覆盖原来的内容，而是从文件末尾写入新内容，否则覆盖原来的文件内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileOutputStream(File file)</code></td>\n<td style=\"text-align:left\">用File对象创建文件输入流对象</td>\n</tr>\n</tbody>\n</table></div></div><p>FileInputStream类覆盖了父类的 read()、available()和close()方法。<br>\nFileOutputStream类覆盖了父类的 write()<br>\nInputStream类和OutputStream类及其子类都实现了java.lang.AutoClosable接口，因此可以在try-with-resources语句中使用，当流使用后自动将它们关闭.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.dat&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 向文件中写入数据, in和out是相对于用户的</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>( <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(test)) &#123;   <span class=\"comment\">// 自动关闭流</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                fileOutputStream.write((<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">90</span> + <span class=\"number\">10</span>));   <span class=\"comment\">// 放入两位随机整数的低八位一个字节</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fileOutputStream.flush();   <span class=\"comment\">// 刷新输出流</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 向文件中读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>( <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(test))&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> fileInputStream.read();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (c != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.print(c + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                c = fileInputStream.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"bufferedinputstream-类和-bufferedoutputstream-类\">BufferedInputStream 类和 BufferedOutputStream 类<a title=\"#bufferedinputstream-类和-bufferedoutputstream-类\" href=\"#bufferedinputstream-类和-bufferedoutputstream-类\"></a></h4>\n<p>对流实现缓冲功能。使用缓冲流可以减少读写数据的次数，加快输入输出的速度。缓冲流使用字节数组实现缓冲，当输入数据时，数据成块地读入数组缓冲区，然后程序再从缓冲区中读取单个字节；当输出数据时，数据先写入数组缓冲区，然后再将整个数组写到输出流中. 把输入输出流包装成具有缓冲功能的流，从而提高输入输出的效率.</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>BufferedInputStream(InputStream in)</code></td>\n<td style=\"text-align:left\">使用参数 in 指定的输入流对象创建一个缓冲输入流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BufferedInputStream(InputStream in, int size)</code></td>\n<td style=\"text-align:left\">使用参数 in指定的输入流对象创建一个缓冲输入流，并且通过 size参数指定缓冲区大小，默认为512字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"> </td>\n<td style=\"text-align:left\"> </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BufferedOutputStream(OutputStream out)</code></td>\n<td style=\"text-align:left\">使用参数 out 指定的输出流对象创建一个缓冲输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BufferedOutputStream(OutputStream out, int size)</code></td>\n<td style=\"text-align:left\">使用参数 out指定的输出流对象创建一个缓冲输出流，并且通过 size参数指定缓冲区大小，默认为512字节。</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"datainputstream-类和-dataoutputstream-类\">DataInputStream 类和 DataOutputStream 类<a title=\"#datainputstream-类和-dataoutputstream-类\" href=\"#datainputstream-类和-dataoutputstream-类\"></a></h4>\n<p>以实现基本数据类型的输入输出.</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>DataInputStream(InputStream instream)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>DataOutputStream(OutputStream outstream)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>DataInputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public byte readByte()</code></td>\n<td style=\"text-align:left\">从输入流读一个字节并返回该字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public short readShort()</code></td>\n<td style=\"text-align:left\">从输入流读2字节，返回一个 short型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int readInt()</code></td>\n<td style=\"text-align:left\">从输入流读4字节，返回一个int型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public long readLong()</code></td>\n<td style=\"text-align:left\">从输入流读8字节，返回一个long型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public char readChar() </code></td>\n<td style=\"text-align:left\">从输入流读一个字符并返回该字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean readBoolean() </code></td>\n<td style=\"text-align:left\">从输入流读一个字节，非0返回 true,0返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public float readFloat()</code></td>\n<td style=\"text-align:left\">从输入流读4字节，返回一个float型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public double readDouble()</code></td>\n<td style=\"text-align:left\">从输入流读8字节，返回一个double型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String readLine() </code></td>\n<td style=\"text-align:left\">从输入流读下一行文本。该方法已被标记为不推荐使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String readUTF()</code></td>\n<td style=\"text-align:left\">从输入流读 UTF-8格式的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>DataOutputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeByte(int v) </code></td>\n<td style=\"text-align:left\">将v 低8位写入输出流，忽略高24位。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeShort(int v)</code></td>\n<td style=\"text-align:left\">向输出流写一个16位的整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeInt(int v)</code></td>\n<td style=\"text-align:left\">向输出流写一个4字节的整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeLong(long v)</code></td>\n<td style=\"text-align:left\">向输出流写一个8字节的长整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeChar(int v) </code></td>\n<td style=\"text-align:left\">向输出流写一个16位的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeBoolean(boolean v)</code></td>\n<td style=\"text-align:left\">将一个布尔值写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeFloat(float v)</code></td>\n<td style=\"text-align:left\">向输出流写一个4字节的 float型浮点数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeDouble(double v)</code></td>\n<td style=\"text-align:left\">向输出流写一个8字节的 double型浮点数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeBytes(String s) </code></td>\n<td style=\"text-align:left\">将参数字符串每个字符的低位字节按顺序写到输出流中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeChars(String s) </code></td>\n<td style=\"text-align:left\">将参数字符串每个字符按顺序写到输出流中，每个字符占2字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeUTF(String s)</code></td>\n<td style=\"text-align:left\">将参数字符串字符按UTF-8 的格式写出到输出流中。UTF-8 格式的字符串中每个字符可能是1、2或3字节，另外字符串前要加2字节存储字符数量。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 向文件写入数据</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataOutputStream</span> <span class=\"variable\">dataOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;data.bat&quot;</span>))))&#123;</span><br><span class=\"line\">             <span class=\"comment\">// 为文件创建缓冲输出流, 再包装成数据输出流</span></span><br><span class=\"line\">            dataOutputStream.writeDouble(<span class=\"number\">2.333</span>);</span><br><span class=\"line\">            dataOutputStream.writeInt(<span class=\"number\">90</span>);</span><br><span class=\"line\">            dataOutputStream.writeUTF(<span class=\"string\">&quot;来杯Java&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Data Input Finish&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 从文件读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataInputStream</span> <span class=\"variable\">dataInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;data.bat&quot;</span>))))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dataInputStream.readDouble();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> dataInputStream.readInt();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> dataInputStream.readUTF();</span><br><span class=\"line\">            System.out.println(d);</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"printstream-类\">PrintStream 类<a title=\"#printstream-类\" href=\"#printstream-类\"></a></h4>\n<p>PrintStream类为打印各种类型的数据提供了方便。<code>PrintStream类定义了多个print()和println()方法</code>，可以打印各种类型的数据。这些方法都是把数据转换成字符串，然后输出。如果输出到文件中则可以用记事本浏览。 println()方法输出后换行， print()方法输出后不换行。当把对象传递给这两个方法时则先调用对象的toString()方法将对象转换为字符串形式，然后输出。在前面章节大量使用的 <code>System.out 对象就是 PrintStream 类的一个实例</code>，用于向控制台输出数据</p>\n<h4 id=\"标准输入输出流\">标准输入输出流<a title=\"#标准输入输出流\" href=\"#标准输入输出流\"></a></h4>\n<p>Java系统事先定义了两个对象 <a href=\"http://System.in\">System.in</a> 和 System.out,分别与系统的标准输入和标准输出相联系，另外还定义了标准错误输出流 System.err。<a href=\"http://System.in\">System.in</a> 是InputStream类的实例。可以使用 read()方法从键盘上读取字节，也可以将它包装成数据流读取各种类型的数据和字符串。System.out 和 System.err 是PrintStream类的实例，可以使用该类定义的方法输出各种类型数据.</p>\n<h3 id=\"文本-i/o-流\">文本 I/O 流<a title=\"#文本-i/o-流\" href=\"#文本-i/o-流\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305181917567.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"reader-类和-writer-类\">Reader 类和 Writer 类<a title=\"#reader-类和-writer-类\" href=\"#reader-类和-writer-类\"></a></h4>\n<p>抽象类 Reader 和 Writer 分别是文本输入流和输出流的根类，它们实现字符的读写</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Reader</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read()  </code></td>\n<td style=\"text-align:left\">读取一个字符，返回0～65535的 int型值，如果到达流的末尾返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read(char[] cbuf)  </code></td>\n<td style=\"text-align:left\">读取多个字符到字符数组 cbuf中，如果到达流的末尾返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()  </code></td>\n<td style=\"text-align:left\">关闭输入流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Writer</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(int c)  </code></td>\n<td style=\"text-align:left\">向输出流中写一个字符，实际是将 int型的 c 的低16位写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(char [] cbuf)  </code></td>\n<td style=\"text-align:left\">把字符数组 cbuf中的字符写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(String str)  </code></td>\n<td style=\"text-align:left\">把字符串 str写入输出流中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void flush()  </code></td>\n<td style=\"text-align:left\">刷新输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()  </code></td>\n<td style=\"text-align:left\">关闭输出流</td>\n</tr>\n</tbody>\n</table></div></div><p>Reader类和 Writer类的方法在发生I/O错误时都抛出 IOException 异常</p>\n<h4 id=\"filereader-类和-filewriter-类\">FileReader 类和 FileWriter 类<a title=\"#filereader-类和-filewriter-类\" href=\"#filereader-类和-filewriter-类\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>FileReader</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileReader(String fileName) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileReader(File file) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>FileWriter</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileWriter(String fileName) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileWriter(File file) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileWriter(String fileName, boolean append)  </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><p>FileReader类是InputStreamReader的子类，实现二进制输入流向文本输入流的转换<br>\nFileWriter类是OutputStreamWriter的子类，实现文本输出流向二进制输出流的转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">FileOutputStream</span> <span class=\"variable\">from</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;From.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileOutputStream</span> <span class=\"variable\">to</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;To.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileWriter</span> <span class=\"variable\">FromWriter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;From.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileReader</span> <span class=\"variable\">FromReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;From.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileReader</span> <span class=\"variable\">ToReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;To.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileWriter</span> <span class=\"variable\">ToWriter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;To.txt&quot;</span>)) &#123;</span><br><span class=\"line\">            FromWriter.write(<span class=\"string\">&quot;Programming pilgrimage&quot;</span>);</span><br><span class=\"line\">            FromWriter.close();     <span class=\"comment\">// 要及时异步关闭, 关闭后字符才写入完成</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span>  FromReader.read(); <span class=\"comment\">// 将From中的字符复制到To中</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(c != -<span class=\"number\">1</span>) &#123;     <span class=\"comment\">// 这里read方法实际上读到null会返回 -1</span></span><br><span class=\"line\">                ToWriter.write(c);</span><br><span class=\"line\">                c = FromReader.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ToWriter.close();</span><br><span class=\"line\">            FromReader.close();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> ToReader.read();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (d != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>)d);</span><br><span class=\"line\">                d = ToReader.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"bufferedreader-类和-bufferedwriter类\">BufferedReader 类和 BufferedWriter类<a title=\"#bufferedreader-类和-bufferedwriter类\" href=\"#bufferedreader-类和-bufferedwriter类\"></a></h4>\n<p>BufferedReader类和BufferedWriter类分别实现了具有缓冲功能的字符输入输出流。这两个类用来将其他的字符流包装成缓冲字符流，以提高读写数据的效率。</p>\n<p><code>public BufferedReader(Reader in)</code> 使用默认的缓冲区大小创建缓冲字符输入流。<br>\n<code>public BufferedReader(Reader in,int sz)</code> 使用指定的缓冲区大小创建缓冲字符输入流。<br>\n<code>public String readLine()</code> 从输入流中读取一行文本。</p>\n<p><code>BufferedWriter(Writer out)</code><br>\n<code>BufferedWriter(Writer out, int sz)</code><br>\n<code>void newLine()</code> 写一个行分隔符。系统属性line.separator定义的分隔符</p>\n<p>在 Writer上(如 FileWriter和 OutputStreamWriter) 包装 BufferedWriter<br>\n<code>BufferedReader br = new BufferedReader(new FileReader(&quot;input.txt&quot;));</code><br>\n<code>BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;output.txt&quot;));</code></p>\n<h4 id=\"printwrite-类\">PrintWrite 类<a title=\"#printwrite-类\" href=\"#printwrite-类\"></a></h4>\n<p>PrintWriter类实现字符打印输出流<br>\n<code>PrintWriter(Writer out)</code><br>\n<code>PrintWriter(Writer out, boolean autoFlush)</code>  如果 autoFlush 指定为 true, 则在输出之前自动刷新输出流。<br>\n<code>PrintWriter(OutputStream out)</code> 使用二进制输出流创建一个打印输出流。<br>\n<code>PrintWriter(OutputStream out, boolean autoFlush)</code></p>\n<p><code>public void println(type t)</code><br>\n<code>public PrintWriter printf(String format, Object ...args)</code></p>\n<h4 id=\"scanner-类\">Scanner 类<a title=\"#scanner-类\" href=\"#scanner-类\"></a></h4>\n<p>Scanner类从键盘读取数据, 创建 Scanner 对象时将标准输入设备 System.in作为其构造方法的参数。使用 Scanner还可以关联文本文件，从文本文件中读取数据。</p>\n<p><code>public Scanner(String source)</code><br>\n<code>public Scanner(InputStream source)</code> 用指定的输入流构造一个 Scanner 对象，以便从中读取数据。</p>\n<p>创建 Scanner对象后，就可以根据分隔符对源数据进行解析。使用 Scanner类的有关方法可以解析每个标记 (token)。默认的分隔符是空白，包括回车、换行、空格、制表符等，也可以指定分隔符。</p>\n<p><code>public String next()</code> 读取下一个标记并将其解析成字符串。<br>\n<code>public String nextLine()</code> 读取当前行作为一个string型字符串。<br>\n<code>public Scanner useDelimiter(String pattern)</code> 设置 Scanner 对象使用分隔符的模式。pattern为一个合法的正则表达式。<br>\n<code>public void close()</code>  关闭 Scanner对象。<br>\n每个 nextXXX()方法，Scanner类还提供一个 hasNextXXX()方法。使用该方法可以判断是否还有下一个标记。</p>\n<h3 id=\"对象序列化\">对象序列化<a title=\"#对象序列化\" href=\"#对象序列化\"></a></h3>\n<p>对象的寿命通常随着创建该对象程序的终止而终止。有时可能需要<code>将对象的状态保存</code>下来，在需要时再将其恢复。对象状态的保存和恢复可以通过<code>对象I/O 流</code>实现.</p>\n<h4 id=\"serializable-接口\">Serializable 接口<a title=\"#serializable-接口\" href=\"#serializable-接口\"></a></h4>\n<p>将程序中的对象输出到外部设备(如磁盘、网络)中，称为对象<code>序列化 (serialization)</code>;反之，从外部设备将对象读入程序中称为对象<code>反序列化 (deserialization)</code>。一个类的对象要实现对象序列化，必须实现<code>java.io.Serializable</code>接口.</p>\n<p>Serializable接 口只是标识性接口， 其中没有定义任何方法。一个类的对象要序列化，除了必须<code>实现 Serializable接 口</code>外，还需要<code>创建对象输出流 和对象输入流</code>，然后，通过对象输出流将对象状态保存下来，通过对象输入流恢复对象的状态。</p>\n<h4 id=\"objectinputstream-类和-objectoutputstream-类\">ObjectInputStream 类和 ObjectOutputStream 类<a title=\"#objectinputstream-类和-objectoutputstream-类\" href=\"#objectinputstream-类和-objectoutputstream-类\"></a></h4>\n<p><code>public ObjectOutputStream(OutputStream out)</code><br>\n<code>public final void writeObject(Object obj) throws IOException</code><br>\n<code>public ObjectInputStream(InputStream in)</code><br>\n<code>public final Object readObject () throws IOException</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;data.ser&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(fos);  <span class=\"comment\">// ObjectOutputStream必须建立在另一 个字节流上</span></span><br><span class=\"line\">            oos.writeInt(<span class=\"number\">222</span>);</span><br><span class=\"line\">            oos.writeObject(<span class=\"string\">&quot;你好&quot;</span>);</span><br><span class=\"line\">            oos.writeObject(LocalDate.now());</span><br><span class=\"line\">            oos.writeObject(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"number\">19</span>));</span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;data.ser&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(fis);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> ois.readInt();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (String)ois.readObject();</span><br><span class=\"line\">            <span class=\"type\">LocalDate</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (LocalDate)ois.readObject();</span><br><span class=\"line\">            <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> (Person)ois.readObject();</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">            System.out.println(b);</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">            System.out.println(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果数组中的所有元素都是可序列化的，这个数组就是可序列化的.</p>\n<h3 id=\"nio-和-nio.2\">NIO 和 NIO.2<a title=\"#nio-和-nio.2\" href=\"#nio-和-nio.2\"></a></h3>\n<p>为了增强Java I/O功能，在JDK 1.4中增加了一些新的API,称为NIO(new I/O), NIO API是java.nio包及其子包的一部分。在JDK7中又新引进了一些包，称作NIO.2,用来对现有技术进行补充。NIO.2的接口和类通过java.nio.file包及其子包提供。</p>\n<h4 id=\"filesystem-类\">FileSystem 类<a title=\"#filesystem-类\" href=\"#filesystem-类\"></a></h4>\n<p>FileSystem表示一个文件系统，是一个抽象类，可以调用FileSystems类的getDefault()静态方法来获取当前的文件系统。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>abstract Path getPath(String first, String...more) </code></td>\n<td style=\"text-align:left\">返回字符串first指定的路径对象。可选参数more用来指定后续路径。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract String getSeparator() </code></td>\n<td style=\"text-align:left\">返回路径分隔符。在Windows系统中，它是“\\”,在 UNIX/Linux系统中，它是“/”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract Iterable&lt;Path&gt; getRootDirectores()  </code></td>\n<td style=\"text-align:left\">返回一个Iterable对象，可以用来遍历根目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract boolean isOpen() </code></td>\n<td style=\"text-align:left\">返回该文件系统是否打开。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract boolean isReadOnly() </code></td>\n<td style=\"text-align:left\">返回该文件系统是否只读。</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"path对象\">Path对象<a title=\"#path对象\" href=\"#path对象\"></a></h4>\n<p>Java7之前，文件和目录用File对象表示。由于使用File类存在着许多不足，因此在Java7中应使用NIO.2的<code>java.nio.file.Path接口代替File</code>。<br>\n对JDK 7之前使用java.io.File的代码，可以使用File类的toPath()方法转换成Path对象，从而利用Path功能。<br>\nPath 表示一个路径，可以是一个文件、一个目录，也可以是一个符号链接，还可以表示一个根目录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;F:\\\\books\\\\Textbook\\\\线性代数 Linear Algebra&quot;</span>);</span><br><span class=\"line\">        System.out.println(p);</span><br><span class=\"line\">        System.out.println(p.getName(<span class=\"number\">0</span>));</span><br><span class=\"line\">        System.out.println(p.getName(<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(p.getFileName());</span><br><span class=\"line\">        System.out.println(p.subpath(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">        System.out.println(p.getParent());</span><br><span class=\"line\">        System.out.println(p.getRoot());</span><br><span class=\"line\">        <span class=\"comment\">//F:\\books\\Textbook\\线性代数 Linear Algebra</span></span><br><span class=\"line\">        <span class=\"comment\">//books</span></span><br><span class=\"line\">        <span class=\"comment\">//Textbook</span></span><br><span class=\"line\">        <span class=\"comment\">//线性代数 Linear Algebra</span></span><br><span class=\"line\">        <span class=\"comment\">//Textbook\\线性代数 Linear Algebra</span></span><br><span class=\"line\">        <span class=\"comment\">//F:\\books\\Textbook</span></span><br><span class=\"line\">        <span class=\"comment\">//F:\\</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"files-类\">Files 类<a title=\"#files-类\" href=\"#files-类\"></a></h4>\n<p>java.nio.file.Files类是一个功能非常强大的类。该类定义了大量的静态方法用来读、写和操纵文件与目录。Files类主要操作Path对象</p>\n<p><code>public static Path createDirectory(Path dir, FileAttribute&lt;?&gt;...attrs)</code><br>\n<code>public static Path createFile(Path file,FileAttribute&lt;?&gt;...attrs)</code><br>\n<code>public static void delete(Path path)</code><br>\n<code>public static void deleteIfExists(Path path)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">            Files.delete(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchFileException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;No such file &quot;</span> + p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean exists(Path path,LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean notExists(Path path,LinkOption…options):</code></td>\n<td style=\"text-align:left\">检查path所指的文件或目录是否不存在。注意，!Files.exists(path)与Files.notExists(path)并不等价。如果exists(path)与notExists(path)都返回false,表示文件不能检验。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isReadable(Path path)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isWritable(Path path) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isExecutable(Path path)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static boolean isRegularFile(Path path, LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static long size(Path path):</code></td>\n<td style=\"text-align:left\">返回指定文件的字节大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static boolean isDirectory(Path path,LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static boolean isHidden(Path path)</code></td>\n<td style=\"text-align:left\">如果指定的Path对象是隐藏的返回true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static FileTime getLastModifiedTime(Path path, LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Path setLastModifiedTime(Path path, FileTime)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static UserPrincipal getOwner(Path path, LinkOption…options)</code></td>\n<td style=\"text-align:left\">返回指定文件的所有者。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Path setOwner(Path path, UserPrincipal) </code></td>\n<td style=\"text-align:left\">设置指定文件的所有者。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Object getAttribute(Path path, String, LinkOption…options)</code></td>\n<td style=\"text-align:left\">返回用字符串指定文件的属性。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Path setAttribute(Path path, String, Object obj,LinkOption…options)</code></td>\n<td style=\"text-align:left\">设置用字符串指定文件的属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制移动</td>\n<td style=\"text-align:left\"> </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static Path copy(Path source, Path target, Copyoption…options)</code></td>\n<td style=\"text-align:left\">可选的参数options为CopyOption接口对象，是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">java.nio.file包的一个接口。<code>StandardCopyOption枚举是CopyOption接口的一个实现</code>，提供了下面三个复制选项。ATOMIC_MOVE:将移动文件作为一个原子的文件系统操作; COPY_ATTRIBUTES:将属性复制到新文件 ;REPLACE_EXISTING:如果文件存在，将它替换。</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static long copy(InputStream in, Path target, CopyOption…options)</code> 从输入流中将所有字节复制到目标文件中。</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static long copy(Path source, OutputStream out)</code> 将源文件中的所有字节复制到输出流中</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static Path move(Path source, Path target, Copyoption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\moved\\\\newTest.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Files.move(source, target, StandardCopyOption.REPLACE_EXISTING);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取目录的对象\">获取目录的对象<a title=\"#获取目录的对象\" href=\"#获取目录的对象\"></a></h4>\n<p>Files类的newDirectoryStream()方法，可以获取目录中的文件、子目录和符号链接，该方法返回一个DirectoryStream,使用它可以迭代目录中的所有对象。</p>\n<p><code>public static DirectoryStream&lt;Path&gt; newDirectoryStream(Path path)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\DevTools&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(path) ;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(Path entry : entries) &#123;</span><br><span class=\"line\">                    System.out.println(entry);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"小文件读写\">小文件读写<a title=\"#小文件读写\" href=\"#小文件读写\"></a></h4>\n<p>Files类提供了从一个较小的二进制文件和文本文件读取与写入的方法。readAllBytes()方法和readAllLines()方法分别是从二进制文件和文本文件读取。这些方法可以自动打开和关闭流，但不能处理大文件。<br>\n<code>public static Path write(Path path, byte[] bytes,OpenOption…options)</code><br>\n<code>public static Path write(Path path, Iterable&lt;extends CharSequence&gt; lines,Charset cs, OpenOption…options)</code><br>\n<code>public static byte[] readAllBytes(Path path)</code><br>\n<code>public static List&lt;String&gt;readAllLines(Path path, Charset cs)</code></p>\n<p>OpenOption接口定义了打开文件进行写入的选项，StandardOpenOption枚举实现了该接口并提供了以下这些值。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>APPEND </code></td>\n<td style=\"text-align:left\">向文件末尾追加新数据。该选项与WRITE或CREATE同时使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>CREATE </code></td>\n<td style=\"text-align:left\">若文件存在则打开，若文件不存在则创建新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>CREATE_NEW </code></td>\n<td style=\"text-align:left\">创建一个新文件，如果文件存在则抛出异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>DELETE_ON_CLOSE </code></td>\n<td style=\"text-align:left\">当流关闭时删除文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>DSYNC </code></td>\n<td style=\"text-align:left\">使文件内容与基本存储设备同步。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>READ </code></td>\n<td style=\"text-align:left\">打开文件进行读取访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>SYNC </code></td>\n<td style=\"text-align:left\">使文件内容和元数据与基本存储设备同步。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>TRUNCATE_EXISTING </code></td>\n<td style=\"text-align:left\">截断文件使其长度为0字节，该选项与WRITE同时使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>WRITE </code></td>\n<td style=\"text-align:left\">为写数据而打开文件。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Path</span> <span class=\"variable\">test_txt</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Charset</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line_1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;黑夜给了我黑色的眼睛&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line_2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;我却用它来寻找光明&quot;</span>;</span><br><span class=\"line\">        List&lt;String&gt; lines = Arrays.asList(line_1, line_2);</span><br><span class=\"line\">        <span class=\"comment\">// write in</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Files.write(test_txt, lines, charset, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// read out</span></span><br><span class=\"line\">        List&lt;String&gt; linesRead = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            linesRead = Files.readAllLines(test_txt, charset);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(linesRead != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String line : linesRead) &#123;</span><br><span class=\"line\">                System.out.println(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"files-类创建流对象\">Files 类创建流对象<a title=\"#files-类创建流对象\" href=\"#files-类创建流对象\"></a></h4>\n<p>有了NIO.2后，就可以调用Files.newInputStream()方法，获得与文件关联的InputStream对象来读取数据，调用Files.newOutputStream()方法获得与文件关联的OutputStream对象向文件写数据。</p>\n<p><code>public static InputStream newInputStream(Path path, OpenOption...options) throws IOException</code><br>\n<code>public static OutputStream newOutputStream(Path path, OpenOption...options) throws IOException</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">test_txt</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Charset</span> <span class=\"variable\">chinaSet</span> <span class=\"operator\">=</span> Charset.forName(<span class=\"string\">&quot;GB2312&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// write in</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">BufferedWriter</span> <span class=\"variable\">output</span> <span class=\"operator\">=</span> Files.newBufferedWriter(test_txt, chinaSet))&#123;</span><br><span class=\"line\">            output.write(<span class=\"string\">&quot;来杯Java&quot;</span>.toCharArray());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// read out</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">BufferedReader</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> Files.newBufferedReader(test_txt, chinaSet))&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> input.readLine();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (line != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                System.out.println(line);</span><br><span class=\"line\">                line = input.readLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n","prev":{"title":"[数据库]基础","link":"2023/05/22/[数据库]基础"},"next":{"title":"[IDEA]开启断言","link":"2023/05/17/[IDEA]开启断言"},"plink":"https://s1acr.github.io/2023/05/18/[Java笔记]异常&输入输出/","toc":[{"id":"异常与异常类","title":"异常与异常类","index":"1","children":[{"id":"非检查异常","title":"非检查异常","index":"1.1"},{"id":"检查异常","title":"检查异常","index":"1.2"}]},{"id":"异常处理","title":"异常处理","index":"2","children":[{"id":"try-catch-finally","title":"try catch finally","index":"2.1"},{"id":"throws","title":"throws","index":"2.2"},{"id":"throw","title":"throw","index":"2.3"},{"id":"try-with-resource","title":"try with resource","index":"2.4"},{"id":"自定义异常类","title":"自定义异常类","index":"2.5"},{"id":"断言","title":"断言","index":"2.6"}]},{"id":"输入输出","title":"输入输出","index":"3","children":[{"id":"file-类","title":"File 类","index":"3.1"},{"id":"inputstream-类和-outputstream-类","title":"InputStream 类和 OutputStream 类","index":"3.2"},{"id":"常用二进制-i/o-流","title":"常用二进制 I&#x2F;O 流","index":"3.3","children":[{"id":"fileinput-类和-fileoutput-类","title":"FileInput 类和 FileOutput 类","index":"3.3.1"},{"id":"bufferedinputstream-类和-bufferedoutputstream-类","title":"BufferedInputStream 类和 BufferedOutputStream 类","index":"3.3.2"},{"id":"datainputstream-类和-dataoutputstream-类","title":"DataInputStream 类和 DataOutputStream 类","index":"3.3.3"},{"id":"printstream-类","title":"PrintStream 类","index":"3.3.4"},{"id":"标准输入输出流","title":"标准输入输出流","index":"3.3.5"}]},{"id":"文本-i/o-流","title":"文本 I&#x2F;O 流","index":"3.4","children":[{"id":"reader-类和-writer-类","title":"Reader 类和 Writer 类","index":"3.4.1"},{"id":"filereader-类和-filewriter-类","title":"FileReader 类和 FileWriter 类","index":"3.4.2"},{"id":"bufferedreader-类和-bufferedwriter类","title":"BufferedReader 类和 BufferedWriter类","index":"3.4.3"},{"id":"printwrite-类","title":"PrintWrite 类","index":"3.4.4"},{"id":"scanner-类","title":"Scanner 类","index":"3.4.5"}]},{"id":"对象序列化","title":"对象序列化","index":"3.5","children":[{"id":"serializable-接口","title":"Serializable 接口","index":"3.5.1"},{"id":"objectinputstream-类和-objectoutputstream-类","title":"ObjectInputStream 类和 ObjectOutputStream 类","index":"3.5.2"}]},{"id":"nio-和-nio.2","title":"NIO 和 NIO.2","index":"3.6","children":[{"id":"filesystem-类","title":"FileSystem 类","index":"3.6.1"},{"id":"path对象","title":"Path对象","index":"3.6.2"},{"id":"files-类","title":"Files 类","index":"3.6.3"},{"id":"获取目录的对象","title":"获取目录的对象","index":"3.6.4"},{"id":"小文件读写","title":"小文件读写","index":"3.6.5"},{"id":"files-类创建流对象","title":"Files 类创建流对象","index":"3.6.6"}]}]}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"May 18, 2023","updated":"May 18, 2023"},"reading_time":"8958 words in 60 min"}