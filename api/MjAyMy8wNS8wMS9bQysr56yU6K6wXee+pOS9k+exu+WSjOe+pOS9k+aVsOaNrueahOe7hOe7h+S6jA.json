{"title":"[C++笔记]群体类和群体数据的组织二","date":"2023-05-01T00:00:00.000Z","date_formatted":{"ll":"May 1, 2023","L":"05/01/2023","MM-DD":"05-01"},"link":"2023/05/01/[C++笔记]群体类和群体数据的组织二","comments":true,"categories":["C++"],"updated":"2023-05-01T00:00:00.000Z","content":"<blockquote>\n<p>C++笔记</p>\n</blockquote>\n<p>模板实现几个常见的排序/查找算法<br>\n每个算法都有很多种实现方式, 懂得其内在思想才是最重要的.</p>\n<h2 id=\"排序\">排序<a title=\"#排序\" href=\"#排序\"></a></h2>\n<h3 id=\"插入排序\">插入排序<a title=\"#插入排序\" href=\"#插入排序\"></a></h3>\n<p>插入排序的基本思想是: 每一步将一个待排序元素按其关键字值的大小插入到己排序序列的适当位置上，直到待排序元素插入完为止。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\tT temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;  <span class=\"comment\">// 从第2个数开始, 依次往后扫描, 插入后面 len - 1 个数</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> j = i;\t\t\t\t\t<span class=\"comment\">// 每次要插的数的位置</span></span><br><span class=\"line\">\t\tT temp = arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j - <span class=\"number\">1</span>]) &#123;\t<span class=\"comment\">// 前i个数位置正确, 从后往前找到正确位置</span></span><br><span class=\"line\">\t\t\tarr[j] = arr[j - <span class=\"number\">1</span>];\t\t\t\t<span class=\"comment\">// 后移一位</span></span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 退出循环, 插入位置已找到</span></span><br><span class=\"line\">\t\tarr[j] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 另一种</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(T* arr, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(T* arr, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 模板插入排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; arr[j] &lt; arr[j<span class=\"number\">-1</span>] &amp;&amp; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">\t\t\tT temp = arr[j];</span><br><span class=\"line\">\t\t\tarr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\tarr[j - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printArr</span>(arr, len);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> data[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">15</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>,<span class=\"number\">14</span>,<span class=\"number\">16</span>,<span class=\"number\">18</span>,<span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"keyword\">sizeof</span> data / <span class=\"keyword\">sizeof</span> data[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">insertSort</span>&lt;<span class=\"type\">int</span>&gt;(data, len);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305142015373.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"选择排序\">选择排序<a title=\"#选择排序\" href=\"#选择排序\"></a></h3>\n<p>选择排序的基本思想是:每次从待排序序列中选择一个关键字最小的元素(当需要按关键字升序排列时) ，顺序排在已排序序列的最后，直至全部排完。在选择类排序方法中，根据从待排序序列中选择元素的方法不同，又分为不同的选择排序方法。其中最简单的是通过顺序比较找出待排序序列中的最小元素，称为直接选择排序.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class=\"line\">\tT temp = x;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">\ty = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;\t\t<span class=\"comment\">// 选择len-1次</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min_idx = i;\t\t\t<span class=\"comment\">// 初始最小假设idx 为 i</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;\t\t<span class=\"comment\">// 从 i +1 开始往后依次比较</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &lt; arr[min_idx]) &#123;</span><br><span class=\"line\">\t\t\t\tmin_idx = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 得到min_idx</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (min_idx == i) <span class=\"keyword\">continue</span>;\t\t<span class=\"comment\">// 位置正确, 无需交换\t</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>&lt;T&gt;(arr[i], arr[min_idx]);\t\t<span class=\"comment\">// 交换</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"交换排序\">交换排序<a title=\"#交换排序\" href=\"#交换排序\"></a></h3>\n<p>交换排序的基本思想是: 两两比较待排序序列中的元素，并交换不满足顺序要求的各对元素，直到全部满足顺序要求为止。最简单的交换排序方法是冒泡排序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;\t\t\t\t<span class=\"comment\">// n-1趟</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;\t\t<span class=\"comment\">// 每趟使最大的一项交换到最后</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) <span class=\"built_in\">swap</span>(arr[j], arr[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查找\">查找<a title=\"#查找\" href=\"#查找\"></a></h2>\n<h3 id=\"顺序查找\">顺序查找<a title=\"#顺序查找\" href=\"#顺序查找\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sequentialSearch</span><span class=\"params\">(<span class=\"type\">const</span> T arr[], <span class=\"type\">int</span> len, <span class=\"type\">const</span> T&amp; key)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] == key) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"折半/二分查找\">折半/二分查找<a title=\"#折半/二分查找\" href=\"#折半/二分查找\"></a></h3>\n<p>如果是在一个元素排列有序的数组中进行查找，可以采用折半查找方法。折半查找方法的基本思想是:对于已接关键字排序的序列，经过一次比较后，可将序列分割成两部分，然后只在有可能包含待查元素的一部分中继续查找，并根据试探结果继续分割，逐步缩小查找范围，直至找到或找不到为止。</p>\n<p>本质是减制, 还可以递归实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"type\">const</span> T arr[], <span class=\"type\">const</span> <span class=\"type\">int</span> len, <span class=\"type\">const</span> T&amp; key)</span>  </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> high = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> mid = (low + high) / <span class=\"number\">2</span>;\t\t<span class=\"comment\">// 中间元素下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key == arr[mid]) <span class=\"keyword\">return</span> mid;\t\t<span class=\"comment\">// 查找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; arr[mid]) high = mid - <span class=\"number\">1</span>;  <span class=\"comment\">// 在左半边, 重新置high</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;\t\t\t\t\t\t  <span class=\"comment\">// 在右半边, 重新置low</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;\t\t\t\t<span class=\"comment\">// 没有查找到 返回-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模板的实例化\">模板的实例化<a title=\"#模板的实例化\" href=\"#模板的实例化\"></a></h2>\n<p>类模板本身不是类, 函数模板也不是函数, 只有实例化之后才能当类/函数使用.</p>\n<p>模板的实例化是按需进行的，用到哪个类型就生成针对哪个类型的函数或类，不会提前生成过多的代码。也就是说，编译器会根据传递给类型参数的实参（也可以是编译器自己推演出来的实参）来生成一个特定版本的函数或类，并且相同的类型只生成一次。实例化的过程也很简单，就是将所有的类型参数用实参代替。</p>\n<p>另外需要注意的是类模板的实例化，通过类模板创建对象时并不会实例化所有的成员函数，只有等到真正调用它们时才会被实例化；如果一个成员函数永远不会被调用，那它就永远不会被实例化。这说明类的实例化是延迟的、局部的，编译器并不着急生成所有的代码。</p>\n<p>通过类模板创建对象时，一般只需要实例化成员变量和构造函数。成员变量被实例化后就能够知道对象的大小了（占用的字节数），构造函数被实例化后就能够知道如何初始化了；对象的创建过程就是分配一块大小已知的内存，并对这块内存进行初始化。</p>\n<p><code>通常模板的实例化是在调用函数或者创建对象时由编译器自动完成的，不需要程序员引导，因此称为隐式实例化。相对应的，我们也可以通过代码明确地告诉编译器需要针对哪个类型进行实例化，这称为显式实例化</code>。</p>\n<p>编译器在实例化的过程中需要知道模板的所有细节：对于函数模板，也就是函数定义；对于类模板，需要同时知道类声明和类定义。我们必须将显式实例化的代码放在包含了模板定义的源文件中，而不是仅仅包含了模板声明的头文件中。这样一来，就可以把模板的声明和定义放在不同文件里面了。</p>\n<h3 id=\"显式实例化实现模板分文件\">显式实例化实现模板分文件<a title=\"#显式实例化实现模板分文件\" href=\"#显式实例化实现模板分文件\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ================= templ.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a, T&amp; b)</span></span>;\t\t<span class=\"comment\">// 函数模板声明</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">TestClass</span> &#123;             <span class=\"comment\">// 类模板声明</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ================= templ.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;templ.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a, T&amp; b)</span>  <span class=\"comment\">//函数模板实现</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"type\">void</span> <span class=\"built_in\">swap</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">int</span>&amp; a, <span class=\"type\">int</span>&amp; b);\t<span class=\"comment\">// 函数模板显示实例化, 会在生成当前源文件的该类型函数目标代码</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// &lt;int&gt;可以不写, 编译器自动类型识别</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;                           <span class=\"comment\">// 类模板的实现</span></span><br><span class=\"line\"><span class=\"type\">void</span> TestClass&lt;T&gt;::<span class=\"built_in\">showType</span>() &#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"built_in\">typeid</span>(T).<span class=\"built_in\">name</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestClass</span>&lt;<span class=\"type\">int</span>&gt; ;\t\t<span class=\"comment\">// 类模板显示实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ================= main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;templ.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">\tstd::cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\tTestClass&lt;<span class=\"type\">int</span>&gt; t;</span><br><span class=\"line\">\tt.<span class=\"built_in\">showType</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// TestClass&lt;float&gt; f;\t// 这句能过编译, 编译器生成的构造函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// f.showType();\t    // 错误没有实例化的函数成员, 源文件只显示实例化了 TestClass&lt;int&gt; 型</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"模板的特化\">模板的特化<a title=\"#模板的特化\" href=\"#模板的特化\"></a></h2>\n<p>模板是一种泛型技术，它能接受的类型是宽泛的、没有限制的，并且对这些类型使用的算法都是一样的（函数体或类体一样）。让模板能够针对某种具体的类型使用不同的算法（函数体或类体不同），这在 C++ 中是可以做到的，这种技术称为模板的<code>显式具体化（Explicit Specialization）</code>。</p>\n<p>通常模板的实例化是在调用函数或者创建对象时由编译器自动完成的，不需要程序员引导，因此称为隐式实例化。相对应的，我们也可以通过代码明确地告诉编译器需要针对哪个类型进行实例化，这称为显式实例化。</p>\n<p>在 C++ 中，对于给定的函数名，可以有非模板函数、模板函数、显示具体化模板函数以及它们的重载版本，在调用函数时，<code>显示具体化优先于常规模板，而非模板函数优先于显示具体化和常规模板</code>。</p>\n<p>模板类调用优先级从高到低进行排序是：全特化类 &gt; 偏特化类 &gt; 主版本模板类</p>\n<h3 id=\"函数显示具体化\">函数显示具体化<a title=\"#函数显示具体化\" href=\"#函数显示具体化\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">float</span> score;</span><br><span class=\"line\">&#125; STU;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"type\">const</span> T&amp; <span class=\"title\">Max</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; a, <span class=\"type\">const</span> T&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"type\">const</span> STU&amp; <span class=\"built_in\">Max</span>&lt;STU&gt;(<span class=\"type\">const</span> STU&amp; a, <span class=\"type\">const</span> STU&amp; b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.score &gt; b.score ? a : b;</span><br><span class=\"line\">    <span class=\"comment\">// 显示实例化， &lt;STU&gt;可省略， 由编译器自动推导.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt; (ostream&amp; out, <span class=\"type\">const</span> STU&amp; stu) &#123;</span><br><span class=\"line\">    out &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; stu.score;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">Max</span>(a, b) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    STU stu1 = &#123; <span class=\"string\">&quot;Sam&quot;</span>, <span class=\"number\">90</span> &#125;, stu2 = &#123; <span class=\"string\">&quot;Amy&quot;</span>, <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">Max</span>(stu1, stu2);</span><br><span class=\"line\">    <span class=\"comment\">// 同名函数会按优先级调用普通函数 显示具体化的模板函数, 普通模板函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的显式具体化\">类的显式具体化<a title=\"#类的显式具体化\" href=\"#类的显式具体化\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//====================================================</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T2</span>&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(T1 x, T2 y) : <span class=\"built_in\">m_x</span>(x), <span class=\"built_in\">m_y</span>(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">T1 <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setX</span><span class=\"params\">(T1 x)</span> </span>&#123; m_x = x; &#125;</span><br><span class=\"line\">    <span class=\"function\">T2 <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setY</span><span class=\"params\">(T2 y)</span> </span>&#123; m_y = y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T1 m_x;</span><br><span class=\"line\">    T2 m_y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T2</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Point&lt;T1, T2&gt;::<span class=\"built_in\">display</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; m_x &lt;&lt; <span class=\"string\">&quot;, y=&quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=====================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 全特化类模板具体化, 必须有一个主模板类, 参数全部明确</span></span><br><span class=\"line\"><span class=\"comment\">//====================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* x, <span class=\"type\">const</span> <span class=\"type\">char</span>* y) : <span class=\"built_in\">m_x</span>(x), <span class=\"built_in\">m_y</span>(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* x)</span> </span>&#123; m_x = x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* y)</span> </span>&#123; m_y = y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* m_x;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* m_y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> Point&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;::<span class=\"built_in\">display</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; m_x &lt;&lt; <span class=\"string\">&quot; 全特化 y=&quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=====================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 偏特化类模板具体化, 具体化部分模板参数, 参数全部明确则为全特化</span></span><br><span class=\"line\"><span class=\"comment\">// 调用优先级从高到低进行排序是：全特化类 &gt; 偏特化类 &gt; 主版本模板类</span></span><br><span class=\"line\"><span class=\"comment\">//====================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T2&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, T2&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* x, T2 y) : <span class=\"built_in\">m_x</span>(x), <span class=\"built_in\">m_y</span>(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* x)</span> </span>&#123; m_x = x; &#125;</span><br><span class=\"line\">    <span class=\"function\">T2 <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setY</span><span class=\"params\">(T2 y)</span> </span>&#123; m_y = y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* m_x;</span><br><span class=\"line\">    T2 m_y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T2&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Point&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, T2&gt;::<span class=\"built_in\">display</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; m_x &lt;&lt; <span class=\"string\">&quot; 偏特化 y=&quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">Point</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">10</span>, <span class=\"number\">20</span>))-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">int</span>&gt;(<span class=\"string\">&quot;E180&quot;</span>,  <span class=\"number\">10</span>))-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;(<span class=\"string\">&quot;E180&quot;</span>, <span class=\"string\">&quot;N210&quot;</span>))-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305012207653.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"函数模板的重载\">函数模板的重载<a title=\"#函数模板的重载\" href=\"#函数模板的重载\"></a></h3>\n<p>c++ 不允许将函数模板偏特化，但函数模板像普通函数那样允许被重载，通过将函数模板重载也可以完成与类模板偏特化类似的功能。</p>\n<p>注意特化是模板的参数明确, 而不是函数参数表中的参数.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt; <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;模板函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"type\">void</span> <span class=\"built_in\">test</span>&lt;<span class=\"type\">double</span>, <span class=\"type\">double</span>&gt;() &#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;函数全特化&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//template&lt;class T1&gt; void test&lt;T1, double&gt;() &#123;  // 函数没有偏特化</span></span><br><span class=\"line\"><span class=\"comment\">//\tcout &lt;&lt; &quot;函数偏特化&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test</span>&lt;<span class=\"type\">double</span>, <span class=\"type\">double</span>&gt;();\t\t\t<span class=\"comment\">// 函数全特化</span></span><br><span class=\"line\">\t<span class=\"built_in\">test</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">double</span>&gt;();\t\t\t<span class=\"comment\">// 模板函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; T&amp; <span class=\"title\">findMax</span><span class=\"params\">(T&amp; t1, T&amp; t2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (t1 &gt; t2 ? t1 : t2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板函数重载</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; T&amp; <span class=\"title\">findMax</span><span class=\"params\">(T* t1, T* t2)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (*t1 &gt; *t2 ? *t1 : *t2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; T&amp; <span class=\"title\">findMax</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\tT&amp; Max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\tMax = <span class=\"built_in\">findMax</span>(Max, arr[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">findMax</span>(a, b) &lt;&lt; endl;\t\t\t<span class=\"comment\">// 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">findMax</span>(&amp;a, &amp;b) &lt;&lt; endl;\t\t<span class=\"comment\">// 2</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span> ,<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"keyword\">sizeof</span> arr / <span class=\"keyword\">sizeof</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">findMax</span>(arr, len) &lt;&lt; endl;\t\t<span class=\"comment\">// 8</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体化和实例化的区别：\">具体化和实例化的区别：<a title=\"#具体化和实例化的区别：\" href=\"#具体化和实例化的区别：\"></a></h3>\n<p>具体化：即显式具体化，与实例化不同的是，它也是一个模板定义，但它是对特定类型的模板定义。</p>\n<p>实例化：在程序中的函数模板本身并不会生成函数定义，它只是一个用于生成函数定义的方案。编译器使用模板为特定类型生成函数定义时，得到的是模板实例。这即是函数模板的实例化。<br>\n程序运行时完成了实例化的工作，而具体化是由程序员完成的。</p>\n<h2 id=\"模板元编程\">模板元编程<a title=\"#模板元编程\" href=\"#模板元编程\"></a></h2>\n<p>模板元编程是指在模板实例化的同时利用编译器完成一些计算任务。通过模板元编程，可以把一些需要在运行时计算的任务放到编译时来做，从而提高程序的运行时效率。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Factorial</span> &#123;\t\t\t\t<span class=\"comment\">// 也可以声明成模板类</span></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> &#123; VALUE = N * Factorial&lt;N<span class=\"number\">-1</span>&gt;::VALUE&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"keyword\">struct</span> <span class=\"title class_\">Factorial</span>&lt;<span class=\"number\">0</span>&gt; &#123;\t<span class=\"comment\">// 特化给出终止条件</span></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> &#123; VALUE = <span class=\"number\">1</span> &#125;;\t\t\t\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算乘方</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Power</span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"type\">static</span> T <span class=\"title\">value</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x * Power&lt;N - <span class=\"number\">1</span>&gt; ::<span class=\"built_in\">value</span>(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span>  <span class=\"title class_\">Power</span>&lt;<span class=\"number\">1</span>&gt; &#123;\t\t\t<span class=\"comment\">// 特化递归终止条件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"type\">static</span> T <span class=\"title\">value</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简化写法, 辅助函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span> N, <span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> T <span class=\"title\">power</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Power&lt;N&gt;::<span class=\"built_in\">value</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[Factorial&lt;M&gt;::VALUE];\t\t<span class=\"comment\">// 编译时自动计算阶乘, 而不是运行时</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"keyword\">sizeof</span> arr / <span class=\"keyword\">sizeof</span> arr[<span class=\"number\">0</span>] &lt;&lt; endl; <span class=\"comment\">// 720</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; Power&lt;<span class=\"number\">3</span>&gt;::<span class=\"built_in\">value</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>) &lt;&lt; endl;  <span class=\"comment\">// 2^3 类模板嵌套函数模板</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">Power</span>&lt;<span class=\"number\">3</span>&gt;().<span class=\"built_in\">value</span>(<span class=\"number\">1.5</span>) &lt;&lt; endl;\t  <span class=\"comment\">// 3.375</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">power</span>&lt;<span class=\"number\">10</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>) &lt;&lt; endl;\t<span class=\"comment\">// 2^10</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/152211160\" target=\"_blank\">Chapter16：模板（二）——显式具体化和显式实例化</a></li>\n</ol>\n","prev":{"title":"[Java]Task","link":"2023/05/01/[Java]Task"},"next":{"title":"[Java]Lab","link":"2023/05/01/[Java]Lab"},"plink":"https://s1acr.github.io/2023/05/01/[C++笔记]群体类和群体数据的组织二/","toc":[{"id":"排序","title":"排序","index":"1","children":[{"id":"插入排序","title":"插入排序","index":"1.1"},{"id":"选择排序","title":"选择排序","index":"1.2"},{"id":"交换排序","title":"交换排序","index":"1.3"}]},{"id":"查找","title":"查找","index":"2","children":[{"id":"顺序查找","title":"顺序查找","index":"2.1"},{"id":"折半/二分查找","title":"折半&#x2F;二分查找","index":"2.2"}]},{"id":"模板的实例化","title":"模板的实例化","index":"3","children":[{"id":"显式实例化实现模板分文件","title":"显式实例化实现模板分文件","index":"3.1"}]},{"id":"模板的特化","title":"模板的特化","index":"4","children":[{"id":"函数显示具体化","title":"函数显示具体化","index":"4.1"},{"id":"类的显式具体化","title":"类的显式具体化","index":"4.2"},{"id":"函数模板的重载","title":"函数模板的重载","index":"4.3"},{"id":"具体化和实例化的区别：","title":"具体化和实例化的区别：","index":"4.4"}]},{"id":"模板元编程","title":"模板元编程","index":"5"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"May 1, 2023","updated":"May 1, 2023"},"reading_time":"3670 words in 24 min"}