{"title":"[C++笔记]指针","date":"2023-04-26T00:00:00.000Z","date_formatted":{"ll":"Apr 26, 2023","L":"04/26/2023","MM-DD":"04-26"},"link":"2023/04/26/[C++笔记]指针","comments":true,"categories":["C++"],"updated":"2023-04-26T00:00:00.000Z","content":"<blockquote>\n<p>C++笔记</p>\n</blockquote>\n<h2 id=\"指针\">指针<a title=\"#指针\" href=\"#指针\"></a></h2>\n<h3 id=\"函数指针\">函数指针<a title=\"#函数指针\" href=\"#函数指针\"></a></h3>\n<p>函数名就表示函数的代码在内存中的起始地址。调用函数的通常形式&quot;函数名(参数表)“的实质就是&quot;函数代码首地址(参数表)”。<br>\n函数名在表示函数代码起始地址的同时，也包括函数的返回值类型和参数的个数、类型、排列次序等信息。因此在通过函数名调用函数时，编译系统能够自动检查实参与形参是否相符，用函数的返回值参与其他运算时，能自动进行类型一致性检查。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test_01</span><span class=\"params\">(<span class=\"type\">float</span>)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;test_01&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test_02</span><span class=\"params\">(<span class=\"type\">float</span> f)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;test_02_&quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test_03</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;test_03_&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*fp)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (*func_ptr)(<span class=\"type\">float</span>);</span><br><span class=\"line\">\tfunc_ptr = test_01;\t\t\t<span class=\"comment\">// 定义的函数指针必须与test_01相同 void(*)(float)</span></span><br><span class=\"line\">\t<span class=\"built_in\">func_ptr</span>(<span class=\"number\">0.1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunc_ptr = test_02;</span><br><span class=\"line\">\t<span class=\"built_in\">func_ptr</span>(<span class=\"number\">0.2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (*func_ptr_2)(<span class=\"type\">int</span>);</span><br><span class=\"line\">\tfunc_ptr_2 = test_03;</span><br><span class=\"line\">\t<span class=\"built_in\">func_ptr_2</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfp my_fptr = test_03;\t<span class=\"comment\">// 使用自定义的函数指针类型</span></span><br><span class=\"line\">\t<span class=\"built_in\">my_fptr</span>(<span class=\"number\">999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组指针\">数组指针<a title=\"#数组指针\" href=\"#数组指针\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[a<span class=\"number\">-2</span>][a<span class=\"number\">-1</span>][a];\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">int</span>(*arr_ptr)[a<span class=\"number\">-1</span>][a] = arr;   <span class=\"comment\">//\t三维数组的指针 arr_ptr既是指针也是数组名</span></span><br><span class=\"line\">\tcout &lt;&lt; arr_ptr[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tarr_ptr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[a<span class=\"number\">-2</span>][a<span class=\"number\">-1</span>][a]();</span><br><span class=\"line\">\tcout &lt;&lt; arr_ptr[<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; a - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; a; k++) &#123;</span><br><span class=\"line\">\t\t\t\t*(*(*(arr_ptr + i) + j) + k) = (i+<span class=\"number\">1</span>) * <span class=\"number\">100</span> + (j+<span class=\"number\">1</span>) * <span class=\"number\">10</span> + (k+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"comment\">// 用指针偏移量访问数组</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; a - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; a; k++) &#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; arr_ptr[i][j][k] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"comment\">// 用下标访问数组</span></span><br><span class=\"line\">\t\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;===================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] arr_ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this指针\">this指针<a title=\"#this指针\" href=\"#this指针\"></a></h3>\n<p>this 指针实际上是类成员函数的一个隐含参数。在调用类的成员函数时，<code>目的对象的地址会自动作为该参数的值</code>，传递给被调用的成员函数，这样被调函数就能够通过this 指针来访问目的对象的数据成员。对于常成员函数来说，这个隐含的参数是常指针类型的。</p>\n<h3 id=\"指向类的成员的指针\">指向类的成员的指针<a title=\"#指向类的成员的指针\" href=\"#指向类的成员的指针\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> z;  <span class=\"comment\">// 引用性声明</span></span><br><span class=\"line\">\t<span class=\"built_in\">P</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(string s)</span> <span class=\"type\">const</span></span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">st</span><span class=\"params\">(string s)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> P::z;   <span class=\"comment\">// 定义性声明, 静态成员默认初始值0, 也可以指定值.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">P::st</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">P <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\tP* PTR = &amp;p;</span><br><span class=\"line\">\t<span class=\"type\">int</span> P::* ptr;   <span class=\"comment\">// 声明指向类中数据成员的指针</span></span><br><span class=\"line\">\tptr = &amp;P::x;\t<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\tcout &lt;&lt; p.*ptr &lt;&lt; endl;\t<span class=\"comment\">// 使用对象名调用</span></span><br><span class=\"line\">\tcout &lt;&lt; PTR-&gt;*ptr &lt;&lt; endl;  <span class=\"comment\">// 使用对象指针调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; PTR &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &amp;(p.*ptr) &lt;&lt; endl;\t<span class=\"comment\">// 对象名的地址就是第一个元素的地址</span></span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (P:: * f_ptr) (string) <span class=\"type\">const</span>;\t<span class=\"comment\">// 成员函数指针</span></span><br><span class=\"line\">\tf_ptr = &amp;P::test;\t\t\t\t<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\t(p.*f_ptr)(<span class=\"string\">&quot;good&quot;</span>);\t\t\t\t<span class=\"comment\">// 调用</span></span><br><span class=\"line\">\t(PTR-&gt;*f_ptr)(<span class=\"string\">&quot;nice&quot;</span>);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span>* s_ptr = &amp;P::z;\t\t\t<span class=\"comment\">// 静态成员的指针, 全局变量</span></span><br><span class=\"line\">\tcout &lt;&lt; (*s_ptr) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (* sf_ptr)(string) = &amp;P::st;\t\t<span class=\"comment\">// &amp; 可写可不写</span></span><br><span class=\"line\">\t(sf_ptr)(<span class=\"string\">&quot;well&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态内存分配\">动态内存分配<a title=\"#动态内存分配\" href=\"#动态内存分配\"></a></h2>\n<p>在程序运行过程中申请和释放的存储单元也称为堆对象，申请和释放过程一般称为建立和删除。<br>\nnew 数据类型(初始化参数列表);</p>\n<p>如果内存申请成功. new 运算便返回一个指向新分配内存首地址的类型的指针，可以通过这个指针对堆对象进行访问. 如果申请失败，会抛出异常.<br>\n对于基本数据类型，如采不希望在分配内存后设定初值，可以把括号省去<br>\n如采保留括号，但括号中不写任何数值，则表示用。对该对象初始化</p>\n<p>delete 指针名;<br>\n对象的析构函数将被调用。<br>\n对于用 new 建立的对象，只能使用 delete 进行<code>一次删除</code>操作</p>\n<p>new 分配的内存，必须用 delete 加以释放，否则会导致动态分配的内存无法回收，使得程序占据的内存越来越大，造成&quot;内存泄漏&quot;。</p>\n<p>new 动态创建一维数组时，在方括号后仍然可以加小括号&quot;()&quot;, 初始化0;</p>\n<p>利用动态内存分配操作实现了数组的动态创建，使得数组元素的个数可以根据运行时的需要而确定。但是建立和删除数组的过程使得程序略显烦琐，更好的方法是将数组的建立和删除过程封装起来，形成一个<code>动态数组类</code>。</p>\n<p>assert 的含义是&quot;断言&quot;，它是标准 c+十的 cassert 头文件中定义的一个宏，用来判断一个条件表达式的值是否为 true ，如果不为 true ，程序会中止，并且报告出错误，这样就很容易将错误定位。一个程序一般可以以两种模式编译 <code>调试(debug) 模式和发行( release) 模式</code>， assert 只在调试模式下生效，而在发行模式下不执行任何操作，这样兼顾了调试模式的调试需求和发行模式的效率需求。</p>\n<h2 id=\"字符串和string容器\">字符串和string容器<a title=\"#字符串和string容器\" href=\"#字符串和string容器\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// C字符串</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* str = <span class=\"string\">&quot;code&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> str_1[<span class=\"number\">5</span>] = &#123; <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"literal\">NULL</span> &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; str_1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;______________________&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// string容器</span></span><br><span class=\"line\">\t<span class=\"comment\">// string类有需多重载与操作方法</span></span><br><span class=\"line\">\tstring s_1 = <span class=\"string\">&quot;foobar&quot;</span>;\t<span class=\"comment\">// </span></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_2</span><span class=\"params\">(s_1)</span></span>;\t\t<span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_3</span><span class=\"params\">(str)</span></span>;\t\t<span class=\"comment\">// 字符串指针</span></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_4</span><span class=\"params\">(<span class=\"string\">&quot;code&quot;</span>)</span></span>;\t\t<span class=\"comment\">// </span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_5</span><span class=\"params\">(s_1, <span class=\"number\">3</span>, <span class=\"number\">3</span>)</span></span>;\t\t<span class=\"comment\">// bar</span></span><br><span class=\"line\">\tcout &lt;&lt; s_5 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// string(const string&amp; rhs, unsigned int pos, unsigned int n) ;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_6</span><span class=\"params\">(s_1, <span class=\"number\">5</span>)</span></span>;\t\t\t<span class=\"comment\">// r</span></span><br><span class=\"line\">\tcout &lt;&lt; s_6 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_7</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">&#x27;c&#x27;</span>)</span></span>;\t\t<span class=\"comment\">// cccccccccc</span></span><br><span class=\"line\">\tcout &lt;&lt; s_7 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;foo&quot;</span>) + <span class=\"built_in\">string</span>(<span class=\"string\">&quot;bar&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"built_in\">string</span>(<span class=\"string\">&quot;aaa&quot;</span>) &lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;ddd&quot;</span>) )&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;012345&quot;</span>)[<span class=\"number\">3</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 常用方法</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;g&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;o&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;o&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;d&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;01234567&quot;</span>).<span class=\"built_in\">substr</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;012345&quot;</span>).<span class=\"built_in\">find</span>(<span class=\"string\">&quot;3&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;123&quot;</span>).<span class=\"built_in\">length</span>() &lt;&lt; endl;</span><br><span class=\"line\">\ts_1.<span class=\"built_in\">swap</span>(s_2);\t\t<span class=\"comment\">// s_1 指向 s_2</span></span><br><span class=\"line\">\tcout &lt;&lt; s_1 &lt;&lt; <span class=\"string\">&quot;   &quot;</span> &lt;&lt; s_2 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// ....</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"指针与引用\">指针与引用<a title=\"#指针与引用\" href=\"#指针与引用\"></a></h2>\n<p>所以说指针是一种底层的机制。引用则是一种较高层的机制，在语言概念上它是另一变量的&quot;别名&quot;，把地址这一概念隐藏起来了，但在引用运行时的实现机制中，还不得不借助于地址。二者可以说是殊途同归，差异主要是语言形式, 最后都是靠存储地址来实现的。<code>引用相当于指针常量, 引用是为了方便使用对指针的包装</code>.</p>\n<p>有些时候引用不能代替使用指针:</p>\n<ul>\n<li>使用函数指针，由于没有函数引用，所以函数指针无法被引用替代。</li>\n<li>用 new 动态创建的对象或数组，需要用指针来存储它的地址。</li>\n<li>以数组形式传递大批量数据时，需要用指针类型接收参数</li>\n</ul>\n<p><code>T &amp;s = *(new T()); delete &amp;s;</code>, 这样其实可以, 一般不用.</p>\n<h3 id=\"指针类型安全性\">指针类型安全性<a title=\"#指针类型安全性\" href=\"#指针类型安全性\"></a></h3>\n<p><code>reinterpret_cast</code>可以将一种类型的指针转换为另一种类型的指针. 具有很大的危险性和不确定性，c++ 标准只保证用 reinterpret_cast 转换后与再转换回的值相同.</p>\n<p>C 允许 void 指针隐含地转换为其他任何类型的指针，而 c++ 规定这种情况只能显式转换，这是 c++ 相比的一个安全之处。</p>\n<p>void 指针的另一个用途在于，有时一个指针可能会指向不同类型的对象， void 指针只起一定的传递作用，最终使用该指针时，还需要根据情况将指针还原为它原先的类型。</p>\n<p>有很多从C标准 继承而来的函数会使用 void 指针作为参数和返回值，例如将二段内存空间设为一个固定值 (memset) 、比较两段内存空间 (memcmp) 、复制一段内存空间(memcpy) 、动态分配一段内存空间 (malloc) 、释放动态分配的内存空间 (free) 等，这些操作都是不管具体的数据类型，把不同类型的数据当作无差别的二进制序列。其中，动态内存管理的函数( malloc free 等)已经可以被 c++ new delete 关键字全面替代，而直接内存操作的函数 (memset memcmp , memcpy 等)只能针对对象的二进制表示进行处理，不符合面向对象的要求，一般不用，至多对一些基本数据类型的数组使用。</p>\n<p>总结起来，保证指针类型安全性的办法有以下几种。</p>\n<ul>\n<li>除非非常特殊的底层用途， reinterprt_cast 不要用。</li>\n<li>继承标准 的涉及 void 指针的函数，一般不要用，至多对一些基本数据类型及其数组使用。</li>\n<li>如果一定需要用 void 指针，那么用 static_cast void 指针转换为具体类型的指针时，一定要转换为最初的类型(即当初转换到该 void 指针的指针类型)。</li>\n</ul>\n<h3 id=\"堆对象管理\">堆对象管理<a title=\"#堆对象管理\" href=\"#堆对象管理\"></a></h3>\n<p>通常使用的局部变量，在运行栈上分配空间，空间分配和释放的过程是由编译器生成的代码控制的，一个函数返回后相应的空间会自行释放;而静态生存期变量，其空间的分配是由连接器完成的，它们占用的空间大小始终是固定的，在运行过程中无须释放。然而，用 new 在程序运行时动态创建的堆对象，则必须由程序用 delete 显式删除。如果动态生成的对象不再需要使用也不用 delete 删除，会使得这部分空间始终不能被其他对象利用，造成内存资源的泄漏。</p>\n<p>有时确实需要在<code>不同类之间转移堆对象的归属</code>。例如，如果一个函数需要返回一个对象，为了避免复制构造函数因传递返回值被调用(因为大对象的复制构造会有较大开销) ，可以在函数内用 new 建立该对象，再将该对象的地址返回，但这就要求调用这个函数的类确保这个返回的堆对象最后被删除。每当遇到这种情况，都应当在函数的注释中明确指出，函数的调用者应当负责删除函数所返回的堆对象。这实际上是类的对外接口约定的一部分，不过能否正确履行不由编译器来检查，而需完全由编程者来保证。</p>\n<p>解决动态对象的管理问题，也可以借助于<code>共享指针</code>。共享指针是一种具有指针行为的特殊的类，它会在<code>指向一个堆对象的所有指针都不再有效时，自动将其删除</code>。虽然使用共享指针要付出一定的效率代价，但安全性很好，容易使用。</p>\n<h3 id=\"cosnt_cast\">cosnt_cast<a title=\"#cosnt_cast\" href=\"#cosnt_cast\"></a></h3>\n<p><code>const_cast</code> 只用于将<code>常指针转换为普通指针，将常引用转换为普通引用</code>，而不用来将常对象转换为普通对象，因为这是没有意义的。因为对象(而非引用)的转换会生成对象的副本，而使用常对象本来就可以直接生成普通对象的副本.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>* ptr = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//*ptr = 88;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* q = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">int</span>* &gt;(ptr);</span><br><span class=\"line\">\t*q = <span class=\"number\">88</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"知识点:\">知识点:<a title=\"#知识点:\" href=\"#知识点:\"></a></h2>\n<ol>\n<li>\n<p>指针取值两种方式</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span>* p = &amp;nums[<span class=\"number\">4</span>];</span><br><span class=\"line\">cout &lt;&lt; p[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">cout &lt;&lt; p[<span class=\"number\">-2</span>] &lt;&lt; endl;</span><br><span class=\"line\">cout &lt;&lt; *(p + <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>常引用指向的对象可以是常量, <code>const int&amp; a = 1;</code></p>\n</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n","prev":{"title":"[VS]使用开发人员PowerShell查看类信息","link":"2023/04/27/[VS]使用开发人员PowerShell查看类信息"},"next":{"title":"[C++笔记]类与对象","link":"2023/04/26/[C++笔记]类与对象"},"plink":"https://s1acr.github.io/2023/04/26/[C++笔记]指针/","toc":[{"id":"指针","title":"指针","index":"1","children":[{"id":"函数指针","title":"函数指针","index":"1.1"},{"id":"数组指针","title":"数组指针","index":"1.2"},{"id":"this指针","title":"this指针","index":"1.3"},{"id":"指向类的成员的指针","title":"指向类的成员的指针","index":"1.4"}]},{"id":"动态内存分配","title":"动态内存分配","index":"2"},{"id":"字符串和string容器","title":"字符串和string容器","index":"3"},{"id":"指针与引用","title":"指针与引用","index":"4","children":[{"id":"指针类型安全性","title":"指针类型安全性","index":"4.1"},{"id":"堆对象管理","title":"堆对象管理","index":"4.2"},{"id":"cosnt_cast","title":"cosnt_cast","index":"4.3"}]},{"id":"知识点:","title":"知识点:","index":"5"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"April 26, 2023","updated":"April 26, 2023"},"reading_time":"3042 words in 20 min"}