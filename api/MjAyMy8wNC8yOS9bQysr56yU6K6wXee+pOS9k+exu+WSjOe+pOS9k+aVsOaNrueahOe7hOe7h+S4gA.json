{"title":"[C++笔记]群体类和群体数据的组织一","date":"2023-04-29T00:00:00.000Z","date_formatted":{"ll":"Apr 29, 2023","L":"04/29/2023","MM-DD":"04-29"},"link":"2023/04/29/[C++笔记]群体类和群体数据的组织一","comments":true,"categories":["C++"],"updated":"2023-04-29T00:00:00.000Z","content":"<h2 id=\"群体类和群体数据\">群体类和群体数据<a title=\"#群体类和群体数据\" href=\"#群体类和群体数据\"></a></h2>\n<p>基本数据类型是 c++ 编译系统预定义的，而自定义类型的数据是由<code>多个基本类型或自定义类型的元素组成</code>，称之为<code>群体数据</code>。<br>\n对于群体数据，仅有系统预定义的操作是不够的，在很多情况下，还需要设计与某些具体问题相关的特殊操作，并按照面向对象的方法将<code>数据与操作封装起来</code>，这就是<code>群体类</code>。<br>\n群体可分为两种:<code>线性群体和非线性群体</code>。线性群体中的元素按位置排到有序, 如数组。非线性群体不用位置顺序来标识元素， 如拓扑图.</p>\n<h2 id=\"函数模板和类模板\">函数模板和类模板<a title=\"#函数模板和类模板\" href=\"#函数模板和类模板\"></a></h2>\n<p>模板是 C++ 支持<code>参数化程序设计的工具</code>，通过它可以<code>实现参数化多态性</code>。所谓参数化多态性，就是将程序所处理的<code>对象的类型参数化</code>，使得一段程序可以用于处理多种不同类型的对象。</p>\n<p><code>类模板的多文件结构中必须声明与实现都在头文件中</code>. 因为如果分文件编写, 在编译的时候类模板没有实例化就不会产生目标代码. 当其他源文件引用该模板头文件时, 虽然能实例化各个类模板的声明, 但无法将函数的实现实例化, 因为编译器对每个源文件的编译时分别进行的. 编译时无法相互访问. 得不到模板的具体实现, 连接时就会发生错误.<br>\n如果将函数模板、类模板的成员函数和类模板的静态数据成员的定义都放在头文件中，就可以避免这一问题，因为这些定义在编译任何一个源文件时都是可见的，编译器可以按需对它们进行实例化。</p>\n<p>由于函数模板和类模板的成员函数一般放在头文件中，这与内联函数相似，因此容易被人误以为函数模板和类模板的成员函数都会被自动当作内联函数处理。其实<code>函数模板和类模板的成员函数既可以是内联函数，也可以是非内联函数</code>，将其声明为内联函数的方法与非模板的函数一样，都要使用 inline 关键字，或将成员函数写在类定义内。</p>\n<h3 id=\"函数模板\">函数模板<a title=\"#函数模板\" href=\"#函数模板\"></a></h3>\n<p>(1)函数模板本身在编译时不会生成任何目标代码，只有由模板生成的实例会生成目标代码。<br>\n(2) <code>被多个源文件引用的函数模板，应当连同函数体一同放在头文件中</code>，而不能像普通函数那样只将声明放在头文件中。<br>\n(3) 函数指针也只能指向模板的实例，而不能指向模板本身。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;\t\t<span class=\"comment\">// 或者 class 关键字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showT</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">typeid</span>(t).<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">showT</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showT</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showT</span>&lt;<span class=\"type\">char</span>&gt;(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">\tshowT&lt;&gt;(<span class=\"string\">&quot;test&quot;</span>);\t<span class=\"comment\">// 也可以不写模板参数, 编译器自动识别, 最好还是写上</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304301229641.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"类模板\">类模板<a title=\"#类模板\" href=\"#类模板\"></a></h3>\n<p>使用类模板使用户可以为类定义一种模式，使得类中的某些数据成员、某些成员函数的参数、返回值或局部变量能取任意类型(包括系统预定义的和用户自定义的)。<br>\n类是对一组对象的公共性质的抽象，而类模板则是对不同类的公共性质的抽象，因此类模板是属于更高层次的抽象。由于类模板需要一种或多种类型参数，所以类模板也常常称为<code>参数化类</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Intel_CPU</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AMD_CPU</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NVIDIA_GPU</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AMD_GPU</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">C</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">G</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Computer</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Computer</span>(C c, G g) : <span class=\"built_in\">c</span>(c), <span class=\"built_in\">g</span>(g) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tC c;</span><br><span class=\"line\">\tG g;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">C</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">G</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Computer&lt;C, G&gt;::<span class=\"built_in\">getInfo</span>() &#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">typeid</span>(c).<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">typeid</span>(g).<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类外实现模板类的成员函数, 有点复杂</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tIntel_CPU IC;</span><br><span class=\"line\">\tAMD_CPU AC;</span><br><span class=\"line\">\t<span class=\"function\">Computer&lt;Intel_CPU, AMD_GPU&gt; <span class=\"title\">c_1</span><span class=\"params\">(IC, AMD_GPU())</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Computer&lt;AMD_CPU, NVIDIA_GPU&gt; <span class=\"title\">c_2</span><span class=\"params\">(AC, NVIDIA_GPU())</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里不知道为什么全部该成创建匿名对象不行, 创建一个就可以, 可能是生存期的问题</span></span><br><span class=\"line\">\tc_1.<span class=\"built_in\">getInfo</span>();</span><br><span class=\"line\">\tc_2.<span class=\"built_in\">getInfo</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304301351523.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"线性群体\">线性群体<a title=\"#线性群体\" href=\"#线性群体\"></a></h2>\n<p>线性群体中的元素次序与其位置关系是对应的。在线性群体中，又可按照访问元素的不同方法分为<code>直接访问、顺序访问和索引访问</code>。<br>\n两种特殊的线性群体 栈和队列。</p>\n<h2 id=\"直接访问群体一一数组类\">直接访问群体一一数组类<a title=\"#直接访问群体一一数组类\" href=\"#直接访问群体一一数组类\"></a></h2>\n<p>实现一个简单的<code>动态数组类模板 Array</code> 。它由任意多个位置连续的、类型相同的元素组成，其元素个数可在程序运行时改变。它虽然比 vector 简单，但与 vector 的工作原理没有本质差别。</p>\n<p>C++ 中，如果想将自定义类型T的对象隐含或显式地转换为S类型，可以将operator S定义为T的成员函数。这样，在把T类型对象显式隐含转换为S类型，或用static_cast 显式转换为S类型时，该成员函数会被调用。转换操作符的重载函数不用指定返回值的类型，这是由于这种情况下重载函数的返回类型与操作符名称一致，因此c++ 标准规定不能为这类函数指定返回值类型(也不要写 void)<br>\n而当对象本身为常数时，为了避免通过指针对数组内容进行修改，只能将对象转换为常指针。</p>\n<h3 id=\"实现动态数组类模板\">实现动态数组类模板<a title=\"#实现动态数组类模板\" href=\"#实现动态数组类模板\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ARRAY_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Array</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* list;\t<span class=\"comment\">// 指针, 用于动态分配内存</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size;\t<span class=\"comment\">// 数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>(<span class=\"type\">int</span> sz = <span class=\"number\">50</span>);\t\t\t\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>(<span class=\"type\">const</span> Array&lt;T&gt;&amp; arr);\t\t<span class=\"comment\">// 复制构造函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\tArray&lt;T&gt;&amp; <span class=\"keyword\">operator</span>= (<span class=\"type\">const</span> Array&lt;T&gt;&amp; rhs);\t\t<span class=\"comment\">// 重载 = </span></span><br><span class=\"line\">\tT&amp; <span class=\"keyword\">operator</span>[] (<span class=\"type\">int</span> i);\t\t\t\t\t\t\t<span class=\"comment\">// 重载 []</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>[] (<span class=\"type\">int</span> i) <span class=\"type\">const</span>;\t\t\t\t<span class=\"comment\">// 针对const重载 []</span></span><br><span class=\"line\">\t<span class=\"keyword\">operator</span> T* ();\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 重载到 T* 类型的转换</span></span><br><span class=\"line\">\t<span class=\"keyword\">operator</span> <span class=\"type\">const</span> T* () <span class=\"type\">const</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t\t\t\t<span class=\"comment\">// 获得数组大小</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"type\">int</span> sz)</span></span>;\t\t\t\t\t\t\t<span class=\"comment\">// 修改数组大小</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"built_in\">Array</span>(<span class=\"type\">int</span> sz) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(sz &gt;= <span class=\"number\">0</span>);\t\t\t\t\t\t\t\t<span class=\"comment\">// sz 初始化应 &gt;= 0 </span></span><br><span class=\"line\">\tsize = sz;</span><br><span class=\"line\">\tlist = <span class=\"keyword\">new</span> T[size];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 析构函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::~<span class=\"built_in\">Array</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"built_in\">Array</span>(<span class=\"type\">const</span> Array&lt;T&gt;&amp; a) &#123;</span><br><span class=\"line\">\tsize = a.size;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 复制大小</span></span><br><span class=\"line\">\tlist = <span class=\"keyword\">new</span> T[size];\t\t\t\t\t\t\t\t<span class=\"comment\">// 申请内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;\t\t\t\t<span class=\"comment\">// 复制每个元素</span></span><br><span class=\"line\">\t\tlist[i] = a.list[i];\t\t\t\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载 = 运算符, 实现对象间的赋值</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>= (<span class=\"type\">const</span> Array&lt;T&gt;&amp; rhs) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (&amp;rhs != <span class=\"keyword\">this</span>) &#123;\t\t\t<span class=\"comment\">// 避免 a = a 这种情况</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size != rhs.size) &#123;\t </span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果数组大小与rhs不同, 不好改变已分配大小,选择删除原有内存, 重新分配</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[] list;\t\t\t\t</span><br><span class=\"line\">\t\t\tsize = rhs.size;</span><br><span class=\"line\">\t\t\tlist = <span class=\"keyword\">new</span> T[size];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;\t\t\t<span class=\"comment\">// 复制每个元素</span></span><br><span class=\"line\">\t\t\tlist[i] = rhs.list[i];\t\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;\t\t\t\t<span class=\"comment\">// 返回当前对象的引用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回一个引用, 不仅是为了链式编程, C++中&#x27;=&#x27;运算允许做左值, (a = b) = c + 1, 如果返回对象则不可做左值, 并且调用复制构造额外开销, 一般返回引用 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载下标运算符 []</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(n &gt;= <span class=\"number\">0</span> &amp;&amp; n &lt; size);  <span class=\"comment\">// 数组下标控制</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//返回值应为一个引用, 因为返回值将要作为左值, arr[i] = xx, 如果是返回对象则是不可做左值的.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> n) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(n &gt;= <span class=\"number\">0</span> &amp;&amp; n &lt; size);\t\t\t<span class=\"comment\">// 同上, 重载const修饰条件下的数组下标运算[]</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载指针运算符, 将Array类的对象名转换为T类型指针, 指向当前对象的私有数组</span></span><br><span class=\"line\"><span class=\"comment\">// 为了发生隐式转换编译器能自动调用, 例如函数接受一个int* 指针, 但传入的是 Array&lt;int&gt;* p 的指针</span></span><br><span class=\"line\"><span class=\"comment\">// 这时编译器会尝试转换 (int*)p, 调用重载的 类型转换运算符 </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"keyword\">operator</span> T* () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"keyword\">operator</span> <span class=\"type\">const</span> T*() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> Array&lt;T&gt;::<span class=\"built_in\">getSize</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Array&lt;T&gt;::<span class=\"built_in\">resize</span>(<span class=\"type\">int</span> sz) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(sz &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sz == size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tT* newList = <span class=\"keyword\">new</span> T[sz];\t\t\t<span class=\"comment\">// 创建新数组并分配空间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> n = (sz &lt; size) ? sz : size; <span class=\"comment\">// 填入数据的长度应该为 较小的数组长度 n</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\tnewList[i] = list[i];\t\t<span class=\"comment\">// 将前n个元素复制到新数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] list;\t\t\t<span class=\"comment\">// 删除旧数组</span></span><br><span class=\"line\">\tlist = newList;\t\t\t<span class=\"comment\">// 指向新数组</span></span><br><span class=\"line\">\tsize = sz;\t\t\t\t<span class=\"comment\">// 更新size </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">endif</span>  <span class=\"comment\">// ARRAY_H</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\">测试<a title=\"#测试\" href=\"#测试\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Array.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Array&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">Arr_f</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Arr_f.<span class=\"built_in\">getSize</span>(); i++) &#123;</span><br><span class=\"line\">\t\tArr_f[i] = (<span class=\"type\">float</span>)i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Arr_f.<span class=\"built_in\">getSize</span>(); i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; fixed &lt;&lt; Arr_f[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// defaultfloat 默认浮点数格式化是不显示精度尾0, 可以改成fixed 显示精度 </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tArr_f.<span class=\"built_in\">resize</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tcout &lt;&lt; Arr_f.<span class=\"built_in\">getSize</span>() &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; Arr_f[<span class=\"number\">20</span>] &lt;&lt; endl;   <span class=\"comment\">// 未初始化</span></span><br><span class=\"line\"><span class=\"comment\">//\tcout &lt;&lt; Arr_f[200] &lt;&lt; endl;   // debug 触发断言</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">float</span>* f = (<span class=\"type\">const</span> <span class=\"type\">float</span>*)Arr_f;  <span class=\"comment\">// 转换为常指针</span></span><br><span class=\"line\">\tcout &lt;&lt; f[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span>* ff = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">float</span>*&gt;(f);\t</span><br><span class=\"line\">\tcout &lt;&lt; ff[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"顺序访问群体一一链表类\">顺序访问群体一一链表类<a title=\"#顺序访问群体一一链表类\" href=\"#顺序访问群体一一链表类\"></a></h2>\n<p>链表是一种动态数据结构，可以用来表示顺序访问的线性群体。</p>\n<h3 id=\"实现链表类模板\">实现链表类模板<a title=\"#实现链表类模板\" href=\"#实现链表类模板\"></a></h3>\n<h4 id=\"节点类模板\">节点类模板<a title=\"#节点类模板\" href=\"#节点类模板\"></a></h4>\n<p>结点类的数据成员中应该包括数据域和指针域的内容，函数成员中应该含有对数据和指针进行初始化的方法(函数) ，以及在本结点之后插入新结点和删除后继结点的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Node.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode&lt;T&gt;* front, * rear;\t\t<span class=\"comment\">// 表头和表尾指针</span></span><br><span class=\"line\">\tNode&lt;T&gt;* prevPtr, * currPtr; <span class=\"comment\">// 记录当前遍历位置的指针, 用于插入删除操作更新</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size;\t\t\t\t\t<span class=\"comment\">// 表中元素个数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> position;\t\t\t\t<span class=\"comment\">// 当前元素在表中的位置序号, 函数reset 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Node&lt;T&gt;* <span class=\"title\">newNode</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item, Node&lt;T&gt;* ptrNext = <span class=\"literal\">NULL</span>)</span></span>;\t<span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">freeNode</span><span class=\"params\">(Node&lt;T&gt;* p)</span></span>;\t\t\t\t<span class=\"comment\">// 释放结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">copy</span><span class=\"params\">(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L)</span></span>;\t\t<span class=\"comment\">// 将链表L复制到当前表, 被复制构造函数和operator&#x27;=&#x27; 调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>();\t\t\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L);  <span class=\"comment\">// 复制构造函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedList</span>();\t\t\t\t<span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">\tLinkedList&lt;T&gt;&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L);  <span class=\"comment\">// 重载复值运算符 = </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 返回链表元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 返回链表是否为空</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reset</span><span class=\"params\">(<span class=\"type\">int</span> pos = <span class=\"number\">0</span>)</span></span>;\t\t\t<span class=\"comment\">// 初始化游标的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t<span class=\"comment\">// 使游标移动到下一结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">endOfList</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 游标是否到链尾</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">currentPostion</span><span class=\"params\">(<span class=\"type\">void</span>)</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 返回游标当前位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertFront</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t<span class=\"comment\">// 表头插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertRear</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t\t<span class=\"comment\">// 表尾插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertAt</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t\t<span class=\"comment\">// 当前结点之前插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertAfter</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t<span class=\"comment\">// 当前结点之后插入结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">deleteFront</span><span class=\"params\">()</span></span>;\t\t\t\t\t<span class=\"comment\">// 删除头结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteCurrent</span><span class=\"params\">()</span></span>;\t\t\t\t<span class=\"comment\">// 删除当前节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">T&amp; <span class=\"title\">data</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t\t<span class=\"comment\">// 返回当前节点对应数据的引用</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T&amp; <span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 返回常引用</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t<span class=\"comment\">// 清空链表, 释放内存, 被析构和operator=调用</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Node&lt;T&gt;* LinkedList&lt;T&gt;::<span class=\"built_in\">newNode</span>(<span class=\"type\">const</span> T&amp; item, Node&lt;T&gt;* ptrNext <span class=\"comment\">/* = NULL */</span>) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(item, ptrNext);</span><br><span class=\"line\">\tsize++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">freeNode</span>(Node&lt;T&gt;* p) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\tsize--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制链表</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">copy</span>(<span class=\"type\">const</span> LinkedList&amp; L) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isEmpty</span>(L)) <span class=\"keyword\">return</span>;\t\t\t\t<span class=\"comment\">// 如果链表空返回</span></span><br><span class=\"line\">\tLinkedList newList;</span><br><span class=\"line\">\tL.<span class=\"built_in\">reset</span>(<span class=\"number\">1</span>);\t\t\t\t\t\t\t<span class=\"comment\">// 从第二个结点开始</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; L.<span class=\"built_in\">getSize</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertAfter</span>(L.<span class=\"built_in\">data</span>());</span><br><span class=\"line\">\t\tL.<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::<span class=\"built_in\">LinkedList</span>() &#123;</span><br><span class=\"line\">\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tposition = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"built_in\">newNode</span>(<span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);\t\t\t\t\t\t<span class=\"comment\">// 初始化头结点</span></span><br><span class=\"line\">\tfront = rear = prevPtr = currPtr = p_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制构造</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::<span class=\"built_in\">LinkedList</span>(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(L);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 析构</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::~<span class=\"built_in\">LinkedList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载 = </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;&amp; LinkedList&lt;T&gt;::<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(L);</span><br><span class=\"line\">\t<span class=\"built_in\">clear</span>(L);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回链表元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> LinkedList&lt;T&gt;::<span class=\"built_in\">getSize</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size ;\t\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回链表是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedList&lt;T&gt;::<span class=\"built_in\">isEmpty</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (front == rear) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化游标的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reset</span>(<span class=\"type\">int</span> pos <span class=\"comment\">/* =  0 */</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pos == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;\t\t\t\t\t<span class=\"comment\">// </span></span><br><span class=\"line\">\tcurrPtr = prevPtr = front;\t\t\t\t\t<span class=\"comment\">// 从头开始偏移</span></span><br><span class=\"line\">\tposition = pos;\t\t\t\t\t\t\t\t<span class=\"comment\">// 偏移完成 position 应等于 pos</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; position; i++) &#123;\t\t<span class=\"comment\">// prevPtr 和 currPtr移动到对应位置</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 游标移动到下一结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">next</span>() &#123;</span><br><span class=\"line\">\tprevPtr = currPtr;</span><br><span class=\"line\">\tcurrPtr = currPtr-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\tposition++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 游标是否到链尾</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedList&lt;T&gt;::<span class=\"built_in\">endOfList</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (position == size) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回游标当前位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> LinkedList&lt;T&gt;::<span class=\"built_in\">currentPostion</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> position;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertFront</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\tNode* p_node = <span class=\"built_in\">newNode</span>(item, front);</span><br><span class=\"line\">\tfront = p_node;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表尾插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertRear</span>(<span class=\"type\">const</span> T&amp; item)&#123;</span><br><span class=\"line\">\tNode* p_node = <span class=\"built_in\">newNode</span>(item, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\trear-&gt;<span class=\"built_in\">insertAfter</span>(p_node);</span><br><span class=\"line\">\trear = p_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前节点之前插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertAt</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"built_in\">newNode</span>(item, currPtr);</span><br><span class=\"line\">\tprevPtr-&gt;<span class=\"built_in\">insertAfter</span>(p_node);</span><br><span class=\"line\">\tcurrPtr = p_node;\t\t\t\t\t<span class=\"comment\">// currPtr前移</span></span><br><span class=\"line\">\tposition--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前结点之后插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertAfter</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"built_in\">newNode</span>(item, currPtr-&gt;<span class=\"built_in\">nextNode</span>());</span><br><span class=\"line\">\tcurrPtr-&gt;<span class=\"built_in\">insertAfter</span>(p_node);</span><br><span class=\"line\">\tcurrPtr = p_node;\t\t\t\t\t\t<span class=\"comment\">// currPtr后移</span></span><br><span class=\"line\">\tposition++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除头结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">deleteFront</span>() &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* temp = front;</span><br><span class=\"line\">\tT data = front-&gt;data;</span><br><span class=\"line\">\tfront = front-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">freeNode</span>(temp);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除当前结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">deleteCurrent</span>() &#123;</span><br><span class=\"line\">\tprevPtr-&gt;<span class=\"built_in\">insertAfter</span>(currPtr-&gt;<span class=\"built_in\">nextNode</span>());</span><br><span class=\"line\">\tNode&lt;T&gt;* temp_curr = currPtr;</span><br><span class=\"line\">\tcurrPtr = currPtr-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">freeNode</span>(temp_curr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回当前结点对应数据的引用</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T&amp; LinkedList&lt;T&gt;::<span class=\"built_in\">data</span>()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currPtr-&gt;data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回常引用</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; LinkedList&lt;T&gt;::<span class=\"built_in\">data</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currPtr-&gt;data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空链表</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">clear</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (front != rear) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* temp = front-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">freeNode</span>(front);</span><br><span class=\"line\">\t\tfront = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">freeNode</span>(front);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-1\">测试<a title=\"#测试-1\" href=\"#测试-1\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LinkedList.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tLinkedList&lt;<span class=\"type\">char</span>&gt; L;</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;G&#x27;</span>);\t\t\t<span class=\"comment\">// 后插</span></span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;O&#x27;</span>);\t\t\t</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;O&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">reset</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; L.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">\t\tL.<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;4&#x27;</span>);\t\t\t<span class=\"comment\">// 前插</span></span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">reset</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; L.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">\t\tL.<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304302219400.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>感觉实现有点问题, position 还没用. 书上给的是游标来控制插入删除取数的位置, 既有头插也有尾插, 用双向链表的节点好实现些.</p>\n<h2 id=\"栈类\">栈类<a title=\"#栈类\" href=\"#栈类\"></a></h2>\n<p>栈的基本状态有:一般状态、栈空、栈满。当栈中没有元素时称为栈空;当栈中元素个数达到上限时，称为栈满;栈中有元素、但未达到栈满状态时，即处于一般状态。如果用静态数组存储存元素，则元素个数达到数组声明的元素个数时即为栈满。如果使用动态数组或链表，则可以根据需要设置或不设置元素的最大个数。</p>\n<p>无论采用哪种数据结构，栈类中都应该包括下列基本操作:初始化、入栈、出栈、栈清空、访问栈顶元素、检测栈的状态(满或空)。</p>\n<h3 id=\"实现栈类模板\">实现栈类模板<a title=\"#实现栈类模板\" href=\"#实现栈类模板\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 定义类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE = <span class=\"number\">50</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> Stack &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT list[SIZE];\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> top;\t\t\t\t<span class=\"comment\">// 栈顶位置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Stack</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t<span class=\"comment\">// 入栈</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;\t\t\t\t\t<span class=\"comment\">// 出栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;\t\t\t\t<span class=\"comment\">// 清空栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T&amp; <span class=\"title\">peek</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t<span class=\"comment\">// 访问栈顶元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t<span class=\"comment\">// 栈是否空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t<span class=\"comment\">// 栈是否满</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt; </span><br><span class=\"line\">Stack&lt;T, SIZE&gt;::<span class=\"built_in\">Stack</span>() : <span class=\"built_in\">top</span>(<span class=\"number\">-1</span>) &#123;&#125;\t\t<span class=\"comment\">// 构造函数, 初始化栈顶为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入栈</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">push</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(!<span class=\"built_in\">isFull</span>());\t\t\t\t<span class=\"comment\">// 栈满报错</span></span><br><span class=\"line\">\tlist[++top] = item;\t\t\t\t<span class=\"comment\">// 新元素压入栈顶</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt; </span><br><span class=\"line\">T Stack&lt;T, SIZE&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(!<span class=\"built_in\">isEmpty</span>());\t\t\t\t<span class=\"comment\">// 栈空报错</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[top--];\t\t\t\t<span class=\"comment\">// 栈顶出栈</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问栈顶元素</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; Stack&lt;T, SIZE&gt;::<span class=\"built_in\">peek</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(!<span class=\"built_in\">isEmpty</span>());\t\t\t\t<span class=\"comment\">// 栈空报错</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[top];\t\t\t\t<span class=\"comment\">// 返回栈顶元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈是否空</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">isEmpty</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> top == <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈是否满</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">isFull</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> top == SIZE - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空栈</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">clear</span>() &#123;</span><br><span class=\"line\">\ttop = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-2\">测试<a title=\"#测试-2\" href=\"#测试-2\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Stack.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tStack&lt;<span class=\"type\">char</span>, <span class=\"number\">50</span>&gt; s;</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;L&#x27;</span>);</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;V&#x27;</span>);</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">isEmpty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">peek</span>();</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// EVIL</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"队列类\">队列类<a title=\"#队列类\" href=\"#队列类\"></a></h2>\n<p>队列也有三种基本状态:一般状态、队空、队满。当队中没有元素时称为队空;当队中元素个数达到上限时，称为队满;队中有元素，但未达到队满状态时，即处于一般状态。<br>\n如果用静态数组存储队列元素，则元素个数达到数组声明的元素个数时即为队满。如果使用动态数组或链表，则可以根据需要设置或不设置元素的最大个数。</p>\n<p>无论采用哪种数据结构，队列类的数据成员都应包括:队列元素、队头指针和队尾指针。队列类中函数成员应该能够实现下列基本操作:初始化、入队、出队、清空队列、访问队首元素、检测队列的状态(满、空、队列长度)。</p>\n<p>如果用静态数组存储队列元素，每当有元素出队时，队中元素都要向队头方向移动。因此数据移动量大，效率不高。</p>\n<p>可以将队列设计为<code>循环队列</code>。也就是在想象中将数组弯曲成环形，元素出队时，后继元素不移动，每当队尾达到数组最后一个元素时，便再回到数组开头。为了使队尾达到数组最后一个元素时，再回到数组开头，需要运用取余运算(%)。另外，为了判断队列的状态，需要对元素个数进行记录。当元素个数为0时，队空。当元素个数等于最大值时，队满。</p>\n<h3 id=\"实现\">实现<a title=\"#实现\" href=\"#实现\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span>  QUEUE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QUEUE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类模板定义</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE = <span class=\"number\">50</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> Queue &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> front, rear, count;\t\t\t<span class=\"comment\">// 队头指针 对位指针 元素个数</span></span><br><span class=\"line\">\tT list[SIZE];\t\t\t\t\t<span class=\"comment\">// 元素数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Queue</span>();\t\t\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t\t<span class=\"comment\">// 入队</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">remove</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t<span class=\"comment\">// 出队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;\t\t\t\t\t<span class=\"comment\">// 清空队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T&amp; <span class=\"title\">getFront</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 访问队首元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 返回队列元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 是否队空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 是否队满</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\">Queue&lt;T, SIZE&gt;::<span class=\"built_in\">Queue</span>() : <span class=\"built_in\">front</span>(<span class=\"number\">0</span>), <span class=\"built_in\">rear</span>(<span class=\"number\">0</span>), <span class=\"built_in\">count</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">insert</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(count != SIZE);\t\t\t\t<span class=\"comment\">// 队满报错</span></span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\tlist[rear] = item;\t\t\t\t\t<span class=\"comment\">// 插入队尾</span></span><br><span class=\"line\">\trear = (rear + <span class=\"number\">1</span>) % SIZE;\t\t\t<span class=\"comment\">// 队尾后移, 取余实现循环, 余数范围在 [0, SIZE-1] 循环</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\">T Queue&lt;T, SIZE&gt;::<span class=\"built_in\">remove</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(count != <span class=\"number\">0</span>);\t\t\t\t\t<span class=\"comment\">// 队空报错</span></span><br><span class=\"line\">\tcount--;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = front;\t\t\t\t\t<span class=\"comment\">// 记录队首</span></span><br><span class=\"line\">\tfront = (front + <span class=\"number\">1</span>) % SIZE;\t\t    <span class=\"comment\">// 队头后移, 取余实现循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[temp];\t\t\t\t\t<span class=\"comment\">// 返回首元素的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问队列首元素</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; Queue&lt;T, SIZE&gt;::<span class=\"built_in\">getFront</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[front];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">int</span>  Queue&lt;T, SIZE&gt;::<span class=\"built_in\">getLength</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否队空</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">isEmpty</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否队满</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">isFull</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count == SIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空队列</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">clear</span>() &#123;</span><br><span class=\"line\">\tcount = front = rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// ! QUEUE_H</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-3\">测试<a title=\"#测试-3\" href=\"#测试-3\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Queue.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tQueue&lt;<span class=\"type\">int</span>, <span class=\"number\">10</span>&gt; q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; !q.<span class=\"built_in\">isFull</span>() ; i++) &#123;</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; !q.<span class=\"built_in\">isEmpty</span>(); i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; q.<span class=\"built_in\">getFront</span>();</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">remove</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 0123456789</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n","prev":{"title":"[C++笔记]多态","link":"2023/04/29/[C++笔记]多态"},"next":{"title":"[C++笔记]继承","link":"2023/04/28/[C++笔记]继承"},"plink":"https://s1acr.github.io/2023/04/29/[C++笔记]群体类和群体数据的组织一/","toc":[{"id":"群体类和群体数据","title":"群体类和群体数据","index":"1"},{"id":"函数模板和类模板","title":"函数模板和类模板","index":"2","children":[{"id":"函数模板","title":"函数模板","index":"2.1"},{"id":"类模板","title":"类模板","index":"2.2"}]},{"id":"线性群体","title":"线性群体","index":"3"},{"id":"直接访问群体一一数组类","title":"直接访问群体一一数组类","index":"4","children":[{"id":"实现动态数组类模板","title":"实现动态数组类模板","index":"4.1"},{"id":"测试","title":"测试","index":"4.2"}]},{"id":"顺序访问群体一一链表类","title":"顺序访问群体一一链表类","index":"5","children":[{"id":"实现链表类模板","title":"实现链表类模板","index":"5.1","children":[{"id":"节点类模板","title":"节点类模板","index":"5.1.1"}]},{"id":"测试-1","title":"测试","index":"5.2"}]},{"id":"栈类","title":"栈类","index":"6","children":[{"id":"实现栈类模板","title":"实现栈类模板","index":"6.1"},{"id":"测试-2","title":"测试","index":"6.2"}]},{"id":"队列类","title":"队列类","index":"7","children":[{"id":"实现","title":"实现","index":"7.1"},{"id":"测试-3","title":"测试","index":"7.2"}]}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"April 29, 2023","updated":"April 29, 2023"},"reading_time":"5344 words in 36 min"}