{"title":"[Java笔记]类&对象","date":"2023-05-03T00:00:00.000Z","date_formatted":{"ll":"May 3, 2023","L":"05/03/2023","MM-DD":"05-03"},"link":"2023/05/03/[Java笔记]类&对象","comments":true,"categories":["Java"],"updated":"2023-05-03T00:00:00.000Z","content":"<h2 id=\"类的定义\">类的定义<a title=\"#类的定义\" href=\"#类的定义\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>][<span class=\"keyword\">abstract</span> | <span class=\"keyword\">final</span>] <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> [<span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>] [<span class=\"keyword\">implements</span> <span class=\"title class_\">InterfaceNameList</span>]&#123; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class body...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类访问修饰符可以是public或缺省, 使用public, 则称之公共类, 公共类可以被任何包中的类使用, 若不加public修饰符, 只能被同一包中的其他类使用.</p>\n<p>一个project中只能有一个主类和主方法.<br>\n一个源文件中只能有一个public类, 其他类的个数不限.</p>\n<p>在练习的时候为了方便在一个project中放入多个主类, 我们可以为每次的代码单独建一个包, 一个包可以包含多个源文件, 包的名称不像类的名称严格限定必须和源文件中类名相同, 更改灵活. 这个包中可以写主类和主方法来测试各个类. 虽然在每个源文件中也可以写主方法那是因为主方法是静态的, 无需实例化在编译时就可以确定入口. <code>但这并不符合认知逻辑, 一个类应该只完成该类的功能, 主方法就应该放在完成程序执行功能的主类中</code>.</p>\n<h2 id=\"成员变量的定义\">成员变量的定义<a title=\"#成员变量的定义\" href=\"#成员变量的定义\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span> | <span class=\"keyword\">protected</span> | <span class=\"keyword\">private</span>] [<span class=\"keyword\">static</span>] [<span class=\"keyword\">final</span>] type variableName[=value];</span><br></pre></td></tr></table></figure>\n<p>用 public修饰的变量为公共变量，公共变量可以被任何方法访问；用protected修饰的变量称为保护变量，保护变量可以被同一个包中的类或子类访问；<code>没有使用访问修饰符，该变量只能被同一个包中的类访问</code>；用private修饰的变量称为私有变量，私有变量只能被同一个类的方法访问.</p>\n<p>如果变量用static修饰，则该变量称为静态变量，又称为类变量。没有用 static修饰的变量称为实例变量</p>\n<p>使用 final修饰的变量叫作最终变量，也称为标识符常量。常量可以在声明时赋初值, 也可以在后面赋初值，一旦为其赋值，就不能再改变了.</p>\n<h2 id=\"成员方法的定义\">成员方法的定义<a title=\"#成员方法的定义\" href=\"#成员方法的定义\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span> | <span class=\"keyword\">protected</span> | <span class=\"keyword\">private</span>]  [<span class=\"keyword\">static</span>] [<span class=\"keyword\">final</span> | <span class=\"keyword\">abstract</span>] returnType <span class=\"title function_\">methodName</span> <span class=\"params\">([paramList])</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// method body...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>private方法只能在同一个类中被调用，protected方法可以在同一个类、同一个包中的类以及子类中被调用，而用 public修饰的方法可以在任何类中调用。一个方法如果缺省访问修饰符，则称<code>包可访问的</code>，即可以被同一个类的方法访问和同一个包中的类访问.</p>\n<p>没有用 static修饰的方法称为实例方法，用 static修饰的方法称为静态方法。</p>\n<p>用 final修饰的方法称为最终方法，最终方法不能被覆盖。方法的覆盖与继承有关。用 abstract修饰的方法称为抽象方法。</p>\n<h2 id=\"单例模式\">单例模式<a title=\"#单例模式\" href=\"#单例模式\"></a></h2>\n<p>在Java类的设计中，有时希望一个类在任何时候只能有一个实例，这时可以将该类设计为单例模式(singleton)。要将一个类设计为单例模式，类的构造方法的访问修饰符应声明为private, 然后在类中定义一个static方法，在该方法中创建类的对象.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;           <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">I</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();     <span class=\"comment\">// 唯一的实列对象</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Singleton s = new Singleton();</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> Singleton.I;</span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> Singleton.I;         </span><br><span class=\"line\">        s1.print(<span class=\"string\">&quot;good&quot;</span>);</span><br><span class=\"line\">        s1.num++;</span><br><span class=\"line\">        s2.num++;</span><br><span class=\"line\">        System.out.println(s1.num);  <span class=\"comment\">// 2</span></span><br><span class=\"line\">        System.out.println(s1==s2);  <span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象初始化值\">对象初始化值<a title=\"#对象初始化值\" href=\"#对象初始化值\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305031943070.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ObjInit</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;    <span class=\"comment\">// 默认初始化值1</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = <span class=\"number\">2</span>;   <span class=\"comment\">// 初始化块初始化</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;x in initial block: &quot;</span> + x );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;    <span class=\"comment\">// 静态初始化块初始化静态变量</span></span><br><span class=\"line\">        y = <span class=\"number\">20</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;y in initial block: &quot;</span> + y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ObjInit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.y = <span class=\"number\">30</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;x in constructor: &quot;</span> + x );</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;y in constructor: &quot;</span> + y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjInit</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjInit</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;x after constructor: &quot;</span> + o.x);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;y after constructor: &quot;</span> + o.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305032008187.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>当一个类有多种初始化方法时，执行顺序是：<br>\n(1)用默认值给静态变量赋值，然后执行静态初始化块为static变量赋值。<br>\n(2)用默认值给实例变量赋值，然后执行初始化块为实例变量赋值。<br>\n(3)最后使用构造方法初始化静态变量或实例变量。</p>\n<h2 id=\"垃圾回收gc\">垃圾回收GC<a title=\"#垃圾回收gc\" href=\"#垃圾回收gc\"></a></h2>\n<p>在 Java程序中，允许创建尽可能多的对象，而不用担心销毁它们。当程序使用一个对象后，该对象不再被引用时， Java运行系统就在后台自动运行一个线程，终结 (finalized) 该对象并释放其所占的内存空间，这个过程称为垃圾回收 (garbage collection,GC)。<br>\n后台运行的线程称为垃圾回收器 (garbage collector)。垃圾回收器自动完成垃圾回收操作，因此，这个功能也称为自动垃圾回收。所以，在一般情况下，程序员不用关心对象不被清除而产生内存泄露问题。</p>\n<p>当一个对象不再被引用时，该对象才有可能被回收。一个对象可能有多个引用，只有在所有的引用都被删除，对象才有可能被回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123; <span class=\"built_in\">this</span>.num = num; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> t1;</span><br><span class=\"line\">        t2.num = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Java中没有默认的复制构造, 不像C++</span></span><br><span class=\"line\">        System.out.println(t1.num);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        t1 = t3;</span><br><span class=\"line\">        t2 = t3;</span><br><span class=\"line\">        System.gc();  <span class=\"comment\">// 启用垃圾回收器, 当不能保证立即回收</span></span><br><span class=\"line\"><span class=\"comment\">//        Runtime rt = Runtime.getRuntime();        // 同上</span></span><br><span class=\"line\"><span class=\"comment\">//        rt.gc();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果希望及时回收对象, 可以调用System类的gc方法或Runtime类的gc方法.</p>\n<h2 id=\"包(package)\">包(package)<a title=\"#包(package)\" href=\"#包(package)\"></a></h2>\n<p>Java 语言使用包来组织类库，包 (package) 实际是一组相关类或接口的集合。<br>\n包是Java语言最大的封装单位，定义了程序对类的访问权限。</p>\n<p>如果在定义类时没有指定类属于哪个包，则该类属于默认包 (default package), 即当前目录。默认包中的类只能被该包中的类访问。为了有效地管理类，通常在定义类时指定类属于哪个包，这可通过 package 语句实现.</p>\n<p>如果一个类属于某个包，可以用类的完全限定名 (fully qualified name)来表示, 防止类名重复.</p>\n<p>Java5 版中，允许使用 import static语句导入类中的常量和静态方法，再使用这些类中的常量或方法就不用加类名前缀了</p>\n<p>使用java.lang 包和默认包(当前目录)中的类不需要使用 import语句将其导入，编译器会自动导入该包中的类.</p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>把能够返回成员变量值的方法称为访问方法 (accessor method), 把能够修改成员变量值的方法称为修改方法 (mutator method)。 访问方法名一般为 getxx(), 因此访问方法也称 getter方法。修改方法名一般为 setxx(), 修改方法也称setter方法</li>\n<li>函数执行时会创建一个活动记录(activation record), 它包括方法的参数、方法中声明的局部变量. 将其存储在栈中.</li>\n<li>一旦定义了有参构造, 编译器就不再提供默认构造. 习惯写上默认构造.</li>\n<li>this关键字可以调用该类的另一个构造方法 <code>this(value)</code>. 如果在构造方法中调用另一个构造方法，则 this语句必须是第一条语句.</li>\n<li>Java 语言规定，this只能用在非 static方法(实例方法和构造方法)中，不能用在 static方法中。实际上，在对象调用一个非 static方法时，向方法传递了一个引用，这个引用就是对象本身，在方法体中用 this表示。</li>\n<li>静态成员能直接通过类名调用<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">rnum</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">100</span> + <span class=\"number\">1</span>); <span class=\"comment\">// [1, 100]</span></span><br><span class=\"line\">     System.out.println(rnum);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>Java的作用域通过块(block)限定.</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n","prev":{"title":"[Navicat]","link":"2023/05/04/[Navicat]"},"next":{"title":"[C++笔记]泛型程序设计与STL","link":"2023/05/02/[C++笔记]泛型程序设计与STL"},"plink":"https://s1acr.github.io/2023/05/03/[Java笔记]类&对象/","toc":[{"id":"类的定义","title":"类的定义","index":"1"},{"id":"成员变量的定义","title":"成员变量的定义","index":"2"},{"id":"成员方法的定义","title":"成员方法的定义","index":"3"},{"id":"单例模式","title":"单例模式","index":"4"},{"id":"对象初始化值","title":"对象初始化值","index":"5"},{"id":"垃圾回收gc","title":"垃圾回收GC","index":"6"},{"id":"包(package)","title":"包(package)","index":"7"},{"id":"知识点","title":"知识点","index":"8"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"May 3, 2023","updated":"May 3, 2023"},"reading_time":"2127 words in 14 min"}