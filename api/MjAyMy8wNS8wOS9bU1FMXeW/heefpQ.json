{"title":"[SQL]必知","date":"2023-05-09T00:00:00.000Z","date_formatted":{"ll":"May 9, 2023","L":"05/09/2023","MM-DD":"05-09"},"link":"2023/05/09/[SQL]必知","comments":true,"categories":["数据库"],"updated":"2023-05-09T00:00:00.000Z","content":"<blockquote>\n<p>数据库实验要学SQL, 数据库用的是<code>MySQL Community Sever 8.0.32</code>, DBMS用的<code>Navicat Premium 15.0.1</code>, Navicat只能免费试用七天. 穷学生用的<a href=\"https://www.exception.site/essay/how-to-free-use-navicat\" target=\"_blank\">破解版</a>.</p>\n</blockquote>\n<h2 id=\"认识sql\">认识SQL<a title=\"#认识sql\" href=\"#认识sql\"></a></h2>\n<p>SQL(Structured Query Language) 一种专门用来与数据库沟通的语言. 标准 SQL 由 ANSI 标准委员会管理Matirx，从而称为 ANSI SQL。所有主要的 DBMS，即使有自己的扩展，也都支持 ANSI SQL。各个实现有自己的名称，如 Oracle 的 PL/SQL、微软 SQL Server 用的 Transact-SQL 等.</p>\n<h3 id=\"一些概念\">一些概念<a title=\"#一些概念\" href=\"#一些概念\"></a></h3>\n<p><code>数据库(databases)</code> 保存有组织的数据的容器.<br>\n<code>数据库管理系统(DBMS)</code> 创建和操纵的数据库的软件.<br>\n<code>表(table)</code> 某种特定类型数据的结构化清单。<br>\n<code>模式(schema)</code> 关于数据库和表的布局及特性的信息。<br>\n<code>列(column)</code>  表中的一个字段。所有表都是由一个或多个列组成的。<br>\n<code>数据类型(datatype)</code>  允许什么类型的数据。每个表列都有相应的数据类型，它限制(或允许)该列中存储的数据。<br>\n<code>行(row)</code> 表中的一个记录(record)。<br>\n<code>主键(primary key)</code> 一列(或几列),其值能够唯一标识表中每一行。</p>\n<p><code>子句(clause)</code> SQL语句由子句构成，有些子句是必需的，有些则是可选的。一个子句通常由一个关键字加上所提供的数据组成。<br>\n<code>通配符(wildcard)</code> 用来匹配值的一部分的特殊字符。<br>\n<code>搜索模式(search pattern)</code> 由字面值、通配符或两者组合构成的搜索条件。<br>\n<code>谓词(predicate)</code> 用于提供一种搜索模式或者说判断共同特征类别的条件.<br>\n<code>字段(field)</code> 基本上与列(column)的意思相同，经常互换使用，不过数据库列一般称为列，而字段这个术语通常在计算字段这种场合下使用。<br>\n<code>拼接(concatenate)</code> 将值联结到一起(将一个值附加到另一个值)构成单个值<br>\n<code>可移植(portable)</code> 所编写的代码可以在多个系统上运行。<br>\n<code>聚集函数(aggregate function)</code> 对某些行运行的函数，计算并返回一个值。<br>\n<code>查询(query)</code> 任何 SQL 语句都是查询。但此术语一般指 SELECT 语句。<br>\n<code>子查询(subquery)</code> 即嵌套在其他查询中的查询。<br>\n<code>可伸缩(scale) </code>能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序<br>\n称为可伸缩性好(scale well)。<br>\n<code>笛卡儿积(cartesian product)</code> 由没有联结条件的表关系返回的结果为笛卡儿积。有时，返回笛卡儿积的联结，也称叉联结(cross join)<br>\n<code>事务</code>(transaction)指一组 SQL 语句；<br>\n<code>回退</code>(rollback)指撤销指定 SQL 语句的过程；<br>\n<code>提交</code>(commit)指将未存储的 SQL 语句结果写入数据库表；<br>\n<code>保留点</code>(savepoint)指事务处理中设置的临时占位符(placeholder)，可以对它发布回退(与回退整个事务处理不同)。<br>\n<code>结果集(result set) </code>SQL 查询所检索出的结果。</p>\n<h3 id=\"sql-数据类型\">SQL 数据类型<a title=\"#sql-数据类型\" href=\"#sql-数据类型\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091502513.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091502582.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091502663.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091503676.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"检索数据\">检索数据<a title=\"#检索数据\" href=\"#检索数据\"></a></h2>\n<h3 id=\"注释\">注释<a title=\"#注释\" href=\"#注释\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  单行注释, 这种形式有些DBMS不支持</span><br><span class=\"line\"><span class=\"comment\">-- 单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"select-选择列\">SELECT 选择列<a title=\"#select-选择列\" href=\"#select-选择列\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 选择单个列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选择多个列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选择所有列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h3 id=\"distinct-限制不同数据\">DISTINCT 限制不同数据<a title=\"#distinct-限制不同数据\" href=\"#distinct-限制不同数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 返回列的所有数据, 有重复</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用DISTINC限制只返回不同的数据, 无重复</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- DISTINC 作用于所用选择的列, 返回只要存在不相同的数据 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>  vend_id, prod_price <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id, prod_price <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h3 id=\"limit-限制结果\">LIMIT 限制结果<a title=\"#limit-限制结果\" href=\"#limit-限制结果\"></a></h3>\n<p>返回指定行数的结果, 不同数据库的实现不一样.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 返回前三行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products LIMIT <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OFFSET 限制从第二行往后开始选择三行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products LIMIT <span class=\"number\">3</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 简化写法, 和上等同</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products LIMIT <span class=\"number\">2</span>,<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题\">挑战题<a title=\"#挑战题\" href=\"#挑战题\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Customers 表中检索所有的 ID(cust_id)。</li>\n<li>OrderItems 表包含了所有已订购的产品(有些已被订购多次)。编写SQL 语句，检索并列出已订购产品(prod_id)的清单(不用列每个订单，只列出不同产品的清单)。提示：最终应该显示 7 行。</li>\n<li>编写 SQL语句，检索 Customers 表中所有的列，再编写另外的 SELECT语句，仅检索顾客的 ID。使用注释，注释掉一条 SELECT 语句，以便运行另一条 SELECT 语句。(当然，要测试这两个语句。)</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> prod_id <span class=\"keyword\">FROM</span> orderitems; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"comment\">-- SELECT * FROM customers;</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> customers; </span><br></pre></td></tr></table></figure>\n<h2 id=\"排序检索数据\">排序检索数据<a title=\"#排序检索数据\" href=\"#排序检索数据\"></a></h2>\n<h3 id=\"order-by-子句\">ORDER BY 子句<a title=\"#order-by-子句\" href=\"#order-by-子句\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- ORDER BY 子句 按字典顺序从小到大</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 按多个列排序, 先按价格, 再按名称 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price, prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用列的相对位置, 2, 3 表示先按第二列, 再按第三列, 和上等同</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用 DESC (DESCENDING) 关键字 降序, 默认是 ASC (ASCENDING)升序, 可以不写</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 多个列排序, 价格降序, 名字升序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price <span class=\"keyword\">DESC</span>, prod_name <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n<p>在指定一条 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句。如果它不是最后的子句，将会出错。<br>\n通常，ORDER BY 子句中使用的列将是为显示而选择的列。但是, 实际上并不一定要这样，用非检索的列排序数据是完全法的.<br>\nDESC只作用于选择的一列, 多选得每一项都加上DESC关键字.</p>\n<h3 id=\"挑战题-1\">挑战题<a title=\"#挑战题-1\" href=\"#挑战题-1\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Customers 中检索所有的顾客名称(cust_names)，并按从 Z 到 A 的顺序显示结果。</li>\n<li>编写 SQL 语句，从 Orders 表中检索顾客 ID(cust_id)和订单号(order_num)，并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。</li>\n<li>显然，我们的虚拟商店更喜欢出售比较贵的物品，而且这类物品有很多。编写 SQL 语句，显示 OrderItems 表中的数量和价格(item_price)，并按数量由多到少、价格由高到低排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT vend_name,<br>\nFROM Vendors<br>\nORDER vend_name DESC;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, order_num, order_date <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_id, order_date <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_item, item_price <span class=\"keyword\">FROM</span> orderitems <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_item <span class=\"keyword\">DESC</span>, item_price <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. 没写BY</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"过滤数据\">过滤数据<a title=\"#过滤数据\" href=\"#过滤数据\"></a></h2>\n<p>数据库表一般包含大量的数据，很少需要检索表中的所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件(search criteria)，搜索条件也称为过滤条件(filter condition)。<br>\n在 SELECT 语句中，数据根据 WHERE 子句中指定的搜索条件进行过滤。</p>\n<h3 id=\"where-子句\">WHERE 子句<a title=\"#where-子句\" href=\"#where-子句\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305041559077.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>并非所有 DBMS 都支持这些操作符.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- WHERE子句</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">From</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">=</span> <span class=\"number\">3.49</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name , prod_price <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&lt;</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">!=</span> <span class=\"number\">3.49</span>;</span><br></pre></td></tr></table></figure>\n<p>在同时使用 ORDER BY 和 WHERE 子句时，应该让 ORDER BY 位于 WHERE 之后，否则将会产生错误.</p>\n<h3 id=\"between-and-范围值检查\">BETWEEN AND 范围值检查<a title=\"#between-and-范围值检查\" href=\"#between-and-范围值检查\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- BETWEEN AND 范围值检查</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"keyword\">BETWEEN</span> <span class=\"number\">5</span> <span class=\"keyword\">AND</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"is-null-空值检查\">IS NULL 空值检查<a title=\"#is-null-空值检查\" href=\"#is-null-空值检查\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- IS NULL 空值检查</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_email <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-2\">挑战题<a title=\"#挑战题-2\" href=\"#挑战题-2\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Products 表中检索产品 ID(prod_id)和产品名称(prod_name)，只返回价格为 9.49 美元的产品。</li>\n<li>编写 SQL 语句，从 Products 表中检索产品 ID(prod_id)和产品名称(prod_name)，只返回价格为 9 美元或更高的产品。</li>\n<li>结合第 3 课和第 4 课编写 SQL 语句，从 OrderItems 表中检索出所有不同订单号(order_num)，其中包含 100 个或更多的产品。</li>\n<li>编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称(prod_name)和价格(prod_price)，然后按价格对结果进行排序。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">=</span> <span class=\"number\">9.49</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"keyword\">BETWEEN</span> <span class=\"number\">3</span> <span class=\"keyword\">AND</span> <span class=\"number\">6</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"高级数据过滤\">高级数据过滤<a title=\"#高级数据过滤\" href=\"#高级数据过滤\"></a></h2>\n<h3 id=\"and-和-or-操作符\">AND 和 OR 操作符<a title=\"#and-和-or-操作符\" href=\"#and-和-or-操作符\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加多个过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">AND</span> prod_price <span class=\"operator\">&lt;=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 满足其中一个过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">OR</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BRS01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"in-操作符\">IN 操作符<a title=\"#in-操作符\" href=\"#in-操作符\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- IN 限定为值为数组内的数据, 也可以用OR实现</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;DLL01&#x27;</span>, <span class=\"string\">&#x27;BRS01&#x27;</span>) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br></pre></td></tr></table></figure>\n<p><code>IN对比OR的优势:</code></p>\n<ol>\n<li>在有很多合法选项时，IN 操作符的语法更清楚，更直观。</li>\n<li>在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理。</li>\n<li>IN 操作符一般比一组 OR 操作符执行得更快.</li>\n<li>IN 的最大优点是可以包含其他 SELECT 语句，能够更动态地建立WHERE 子句。</li>\n</ol>\n<h3 id=\"not-操作符\">NOT 操作符<a title=\"#not-操作符\" href=\"#not-操作符\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- NOT 否定条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">&lt;&gt;</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br></pre></td></tr></table></figure>\n<p>在复杂的子句中，NOT 是非常有用的。例如，在与 IN 操作符联合使用时，NOT 可以非常简单地找出与条件列表不匹配的行.</p>\n<h3 id=\"挑战题-3\">挑战题<a title=\"#挑战题-3\" href=\"#挑战题-3\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Vendors 表中检索供应商名称(vend_name)，仅返回加利福尼亚州的供应商(这需要按国家[USA]和州[CA]进行过滤，没准其他国家也存在一个加利福尼亚州)。提示：过滤器需要匹配字符串。</li>\n<li>编写 SQL 语句，查找所有至少订购了总量 100 个的 BR01、BR02 或BR03 的订单。你需要返回 OrderItems 表的订单号(order_num)、产品 ID(prod_id)和数量，并按产品 ID 和数量进行过滤。提示：根据编写过滤器的方式，可能需要特别注意求值顺序</li>\n<li>现在，我们回顾上一课的挑战题。编写 SQL 语句，返回所有价格在 3美元到 6美元之间的产品的名称(prod_name)和价格(prod_price)。使用 AND，然后按价格对结果进行排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT vend_name<br>\nFROM Vendors<br>\nORDER BY vend_name<br>\nWHERE vend_country = ‘USA’ AND vend_state = ‘CA’;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name <span class=\"keyword\">FROM</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_country <span class=\"operator\">=</span> <span class=\"string\">&#x27;USA&#x27;</span> <span class=\"keyword\">AND</span> vend_state <span class=\"operator\">=</span> <span class=\"string\">&#x27;CA&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, prod_id, quantity <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> quantity <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">AND</span> prod_id <span class=\"keyword\">IN</span>(<span class=\"string\">&#x27;BR01&#x27;</span>, <span class=\"string\">&#x27;BR02&#x27;</span>, <span class=\"string\">&#x27;BR03&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> <span class=\"number\">3</span> <span class=\"keyword\">AND</span> prod_price <span class=\"operator\">&lt;=</span> <span class=\"number\">6</span>  <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. ORDER BY 应该放子句最后</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用通配符进行过滤\">使用通配符进行过滤<a title=\"#使用通配符进行过滤\" href=\"#使用通配符进行过滤\"></a></h2>\n<h3 id=\"like-操作符\">LIKE 操作符<a title=\"#like-操作符\" href=\"#like-操作符\"></a></h3>\n<h4 id=\"%通配符\"><code>%</code>通配符<a title=\"#%通配符\" href=\"#%通配符\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- &#x27;%&#x27; 通配符表示任何字符出现任意次数,包括0次, 比如匹配Fish开头</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Fish%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 模式匹配中间为 特定字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%bean bag%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 模式匹配两端为 特定字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;F%y&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"_通配符\"><code>_</code>通配符<a title=\"#_通配符\" href=\"#_通配符\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- &#x27;_&#x27; 匹配单个字符, 多少个 &#x27;_&#x27; 就匹配多少个字符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;__ inch teddy bear&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SELECT cust_contact FROM customers</span></span><br><span class=\"line\"><span class=\"comment\">-- WHERE cust_contact LIKE &#x27;[^JM]%&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">-- MySql 不支持 &#x27;[]&#x27;集合匹配</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li>\n<li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li>\n<li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据.</li>\n</ol>\n<h3 id=\"挑战题-4\">挑战题<a title=\"#挑战题-4\" href=\"#挑战题-4\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回描述中包含 toy 一词的产品。</li>\n<li>反过来再来一次。编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回描述中未出现 toy 一词的产品。这次，按产品名称对结果进行排序。</li>\n<li>编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回描述中同时出现 toy 和 carrots 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 AND 和两个 LIKE 比较。</li>\n<li>来个比较棘手的。我没有特别向你展示这个语法，而是想看看你根据目前已学的知识是否可以找到答案。编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回在描述中以先后顺序同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 % 符号的 LIKE 即可。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> prod_desc <span class=\"keyword\">Like</span> <span class=\"string\">&#x27;%toy%&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%&#x27;</span> <span class=\"keyword\">AND</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%carrots%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- or</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%carrots%&#x27;</span> <span class=\"keyword\">OR</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%carrots%toy%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%carrots%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建计算字段\">创建计算字段<a title=\"#创建计算字段\" href=\"#创建计算字段\"></a></h2>\n<h3 id=\"拼接字段和别名\">拼接字段和别名<a title=\"#拼接字段和别名\" href=\"#拼接字段和别名\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- CONCAT 函数拼接字段, 不同数据库实现不同SQL Server使用+号。DB2、Oracle、PostgreSQL 和 SQLite 使用||</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(vend_name, <span class=\"string\">&#x27;(&#x27;</span>, vend_country, <span class=\"string\">&#x27;)&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vend_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- AS 指定别名(alias)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(vend_name, <span class=\"string\">&#x27;(&#x27;</span>, vend_country, <span class=\"string\">&#x27;)&#x27;</span>) <span class=\"keyword\">AS</span> vend_title</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vend_name;</span><br></pre></td></tr></table></figure>\n<p>别名的名字既可以是一个单词，也可以是一个字符串。<br>\n别名有时也称为导出列(derived column)。</p>\n<h3 id=\"算术计算\">算术计算<a title=\"#算术计算\" href=\"#算术计算\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 计算新列 quantity*item_price 并取别名 expanded_price</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity, item_price, quantity<span class=\"operator\">*</span>item_price <span class=\"keyword\">AS</span> expanded_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems <span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20008</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-检验计算\">SELECT 检验计算<a title=\"#select-检验计算\" href=\"#select-检验计算\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SELECT 语句 省略了 FORM 还可以仅访问和处理表达式</span></span><br><span class=\"line\"><span class=\"comment\">-- CURDATE() 函数返回日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURDATE();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- RTRIM TRIM LTRIM 函数能去除空格 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">TRIM</span>(<span class=\"string\">&#x27;   ab  c   &#x27;</span>);  <span class=\"comment\">--  &#x27;ab  c&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-5\">挑战题<a title=\"#挑战题-5\" href=\"#挑战题-5\"></a></h3>\n<ol>\n<li>别名的常见用法是在检索出的结果中重命名表的列字段(为了符合特定的报表要求或客户需求)。编写 SQL 语句，从 Vendors 表中检索vend_id、vend_name、vend_address 和 vend_city，将 vend_name重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address<br>\n重命名为 vaddress。按供应商名称对结果进行排序(可以使用原始名称或新的名称)。</li>\n<li>我们的示例商店正在进行打折促销，所有产品均降价 10%。编写 SQL语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%(即 10%的折扣)。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id <span class=\"keyword\">AS</span> vid, </span><br><span class=\"line\">vend_name <span class=\"keyword\">AS</span> vname, </span><br><span class=\"line\">vend_address <span class=\"keyword\">AS</span> vaddress, </span><br><span class=\"line\">vend_city <span class=\"keyword\">AS</span> vcity </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vname;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, </span><br><span class=\"line\">prod_price<span class=\"operator\">*</span><span class=\"number\">0.9</span> <span class=\"keyword\">AS</span> sale_price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用函数处理数据\">使用函数处理数据<a title=\"#使用函数处理数据\" href=\"#使用函数处理数据\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052030087.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>不同数据库提供的函数各有不同, 一条SQL并不是通用的, 使用时要注意.</p>\n<p>大多数 SQL 实现支持以下类型的函数:</p>\n<ol>\n<li>用于处理文本字符串(如删除或填充值，转换值为大写或小写)的文本函数。</li>\n<li>用于在数值数据上进行算术操作(如返回绝对值，进行代数运算)的数值函数。</li>\n<li>用于处理日期和时间值并从这些值中提取特定成分(如返回两个日期之差，检查日期有效性)的日期和时间函数。</li>\n<li>用于生成美观好懂的输出内容的格式化函数(如用语言形式表达出日期，用货币符号和千分位表示金额)。</li>\n<li>返回 DBMS 正使用的特殊信息(如返回用户登录信息)的系统函数</li>\n</ol>\n<h3 id=\"文本处理函数\">文本处理函数<a title=\"#文本处理函数\" href=\"#文本处理函数\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052131024.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>SOUNDEX 是一个将任何文<br>\n本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX 考虑了使得能对字符串进行发音比较而不是字母比较。虽然 SOUNDEX 不是 SQL 概念，但多数 DBMS 都提供对 SOUNDEX 的支持.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- UPPER() </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name, <span class=\"built_in\">UPPER</span>(vend_name) <span class=\"keyword\">AS</span> vend_name_upcase <span class=\"keyword\">FROM</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vend_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SOUNDEX(),  对发音进行匹配</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SOUNDEX(cust_contact) <span class=\"operator\">=</span> SOUNDEX(<span class=\"string\">&#x27;Michael Green&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SUBSTR(str FROM pos FOR len)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(SUBSTR(&quot;go000ogle&quot;, <span class=\"number\">1</span>, <span class=\"number\">2</span>), SUBSTR(&quot;go000ogle&quot;, <span class=\"number\">6</span>, <span class=\"number\">4</span>)) <span class=\"keyword\">AS</span> correct;</span><br><span class=\"line\"><span class=\"comment\">-- 这个函数下标从 1 开始左闭合取子串真的反常识, 第一次发现一门语言下标从1开始.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"日期时间处理\">日期时间处理<a title=\"#日期时间处理\" href=\"#日期时间处理\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 中用 YEAR() 从字符串中提取年份, 不难想到还有 MONTH() DAY()...</span></span><br><span class=\"line\"><span class=\"comment\">-- 不同数据库提供了非常多而全的函数, 用的时候直接查就行了</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, order_date <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">YEAR</span>(order_date) <span class=\"operator\">=</span> <span class=\"string\">&#x27;2020&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值处理函数\">数值处理函数<a title=\"#数值处理函数\" href=\"#数值处理函数\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052141132.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 计算squareroot, e^x</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SQRT</span>(<span class=\"number\">16</span>), <span class=\"built_in\">EXP</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-6\">挑战题<a title=\"#挑战题-6\" href=\"#挑战题-6\"></a></h3>\n<ol>\n<li>我们的商店已经上线了，正在创建顾客账户。所有用户都需要登录名，默认登录名是其名称和所在城市的组合。编写 SQL 语句，返回顾客 ID(cust_id)、顾客名称(customer_name)和登录名(user_login)，其中登录名全部为大写字母，并由顾客联系人的前两个字符(cust_<br>\ncontact)和其所在城市的前三个字符(cust_city)组成。例如，我的登录名是 BEOAK(Ben Forta，居住在 Oak Park)。提示：需要使用函数、拼接和别名。</li>\n<li>编写 SQL 语句，返回 2020 年 1 月的所有订单的订单号(order_num)和订单日期(order_date)，并按订单日期排序。你应该能够根据目前已学的知识来解决此问题，但也可以开卷查阅 DBMS 文档。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name, </span><br><span class=\"line\"><span class=\"built_in\">UPPER</span>(CONCAT(SUBSTR(cust_contact <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">2</span>), SUBSTR(cust_city <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">3</span>)))<span class=\"keyword\">AS</span> user_login  <span class=\"keyword\">FROM</span> customers; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- or</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name,</span><br><span class=\"line\">CONCAT(<span class=\"built_in\">UPPER</span>(<span class=\"keyword\">LEFT</span>(cust_contact, <span class=\"number\">2</span>)), <span class=\"built_in\">UPPER</span>(<span class=\"keyword\">LEFT</span>(cust_city, <span class=\"number\">3</span>))) <span class=\"keyword\">AS</span> user_login</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, order_date <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> <span class=\"keyword\">YEAR</span>(order_date) <span class=\"operator\">=</span> <span class=\"string\">&#x27;2020&#x27;</span> <span class=\"keyword\">AND</span> <span class=\"keyword\">MONTH</span>(order_date) <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br></pre></td></tr></table></figure>\n<h2 id=\"汇总数据\">汇总数据<a title=\"#汇总数据\" href=\"#汇总数据\"></a></h2>\n<h3 id=\"聚集函数\">聚集函数<a title=\"#聚集函数\" href=\"#聚集函数\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052236484.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"avg()\">AVG()<a title=\"#avg()\" href=\"#avg()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 对特定行求平均</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(prod_price) <span class=\"keyword\">AS</span> avg_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>AVG()函数忽略列值为 NULL 的行。<br>\n为了获得多个列的平均值，必须使用多个 AVG()函数。只有一个例外是要从多个列计算出一个值时.</p>\n<h4 id=\"count()\">COUNT()<a title=\"#count()\" href=\"#count()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- COUNT(*) 对表中行数计算, 不论是否值为 NULL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_cust <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 对指定列统计个数, 会忽略NULL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(cust_email) <span class=\"keyword\">AS</span> num_cust <span class=\"keyword\">FROM</span> customers;</span><br></pre></td></tr></table></figure>\n<h4 id=\"max()-min()\">MAX() MIN()<a title=\"#max()-min()\" href=\"#max()-min()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(prod_price) <span class=\"keyword\">AS</span> max_price <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MIN</span>(prod_price) <span class=\"keyword\">AS</span> min_price <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<p>MIN(), MAX()函数忽略列值为 NULL 的行。<br>\nMIN()/MAX()在用于文本数据时, 返回按该列排序后的第一/最后行。</p>\n<h4 id=\"sum()\">SUM()<a title=\"#sum()\" href=\"#sum()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">AS</span> item_ordered <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20005</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20005</span>;</span><br></pre></td></tr></table></figure>\n<p>SUM()函数忽略列值为 NULL 的行。</p>\n<h3 id=\"聚集不同的值\">聚集不同的值<a title=\"#聚集不同的值\" href=\"#聚集不同的值\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(<span class=\"keyword\">DISTINCT</span> prod_price) <span class=\"keyword\">AS</span> avg_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>ALL 参数不需要指定，因为它是默认行为。如果不指定 DISTINCT，则假定为 ALL.<br>\nDISTINCT 只能指定列名用于 COUNT(), 不能用于 COUNT(*)。DISTINCT 必须使用列名，不能用于计算或表达式。<br>\n有的 DBMS 还支持其他参数，如支持对查询结果的子集进行计算的 TOP 和 TOP PERCENT。</p>\n<h3 id=\"组合聚集函数\">组合聚集函数<a title=\"#组合聚集函数\" href=\"#组合聚集函数\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_items,</span><br><span class=\"line\"><span class=\"built_in\">MIN</span>(prod_price) <span class=\"keyword\">AS</span> price_min,</span><br><span class=\"line\"><span class=\"built_in\">MAX</span>(prod_price) <span class=\"keyword\">AS</span> price_max,</span><br><span class=\"line\"><span class=\"built_in\">AVG</span>(prod_price) <span class=\"keyword\">AS</span> price_avg <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<p>在指定别名以包含某个聚集函数的结果时，不应该使用表中实际的列名。虽然这样做也算合法，但许多 SQL 实现不支持，可能会产生模糊的错误消息。</p>\n<h3 id=\"挑战题-7\">挑战题<a title=\"#挑战题-7\" href=\"#挑战题-7\"></a></h3>\n<ol>\n<li>编写 SQL 语句，确定已售出产品的总数(使用 OrderItems 中的quantity 列)。</li>\n<li>修改刚刚创建的语句，确定已售出产品项(prod_item)BR01 的总数。</li>\n<li>编写 SQL 语句，确定 Products 表中价格不超过 10 美元的最贵产品的价格(prod_price)。将计算所得的字段命名为 max_price。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">AS</span> total_quantity <span class=\"keyword\">FROM</span> orderitems;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(order_item) <span class=\"keyword\">AS</span> total_item_BRO1 <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(prod_price) <span class=\"keyword\">AS</span> max_price <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&lt;=</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分组数据\">分组数据<a title=\"#分组数据\" href=\"#分组数据\"></a></h2>\n<h3 id=\"创建分组\">创建分组<a title=\"#创建分组\" href=\"#创建分组\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  GROUP BY 子句分组 对每个组数据进行聚集</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_prods <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vend_id;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组</li>\n<li>如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进行汇总。</li>\n<li>GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式(但不能是聚集函数)。如果SELECT 中使用表达式，则必须在 GROUP BY子句中指定相同的表达式。不能使用别名。</li>\n<li>大多数 SQL 实现不允许 GROUP BY 列带有长度可变的数据类型(如文本或备注型字段)。</li>\n<li>除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出。</li>\n<li>如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回。如果列中有多行 NULL 值，它们将分为一组。</li>\n<li>GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前。</li>\n</ol>\n<h3 id=\"过滤分组\">过滤分组<a title=\"#过滤分组\" href=\"#过滤分组\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- HVAING 过滤分组</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> orders <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_id <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 先用WHERE过滤行, 再用HAVING 过滤分组</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_prods <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vend_id <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;=</span> <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>WHERE过滤行，而 HAVING 过滤分组。</li>\n<li>有关 WHERE 的所有技术和选项都适用于 HAVING.</li>\n<li>有另一种理解方法，WHERE 在数据分组前进行过滤，HAVING 在数据分组后进行过滤。WHERE 排除的行不包括在分组中。这可能会改变计算值，从而影响 HAVING 子句中基于这些值过滤掉的分组.</li>\n</ol>\n<h3 id=\"分组和排序\">分组和排序<a title=\"#分组和排序\" href=\"#分组和排序\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> items <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> items, order_num;</span><br></pre></td></tr></table></figure>\n<h4 id=\"select-子句顺序\">SELECT 子句顺序<a title=\"#select-子句顺序\" href=\"#select-子句顺序\"></a></h4>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305061303455.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"挑战题-8\">挑战题<a title=\"#挑战题-8\" href=\"#挑战题-8\"></a></h3>\n<ol>\n<li>OrderItems 表包含每个订单的每个产品。编写 SQL 语句，返回每个订单号(order_num)各有多少行数(order_lines)，并按 order_lines对结果进行排序。</li>\n<li>编写 SQL 语句，返回名为 cheapest_item 的字段，该字段包含每个供应商成本最低的产品(使用 Products 表中的 prod_price)，然后从最低成本到最高成本对结果进行排序。</li>\n<li>确定最佳顾客非常重要，请编写 SQL 语句，返回至少含 100 项的所有<br>\n订单的订单号(OrderItems 表中的 order_num)。</li>\n<li>确定最佳顾客的另一种方式是看他们花了多少钱。编写 SQL 语句，返回总价至少为 1000 的所有订单的订单号(OrderItems 表中的order_num)。提示：需要计算总和(item_price 乘以 quantity)。按订单号对结果进行排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT order_num, COUNT(<em>) AS items<br>\nFROM OrderItems<br>\nGROUP BY items<br>\nHAVING COUNT(</em>) &gt;= 3<br>\nORDER BY items, order_num;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> order_lines <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_lines;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, <span class=\"built_in\">MIN</span>(prod_price) <span class=\"keyword\">AS</span> cheapest_item <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vend_id <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cheapest_item <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">AS</span> total_quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">HAVING</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">HAVING</span> total_price <span class=\"operator\">&gt;=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"comment\">-- GROUP BY clause must constains all nonaggregated column </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5. </span></span><br><span class=\"line\"><span class=\"comment\">-- GROUP BY clause must constains all nonaggregated column </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用子查询\">使用子查询<a title=\"#使用子查询\" href=\"#使用子查询\"></a></h2>\n<h3 id=\"子查询过滤\">子查询过滤<a title=\"#子查询过滤\" href=\"#子查询过滤\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span> </span><br><span class=\"line\">\t)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>作为子查询的 SELECT 语句只能查询单个列。企图检索多个列将返回错误。<br>\n使用子查询并不总是执行这类数据检索的最有效方法.</p>\n<h3 id=\"作为计算字段使用子查询\">作为计算字段使用子查询<a title=\"#作为计算字段使用子查询\" href=\"#作为计算字段使用子查询\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_state, </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orders.cust_id <span class=\"operator\">=</span> customers.cust_id) <span class=\"keyword\">AS</span> orders <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- orders 是一个计算字段，它是由圆括号中的子查询建立的。该子查询对检索出的每个顾客执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">-- WHERE子句 比较Orders表中的cust_id和当前正从Customers表中检索的cust_id</span></span><br></pre></td></tr></table></figure>\n<p>SELECT 语句中操作多个表，就应使用完全限定列名来避免歧义。</p>\n<h3 id=\"挑战题-9\">挑战题<a title=\"#挑战题-9\" href=\"#挑战题-9\"></a></h3>\n<ol>\n<li>使用子查询，返回购买价格为 10 美元或以上产品的顾客列表。你需要使用 OrderItems 表查找匹配的订单号(order_num)，然后使用Order 表检索这些匹配订单的顾客 ID(cust_id)。</li>\n<li>你想知道订购 BR01 产品的日期。编写 SQL 语句，使用子查询来确定哪些订单(在 OrderItems 中)购买了 prod_id 为 BR01 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID(cust_id)和订单日期(order_date)。按订购日期对结果进行排序。</li>\n<li>现在我们让它更具挑战性。在上一个挑战题，返回购买 prod_id 为BR01 的产品的所有顾客的电子邮件(Customers 表中的 cust_email)。提示：这涉及 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id。</li>\n<li>我们需要一个顾客 ID 列表，其中包含他们已订购的总金额。编写 SQL语句，返回顾客 ID(Orders 表中的 cust_id)，并使用子查询返回total_ordered 以便返回每个顾客的订单总数。将结果按金额从大到小排序。提示：你之前已经使用 SUM()计算订单总数。</li>\n<li>再来。编写 SQL 语句，从 Products 表中检索所有的产品名称(prod_name)，以及名为 quant_sold 的计算列，其中包含所售产品的总数(在 OrderItems 表上使用子查询和 SUM(quantity)检索)。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span></span><br><span class=\"line\">\t(<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> item_price <span class=\"operator\">&gt;=</span> <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, order_date <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span></span><br><span class=\"line\"><span class=\"comment\">-- 在orderitem中拿到&#x27;BR01&#x27;的 order_num</span></span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_email <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"keyword\">IN</span>( </span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id,</span><br><span class=\"line\">       (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity <span class=\"operator\">*</span> item_price)</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> OrderItems</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> order_num</span><br><span class=\"line\">                            <span class=\"keyword\">FROM</span> Orders</span><br><span class=\"line\">                            <span class=\"keyword\">WHERE</span> Orders.cust_id <span class=\"operator\">=</span> Customers.cust_id)) <span class=\"keyword\">AS</span> total_ordered</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> total_ordered <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 5.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orderitems.prod_id <span class=\"operator\">=</span> products.prod_id</span><br><span class=\"line\">) <span class=\"keyword\">AS</span> quant_sold </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h2 id=\"联结表\">联结表<a title=\"#联结表\" href=\"#联结表\"></a></h2>\n<h3 id=\"创建联结\">创建联结<a title=\"#创建联结\" href=\"#创建联结\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name, prod_name, prod_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors, products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vendors.vend_id <span class=\"operator\">=</span> products.vend_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 直接这么写会得到笛卡尔积, WHERE 子句是查找过程中的过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors, products;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内联结\">内联结<a title=\"#内联结\" href=\"#内联结\"></a></h3>\n<p>等值联结(equijoin)，基于两个表之间的相等测试。这种联结也称为内联结(inner join)。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name, prod_name, prod_price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> products <span class=\"keyword\">ON</span> vendors.vend_id <span class=\"operator\">=</span> products.vend_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 与上面的WHERE建立联结效果相同, ANSI SQL 规范首选 INNER JOIN 语法.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"联结多个表\">联结多个表<a title=\"#联结多个表\" href=\"#联结多个表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, vend_name, prod_price, quantity </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems, products, vendors</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> products.vend_id <span class=\"operator\">=</span> vendors.vend_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> orderitems.prod_id <span class=\"operator\">=</span> products.prod_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 子查询和联结比较</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers, orders, orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-10\">挑战题<a title=\"#挑战题-10\" href=\"#挑战题-10\"></a></h3>\n<ol>\n<li>编写 SQL 语句，返回 Customers 表中的顾客名称(cust_name)和Orders 表中的相关订单号(order_num)，并 按顾客名称再按订单号对结果进行排序。实际上是尝试两次，一次使用简单的等联结语法，一次使用 INNER JOIN。</li>\n<li>我们来让上一题变得更有用些。除了返回顾客名称和订单号，添加第三列 OrderTotal，其中包含每个订单的总价。有两种方法可以执行此操作：使用 OrderItems 表的子查询来创建 OrderTotal 列，或者将 OrderItems 表与现有表联结并使用聚合函数。提示：请注意需要使用完全限定列名的地方。</li>\n<li>我们重新看一下第 11 课的挑战题 2。编写 SQL 语句，检索订购产品BR01 的日期，这一次使用联结和简单的等联结语法。输出应该与第11 课的输出相同。</li>\n<li>很有趣，我们再试一次。重新创建为第 11 课挑战题 3 编写的 SQL 语句，这次使用 ANSI 的 INNER JOIN 语法。在之前编写的代码中使用了两个嵌套的子查询。要重新创建它，需要两个 INNER JOIN 语句，每个语句的格式类似于本课讲到的 INNER JOIN 示例，而且不要忘记WHERE 子句可以通过 prod_id 进行过滤。</li>\n<li>再让事情变得更加有趣些，我们将混合使用联结、聚合函数和分组。准备好了吗？回到第 10 课，当时的挑战是要求查找值等于或大于 1000的所有订单号。这些结果很有用，但更有用的是订单数量至少达到这个数的顾客名称。因此，编写 SQL 语句，使用联结从 Customers表返回顾客名称(cust_name)，并从 OrderItems 表返回所有订单的总价。<br>\n提示：要联结这些表，还需要包括 Orders 表(因为 Customers 表与 OrderItems 表不直接相关，Customers 表与 Orders 表相关，而Orders 表与 OrderItems 表相关)。不要忘记 GROUP BY 和 HAVING，并按顾客名称对结果进行排序。你可以使用简单的等联结或 ANSI 的INNER JOIN 语法。或者，如果你很勇敢，请尝试使用两种方式编写。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num <span class=\"keyword\">FROM</span> customers, orders</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num,  </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity<span class=\"operator\">*</span>item_price) <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> order_total <span class=\"keyword\">FROM</span> customers, orders</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 时不我待</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, orders.order_num, <span class=\"built_in\">SUM</span>(quantity<span class=\"operator\">*</span>item_price) <span class=\"keyword\">AS</span> order_total </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders, orderitems, customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id </span><br><span class=\"line\"><span class=\"keyword\">AND</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, orders.order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这里的 GROUP BY 中 cust_name 其实可以不加</span></span><br><span class=\"line\"><span class=\"comment\">-- 可以这么理解:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- a. 先进行笛卡尔积</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders, orderitems, customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id </span><br><span class=\"line\"><span class=\"keyword\">AND</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"comment\">-- b. 执行 WHERE 子句的过滤联结条件</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id </span><br><span class=\"line\"><span class=\"keyword\">AND</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"comment\">-- c. 然后按cust_name 和 order_num 分组, 不分先后 由于order_num是结果中的主键, 按这种分组方式可映射多个 cust_name, 所以cust_name可有可无</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name, orders.order_num</span><br><span class=\"line\"><span class=\"comment\">-- d. 返回选择的行, SUM()函数负责计算每个分组中的值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, orders.order_num, <span class=\"built_in\">SUM</span>(quantity<span class=\"operator\">*</span>item_price) <span class=\"keyword\">AS</span> order_total </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_date, cust_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders, orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_date, cust_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">ON</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br><span class=\"line\"><span class=\"comment\">-- 有点意思</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, cust_email </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> orders.cust_id <span class=\"operator\">=</span> customers.cust_id</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orderitems <span class=\"keyword\">ON</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> customers <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name <span class=\"keyword\">HAVING</span> <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"operator\">&gt;=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems, orders, customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num </span><br><span class=\"line\"><span class=\"keyword\">AND</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name <span class=\"keyword\">HAVING</span> <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"operator\">&gt;=</span> <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建高级联结\">创建高级联结<a title=\"#创建高级联结\" href=\"#创建高级联结\"></a></h2>\n<h3 id=\"使用表别名\">使用表别名<a title=\"#使用表别名\" href=\"#使用表别名\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact</span><br><span class=\"line\"><span class=\"comment\">-- 给表起 别名 AS, ORACLE的DB中可以不加AS</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> C, orders <span class=\"keyword\">AS</span> O, orderitems <span class=\"keyword\">AS</span> OI</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C.cust_id <span class=\"operator\">=</span> O.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> OI.order_num <span class=\"operator\">=</span> O.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>SQL 除了可以对列名和计算字段使用别名，还允许给表名起别名。这样做有两个主要理由：</p>\n<ol>\n<li>缩短 SQL 语句；</li>\n<li>允许在一条 SELECT 语句中多次使用相同的表。</li>\n<li>表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户端。</li>\n</ol>\n<h3 id=\"使用不同类型的联结\">使用不同类型的联结<a title=\"#使用不同类型的联结\" href=\"#使用不同类型的联结\"></a></h3>\n<h4 id=\"自联结(self-join)\">自联结(self-join)<a title=\"#自联结(self-join)\" href=\"#自联结(self-join)\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 使用自联结</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> c1, customers <span class=\"keyword\">AS</span> c2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> c1.cust_name <span class=\"operator\">=</span> c2.cust_name</span><br><span class=\"line\"><span class=\"keyword\">AND</span> c2.cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;Jim Jones&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OR 使用标准的内联结自联结</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> c1 </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> customers <span class=\"keyword\">AS</span> c2 <span class=\"keyword\">ON</span> c1.cust_name <span class=\"operator\">=</span> c2.cust_name</span><br><span class=\"line\"><span class=\"keyword\">AND</span> c2.cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;Jim Jones&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 相同效果子查询, 在一张表中, 查找 cust_contact为某值的cust_name, 再由cust_name查找对应的信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name, cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;Jim Jones&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自然联结(natural-join)\">自然联结(natural join)<a title=\"#自然联结(natural-join)\" href=\"#自然联结(natural-join)\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> C.<span class=\"operator\">*</span>, O.order_num, O.order_date, OI.prod_id, OI.quantity, OI.item_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> C, orders <span class=\"keyword\">AS</span> O, orderitems <span class=\"keyword\">AS</span> OI</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C.cust_id <span class=\"operator\">=</span> O.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> OI.order_num <span class=\"operator\">=</span> O.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 等同于使用 JOIN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.<span class=\"operator\">*</span>, orders.order_num, orders.order_date, orderitems.prod_id,orderitems.quantity, orderitems.item_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> orderitems <span class=\"keyword\">ON</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>自然联结返回结果只存在一个主键.<br>\n无论何时对表进行联结，应该至少有一列不止出现在一个表中.标准的联结返回所有数据，相同的列甚至多次出现。自然联结排除多次出现，使每一列只返回一次。<br>\n自然联结要求你只能选择那些唯一的列，一般通过对一个表使用通配符(SELECT *)，而对其他表的列使用明确的子集来完成。</p>\n<h4 id=\"外联结(outer-join)\">外联结(outer join)<a title=\"#外联结(outer-join)\" href=\"#外联结(outer-join)\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 外连接, LEFT/RIGHT 指定包括其所有行的表</span></span><br><span class=\"line\"><span class=\"comment\">-- 比如这里的 LEFT 指定的就是保留左边的表 customers</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 上面等同于</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> customers <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 可以比较下区别, 就算左边没有匹配条件的行也会保留, 右表的值置NULL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num, customers.cust_id, orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers, orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> customers.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br></pre></td></tr></table></figure>\n<p>联结包含了那些在相关表中没有关联行的行。这种联结称为外联结.<br>\n左外联结和右外联结能相互转换.</p>\n<h3 id=\"使用带聚集函数的联结\">使用带聚集函数的联结<a title=\"#使用带聚集函数的联结\" href=\"#使用带聚集函数的联结\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, <span class=\"built_in\">COUNT</span>(orders.order_num) <span class=\"keyword\">AS</span> num_ord</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> customers.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, <span class=\"built_in\">COUNT</span>(orders.order_num) <span class=\"keyword\">AS</span> num_ord</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> customers.cust_id;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用联结和联结条件\">使用联结和联结条件<a title=\"#使用联结和联结条件\" href=\"#使用联结和联结条件\"></a></h3>\n<ol>\n<li>注意所使用的联结类型。一般我们使用内联结，但使用外联结也有效。</li>\n<li>关于确切的联结语法，应该查看具体的文档，看相应的 DBMS 支持何种语法.</li>\n<li>保证使用正确的联结条件(不管采用哪种语法)，否则会返回不正确的数据。</li>\n<li>应该总是提供联结条件，否则会得出笛卡儿积。</li>\n<li>在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前分别测试每个联结。这会使故障排除更为简单。</li>\n</ol>\n<h3 id=\"挑战题-11\">挑战题<a title=\"#挑战题-11\" href=\"#挑战题-11\"></a></h3>\n<ol>\n<li>使用 INNER JOIN 编写 SQL语句，以检索每个顾客的名称(Customers表中的 cust_name)和所有的订单号(Orders 表中的 order_num)</li>\n<li>修改刚刚创建的 SQL 语句，仅列出所有顾客，即使他们没有下过订单。</li>\n<li>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称(prod_name)和与之相关的订单号(order_num)的列表，并按商品名称排序。</li>\n<li>修改上一题中创建的 SQL 语句，使其返回每一项产品的总订单数(不是订单号)。</li>\n<li>编写 SQL语句，列出供应商(Vendors 表中的 vend_id)及其可供产品的数量，包括没有产品的供应商。你需要使用 OUTER JOIN 和 COUNT()聚合函数来计算 Products 表中每种产品的数量。注意：vend_id 列会显示在多个表中，因此在每次引用它时都需要完全限定它</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders </span><br><span class=\"line\"><span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orders </span><br><span class=\"line\"><span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, order_num </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">ON</span> products.prod_id <span class=\"operator\">=</span> orderitems.prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, <span class=\"built_in\">COUNT</span>(order_num) <span class=\"keyword\">AS</span> orders </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">ON</span> products.prod_id <span class=\"operator\">=</span> orderitems.prod_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> prod_name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vendors.vend_id, <span class=\"built_in\">COUNT</span>(prod_id)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> products </span><br><span class=\"line\"><span class=\"keyword\">ON</span> products.vend_id <span class=\"operator\">=</span> vendors.vend_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vendors.vend_id;</span><br></pre></td></tr></table></figure>\n<h2 id=\"组合查询\">组合查询<a title=\"#组合查询\" href=\"#组合查询\"></a></h2>\n<p>多数 SQL 查询只包含从一个或多个表中返回数据的单条 SELECT 语句。但是，SQL 也允许执行多个查询(多条 SELECT 语句)，并将结果作为一个查询结果集返回。这些组合查询通常称为并(union)或复合查询(compound query)。<br>\n主要有两种情况需要使用组合查询：</p>\n<ol>\n<li>在一个查询中从不同的表返回结构数据；</li>\n<li>对一个表执行多个查询，按一个查询返回数据。</li>\n<li>任何具有多个WHERE 子句的 SELECT 语句都可以作为一个组合查询.</li>\n</ol>\n<h3 id=\"创建组合查询\">创建组合查询<a title=\"#创建组合查询\" href=\"#创建组合查询\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- UNION 将两条SELECT的查询结果合并成一条</span></span><br><span class=\"line\"><span class=\"comment\">-- 等同于多个条件的 WHERE, 性能可能分情况有差别 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_state <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;IL&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"string\">&#x27;MI&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Fun4ALL&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- UNION ALL 不取消重复行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_state <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;IL&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"string\">&#x27;MI&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>UNION 必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔</li>\n<li>UNION 从查询结果集中自动去除了重复的行, 行为与一条 SELECT 语句中使用多个 WHERE 子句一样.</li>\n<li>如果确实需要每个条件的匹配行全部出现(包括重复行)，就必须使用 UNION ALL，而不是 WHERE。</li>\n<li>UNION 中的每个查询必须包含相同的列、表达式或聚集函数(不过，各个列不需要以相同的次序列出)</li>\n<li>列数据类型必须兼容：类型不必完全相同，但必须是 DBMS 可以隐含转换的类型(例如，不同的数值类型或不同的日期类型)</li>\n<li>如果结合 UNION 使用的 SELECT 语句遇到不同的列名, 会返回第一个名字.</li>\n</ol>\n<h3 id=\"对组合查询结果排序\">对组合查询结果排序<a title=\"#对组合查询结果排序\" href=\"#对组合查询结果排序\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 组合查询只允许一条 ORDER BY, 放最后排序整个结果集</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_state <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;IL&#x27;</span>,<span class=\"string\">&#x27;IN&#x27;</span>,<span class=\"string\">&#x27;MI&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Fun4All&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, cust_contact;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-12\">挑战题<a title=\"#挑战题-12\" href=\"#挑战题-12\"></a></h3>\n<ol>\n<li>编写 SQL 语句，将两个 SELECT 语句结合起来，以便从 OrderItems表中检索产品 ID(prod_id)和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 ID 以 BNBG 开头的产品。按产品 ID 对结果进行排序。</li>\n<li>重写刚刚创建的 SQL 语句，仅使用单个 SELECT 语句。</li>\n<li>我知道这有点荒谬，但这节课中的一个注释提到过。编写 SQL 语句，组合 Products 表中的产品名称(prod_name)和 Customers 表中的顾客名称(cust_name)并返回，然后按产品名称对结果进行排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT cust_name, cust_contact, cust_email<br>\nFROM Customers<br>\nWHERE cust_state = ‘MI’<br>\nORDER BY cust_name;<br>\nUNION<br>\nSELECT cust_name, cust_contact, cust_email<br>\nFROM Customers<br>\nWHERE cust_state = 'IL’ORDER BY cust_name;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> quantity <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;BNBG%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> quantity <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;BNBG%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"><span class=\"comment\">-- that&#x27;s nonsensial indeed, cust_name list in the list of prod_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. ORDER BY 只能存在一个放在最后 </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"插入数据\">插入数据<a title=\"#插入数据\" href=\"#插入数据\"></a></h2>\n<p>INSERT 用来将行插入(或添加)到数据库表。插入有几种方式：</p>\n<ol>\n<li>插入完整的行</li>\n<li>插入行的一部分</li>\n<li>插入某些查询的结果</li>\n</ol>\n<p>使用 INSERT 语句可能需要客户端/服务器 DBMS 中的特定安全权限.</p>\n<h3 id=\"插入完整的行\">插入完整的行<a title=\"#插入完整的行\" href=\"#插入完整的行\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入一行, VALUES数组按模式顺序填充</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"number\">1000000006</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;Slacr Land&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;Fuck Street&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;NY&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;11111&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;USB&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t  <span class=\"keyword\">NULL</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"><span class=\"comment\">-- 更安全的方法, 给出明确的列名, 次序可以变更\t\t\t</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers(cust_name,</span><br><span class=\"line\">\t\t\t\t\t cust_id,</span><br><span class=\"line\">\t\t\t\t\t cust_address,</span><br><span class=\"line\">\t\t\t\t\t cust_city,</span><br><span class=\"line\">\t\t\t\t\t cust_state,</span><br><span class=\"line\">\t\t\t\t\t cust_zip,</span><br><span class=\"line\">\t\t\t\t\t cust_country,</span><br><span class=\"line\">\t\t\t\t\t cust_contact,</span><br><span class=\"line\">\t\t\t\t\t cust_email)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;Slacr Land&#x27;</span>,</span><br><span class=\"line\">       <span class=\"number\">1000000006</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;Fuck Street&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;NY&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;11111&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;USA&#x27;</span>,</span><br><span class=\"line\">       <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">       <span class=\"keyword\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>编写依赖于特定列次序的 SQL 语句很不安全, 不能保证各列在下一次表结构变动后保持完全相同的次序</p>\n<h3 id=\"插入部分行\">插入部分行<a title=\"#插入部分行\" href=\"#插入部分行\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Customers(cust_id,</span><br><span class=\"line\">\t\t\t\t\t  cust_name,</span><br><span class=\"line\">\t\t\t\t\t  cust_address,</span><br><span class=\"line\">\t\t\t\t\t  cust_city,</span><br><span class=\"line\">\t\t\t\t\t  cust_state,</span><br><span class=\"line\">\t\t\t\t\t  cust_zip,</span><br><span class=\"line\">\t\t\t\t\t  cust_country)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"number\">1000000006</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;Toy Land&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;123 Any Street&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;NY&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;11111&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>可以在 INSERT 操作中省略某些列。省略的列必须满足以下某个条件。</p>\n<ol>\n<li>该列定义为允许 NULL 值(无值或空值)。</li>\n<li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li>\n</ol>\n<h3 id=\"插入检索出的数据\">插入检索出的数据<a title=\"#插入检索出的数据\" href=\"#插入检索出的数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">-- 选择插入, 从 cust_new 表中选择数据插入customer表</span></span><br><span class=\"line\"> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers(cust_id,</span><br><span class=\"line\">                       cust_contact,</span><br><span class=\"line\">                       cust_email,</span><br><span class=\"line\">                       cust_name,</span><br><span class=\"line\">                       cust_address,</span><br><span class=\"line\">                       cust_city,</span><br><span class=\"line\">                       cust_state,</span><br><span class=\"line\">                       cust_zip,</span><br><span class=\"line\">                       cust_country)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id,</span><br><span class=\"line\">       cust_contact,</span><br><span class=\"line\">       cust_email,</span><br><span class=\"line\">       cust_name,</span><br><span class=\"line\">       cust_address,</span><br><span class=\"line\">       cust_city,</span><br><span class=\"line\">       cust_state,</span><br><span class=\"line\">       cust_zip,</span><br><span class=\"line\">       cust_country</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> cust_new;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>列名不一定要相同.</li>\n<li>INSERT SELECT 中 SELECT 语句可以包含 WHERE 子句，以过滤插入的数据。</li>\n<li>INSERT SELECT是个例外，它可以用一条INSERT插入多行.</li>\n</ol>\n<h3 id=\"从一个表复制到另一个表\">从一个表复制到另一个表<a title=\"#从一个表复制到另一个表\" href=\"#从一个表复制到另一个表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建新表, 用原有表的数据, 可以使用更多条件的SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> cust_copy <span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SQL SERVER</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">INTO</span> CustCopy <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-13\">挑战题<a title=\"#挑战题-13\" href=\"#挑战题-13\"></a></h3>\n<ol>\n<li>使用 INSERT 和指定的列，将你自己添加到 Customers 表中。明确列出要添加哪几列，且仅需列出你需要的列。</li>\n<li>备份 Orders 表和 OrderItems 表.</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers(cust_name,</span><br><span class=\"line\">\t\t\t\t\t  cust_id,</span><br><span class=\"line\">\t\t\t\t\t  cust_address,</span><br><span class=\"line\">\t\t\t\t\t  cust_city,</span><br><span class=\"line\">\t\t\t\t\t  cust_state,</span><br><span class=\"line\">\t\t\t\t\t  cust_zip,</span><br><span class=\"line\">\t\t\t\t\t  cust_country,</span><br><span class=\"line\">\t\t\t\t\t  cust_contact,</span><br><span class=\"line\">\t\t\t\t\t  cust_email)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;slacr&#x27;</span>,</span><br><span class=\"line\">\t   <span class=\"string\">&#x27;001&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;CY&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;CQ&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;NAN&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;1024&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;CN&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;hacr&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;xxx&#x27;</span>);</span><br><span class=\"line\">\t\t\t \t\t\t </span><br><span class=\"line\"> <span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> backup_orders <span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> backup_orderitems <span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orderitems;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新和删除数据\">更新和删除数据<a title=\"#更新和删除数据\" href=\"#更新和删除数据\"></a></h2>\n<h3 id=\"更新数据\">更新数据<a title=\"#更新数据\" href=\"#更新数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> customers </span><br><span class=\"line\"><span class=\"keyword\">SET</span> cust_email <span class=\"operator\">=</span> <span class=\"string\">&#x27;shit@shool.edu&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000005</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 更新多个列</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> customers </span><br><span class=\"line\"><span class=\"keyword\">SET</span> cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;slacr&#x27;</span>,</span><br><span class=\"line\">\tcust_email <span class=\"operator\">=</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000006</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除数据\">删除数据<a title=\"#删除数据\" href=\"#删除数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除指定条目</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;slacr&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 省略 WHERE 子句会删除所有</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>DELETE 语句从表中删除行，甚至是删除表中所有行。但是，DELETE不删除表本身。</li>\n<li>如果想从表中删除所有行，不要使用 DELETE。可使用 TRUNCATE TABLE语句，它完成相同的工作，而速度更快(因为不记录数据的变动)</li>\n</ol>\n<p>下面是许多 SQL 程序员使用 UPDATE 或 DELETE 时所遵循的重要原则:</p>\n<ol>\n<li>除非确实打算更新和删除每一行，否则绝对不要使用不带 WHERE 子句的 UPDATE 或 DELETE 语句。</li>\n<li>保证每个表都有主键，尽可能像 WHERE 子句那样使用它(可以指定各主键、多个值或值的范围)。</li>\n<li>在 UPDATE 或 DELETE 语句使用 WHERE 子句前，应该先用 SELECT 进行测试，保证它过滤的是正确的记录，以防编写的 WHERE 子句不正确。</li>\n<li>使用强制实施引用完整性的数据库, 这样 DBMS 将不允许删除其数据与其他表相关联的行。</li>\n<li>有的 DBMS 允许数据库管理员施加约束，防止执行不带 WHERE 子句的 UPDATE 或 DELETE 语句。如果所采用的 DBMS 支持这个特性，应该使用它。</li>\n</ol>\n<h3 id=\"挑战题-14\">挑战题<a title=\"#挑战题-14\" href=\"#挑战题-14\"></a></h3>\n<ol>\n<li>美国各州的缩写应始终用大写。编写 SQL语句来更新所有美国地址，包括供应商状态(Vendors 表中的 vend_state)和顾客状态(Customers表中的 cust_state)，使它们均为大写。</li>\n<li>第 15 课的挑战题 1 要求你将自己添加到 Customers 表中。现在请删除自己。确保使用 WHERE 子句(在 DELETE 中使用它之前，先用 SELECT对其进行测试)，否则你会删除所有顾客！</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> customers </span><br><span class=\"line\"><span class=\"keyword\">SET</span> cust_state <span class=\"operator\">=</span> <span class=\"built_in\">UPPER</span>(cust_state);</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">SET</span> vend_state <span class=\"operator\">=</span> <span class=\"built_in\">UPPER</span>(vend_state);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers <span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000006</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000006</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建和操纵表\">创建和操纵表<a title=\"#创建和操纵表\" href=\"#创建和操纵表\"></a></h2>\n<h3 id=\"创建表\">创建表<a title=\"#创建表\" href=\"#创建表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products</span><br><span class=\"line\">(</span><br><span class=\"line\">\tprod_id\t\t<span class=\"type\">CHAR</span>(<span class=\"number\">10</span>)\t\t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tvend_id   \t<span class=\"type\">CHAR</span>(<span class=\"number\">10</span>)\t\t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tprod_name \t<span class=\"type\">CHAR</span>(<span class=\"number\">254</span>)\t\t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tprod_price \t<span class=\"type\">DECIMAL</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>) \t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>\t<span class=\"keyword\">DEFAULT</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">\tprod_desc  \t<span class=\"type\">VARCHAR</span>(<span class=\"number\">1000</span>)\t<span class=\"keyword\">NULL</span></span><br><span class=\"line\">\t<span class=\"comment\">-- NULL 可以不写为默认值, 设置了NOT NULL 限定的列不可为空, 插入时也必须给值</span></span><br><span class=\"line\">\t<span class=\"comment\">-- DEFAULT 设置默认值</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用 DBMS 创建表实际上是 程序帮你自动执行 SQL.<br>\nNULL 值是没有值，不是空字符串。<br>\nprimary key 一定 NOT NULL</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305072106417.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>日期或时间戳通常使用系统值, 可以调用函数给出默认值 <code>DEFAULT CURRENT_DATE()</code>.</p>\n<h3 id=\"更新表\">更新表<a title=\"#更新表\" href=\"#更新表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> vend_phone <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure>\n<p>使用 ALTER TABLE 时需要考虑:</p>\n<ol>\n<li>理想情况下，不要在表中包含数据时对其进行更新。应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结构做大改动。</li>\n<li>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型(以及 NULL 和 DEFAULT 的使用)有所限制。</li>\n<li>许多 DBMS 不允许删除或更改表中的列。</li>\n<li>多数 DBMS 允许重新命名表中的列。</li>\n<li>许多 DBMS 限制对已经填有数据的列进行更改，对未填有数据的列几乎没有限制</li>\n</ol>\n<p>复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：</p>\n<ol>\n<li>用新的列布局创建一个新表；</li>\n<li>使用 INSERT SELECT 语句从旧表复制数据到新表。有必要的话，可以使用转换函数和计算字段；</li>\n<li>检验包含所需数据的新表；</li>\n<li>重命名旧表(如果确定，可以删除它);</li>\n<li>用旧表原来的名字重命名新表；</li>\n<li>根据需要，重新创建触发器、存储过程、索引和外键。</li>\n</ol>\n<h3 id=\"删除表\">删除表<a title=\"#删除表\" href=\"#删除表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> cust_copy;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名表\">重命名表<a title=\"#重命名表\" href=\"#重命名表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> backup_orders RENAME copy_orders;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-15\">挑战题<a title=\"#挑战题-15\" href=\"#挑战题-15\"></a></h3>\n<ol>\n<li>在 Vendors 表中添加一个网站列(vend_web)。你需要一个足以容纳 URL 的大文本字段。</li>\n<li>使用 UPDATE 语句更新 Vendor 记录，以便加入网站(你可以编造任何地址)。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> vend_web <span class=\"type\">VARCHAR</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">SET</span> vend_web <span class=\"operator\">=</span> <span class=\"string\">&#x27;www.slacr.site&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_country <span class=\"operator\">=</span> <span class=\"string\">&#x27;USA&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用视图\">使用视图<a title=\"#使用视图\" href=\"#使用视图\"></a></h2>\n<p>视图是<code>虚拟的表</code>。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p>\n<p>为什么使用视图:</p>\n<ol>\n<li>重用 SQL 语句。</li>\n<li>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道其基本查询细节。</li>\n<li>使用表的一部分而不是整个表。</li>\n<li>保护数据。可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</li>\n<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>\n</ol>\n<p>创建视图之后，可以用与表基本相同的方式使用它们。可以对视图执行SELECT 操作，过滤和排序数据，将视图联结到其他视图或表，甚至添加和更新数据.<br>\n视图仅仅是用来查看存储在别处数据的一种设施。视图本身不包含数据，因此返回的数据是从其他表中检索出来的。</p>\n<p>视图创建和使用的一些最常见的规则和限制:</p>\n<ol>\n<li>与表一样，视图必须唯一命名(不能给视图取与别的视图或表相同的名字)。</li>\n<li>对于可以创建的视图数目没有限制。</li>\n<li>创建视图，必须具有足够的访问权限。这些权限通常由数据库管理人员授予。</li>\n<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造视图。所允许的嵌套层数在不同的 DBMS中有所不同(嵌套视图可能会严重降低查询的性能，因此在产品环境中使用之前，应该对其进行全面测试).</li>\n<li>许多 DBMS 禁止在视图查询中使用 ORDER BY 子句。</li>\n<li>有些 DBMS 要求对返回的所有列进行命名，如果列是计算字段，则需要使用别名</li>\n<li>视图不能索引，也不能有关联的触发器或默认值。</li>\n<li>有些 DBMS 把视图作为只读的查询，这表示可以从视图检索数据，但不能将数据写回底层表。详情请参阅具体的 DBMS 文档</li>\n</ol>\n<h3 id=\"创建使用视图\">创建使用视图<a title=\"#创建使用视图\" href=\"#创建使用视图\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 利用视图简化复杂联结</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> prod_cust </span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers, orders, orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除视图</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> prod_cust;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 对视图检索</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> prod_cust</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用视图重新格式化选择出来的数据</span></span><br><span class=\"line\"><span class=\"comment\">-- 在SELECT前面补上CREATE VIEW 语句就行了</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> vendor_locations <span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(vend_name, <span class=\"string\">&#x27;  [ &#x27;</span>, vend_country, <span class=\"string\">&#x27; ]&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> vend_title</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用视图过滤不想要的数据</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> cust_email_list <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_email <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> cust_email_list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用视图与计算字段</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> order_items_expanded <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity, item_price, quantity<span class=\"operator\">*</span>item_price </span><br><span class=\"line\"><span class=\"keyword\">AS</span> expanded_price <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20008</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> order_items_expanded;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-16\">挑战题<a title=\"#挑战题-16\" href=\"#挑战题-16\"></a></h3>\n<ol>\n<li>创建一个名为 CustomersWithOrders 的视图，其中包含 Customers表中的所有列，但仅仅是那些已下订单的列。提示：可以在 Orders表上使用 JOIN 来仅仅过滤所需的顾客，然后使用 SELECT 来确保拥<br>\n有正确的数据。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nCREATE VIEW OrderItemsExpanded AS<br>\nSELECT order_num,<br>\nprod_id,<br>\nquantity,<br>\nitem_price,<br>\nquantity*item_price AS expanded_price<br>\nFROM OrderItems<br>\nORDER BY order_num;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> cust_with_orders <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> cust_with_orders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. MYSQL中没问题, 但有些数据库创建VIEW不能加ORDER BY字段, 可以创建后再检索视图</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"存储过程和函数\">存储过程和函数<a title=\"#存储过程和函数\" href=\"#存储过程和函数\"></a></h2>\n<p>存储过程就是为以后使用而保存的一条或多条 SQL 语句, store routine。可将其视为批文件，虽然它们的作用不仅限于批处理。</p>\n<p>为什么要使用存储过程:</p>\n<ol>\n<li>通过把处理封装在一个易用的单元中，可以简化复杂的操作</li>\n<li>由于不要求反复建立一系列处理步骤，因而保证了数据的一致性。如果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都是相同的。</li>\n<li>上一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性</li>\n<li>简化对变动的管理。如果表名、列名或业务逻辑(或别的内容)有变化，那么只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化</li>\n<li>上一点的延伸就是安全性。通过存储过程限制对基础数据的访问，减少了数据讹误(无意识的或别的原因所导致的数据讹误)的机会。</li>\n<li>因为存储过程通常以编译过的形式存储，所以 DBMS 处理命令所需的工作量少，提高了性能。</li>\n<li>存在一些只能用在单个请求中的 SQL 元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。</li>\n</ol>\n<p>不同DB实现的语法相差很大, MySQL参见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html\" target=\"_blank\">link</a></p>\n<h3 id=\"存储过程\">存储过程<a title=\"#存储过程\" href=\"#存储过程\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> HighPriceProd(<span class=\"keyword\">IN</span> price <span class=\"type\">DECIMAL</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> prod_id, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> price</span><br><span class=\"line\">\t<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> HighPriceProd;</span><br><span class=\"line\"><span class=\"comment\">-- 调用</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> HighPriceProd(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> SetPrice(<span class=\"keyword\">IN</span> pid <span class=\"type\">CHAR</span>(<span class=\"number\">10</span>), <span class=\"keyword\">IN</span> price <span class=\"type\">DECIMAL</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">\t<span class=\"keyword\">UPDATE</span> products</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> prod_price <span class=\"operator\">=</span> price <span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> pid;</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> prod_id, prod_price <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> SetPrice;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> SetPrice(<span class=\"string\">&#x27;BR01&#x27;</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 利用 @ 标识全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"variable\">@price</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>, <span class=\"variable\">@pid</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> SetPrice(<span class=\"variable\">@pid</span>, <span class=\"variable\">@price</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OUT 输出参数</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> outTest(<span class=\"keyword\">OUT</span> test <span class=\"type\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> test;</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> test <span class=\"operator\">=</span> <span class=\"number\">99</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> test;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"variable\">@test</span> <span class=\"operator\">=</span> <span class=\"number\">111</span>;  </span><br><span class=\"line\"><span class=\"keyword\">CALL</span> outTest(<span class=\"variable\">@test</span>);   <span class=\"comment\">-- NULL, 不接受参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"variable\">@test</span>; <span class=\"comment\">-- 99, 调用存储过程</span></span><br></pre></td></tr></table></figure>\n<p>IN 输入参数：表示调用者向过程传入值(传入值可以是字面量或变量)<br>\nOUT 输出参数：表示过程向调用者传出值(可以返回多个值)(传出值只能是变量)<br>\nINOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值(值只能是变量)</p>\n<h3 id=\"存储函数\">存储函数<a title=\"#存储函数\" href=\"#存储函数\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建存储函数</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> hello (s <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>)) <span class=\"keyword\">RETURNS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">50</span>) </span><br><span class=\"line\"><span class=\"keyword\">DETERMINISTIC</span></span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> CONCAT(<span class=\"string\">&#x27;Hello,&#x27;</span>, s, <span class=\"string\">&#x27;!&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> hello(<span class=\"string\">&#x27;world&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> hello;</span><br></pre></td></tr></table></figure>\n<h2 id=\"管理事务处理(transaction-processing)\">管理事务处理(transaction processing)<a title=\"#管理事务处理(transaction-processing)\" href=\"#管理事务处理(transaction-processing)\"></a></h2>\n<p>使用事务处理(transaction processing)，通过确保成批的 SQL 操作要么完全执行，要么完全不执行，来维护数据库的完整性。</p>\n<p>事务处理是一种机制，用来管理必须成批执行的 SQL 操作，保证数据库不包含不完整的操作结果。利用事务处理，可以保证一组操作不会中途停止，它们要么完全执行，要么完全不执行(除非明确指示)。如果没有错误发生，整组语句提交给(写到)数据库表；如果发生错误，则进行回退(撤销)，将数据库恢复到某个已知且安全的状态。</p>\n<p>事务处理用来管理 INSERT、UPDATE 和 DELETE 语句。不能回退 SELECT, CREATE 或 DROP 操作。事务处理中可以使用这些语句，但进行回退时，这些操作也不撤销。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> orders <span class=\"keyword\">VALUES</span>( <span class=\"number\">200010</span>, <span class=\"string\">&#x27;2023-02-08 00:00:00&#x27;</span>, <span class=\"string\">&#x27;1000000001&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> del_1;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">200010</span>;</span><br><span class=\"line\"><span class=\"comment\">-- ROLLBACK;  -- ROLLBACK可以撤销上一句SQL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> orders <span class=\"keyword\">VALUES</span>( <span class=\"number\">200111</span>, <span class=\"string\">&#x27;2023-02-10 00:00:00&#x27;</span>, <span class=\"string\">&#x27;1000000001&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> del_1;   <span class=\"comment\">-- 回退到保存点</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 只有COMMIT结束 才会完成整个TRANSACTION, 默认自动COMMIT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- By default, MySQL runs with autocommit mode enabled. </span></span><br><span class=\"line\"><span class=\"comment\">-- SET autocommit = &#123;0|1&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用游标\">使用游标<a title=\"#使用游标\" href=\"#使用游标\"></a></h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> test()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> str <span class=\"type\">CHAR</span>(<span class=\"number\">50</span>); </span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> name_cursor <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">OPEN</span> name_cursor;</span><br><span class=\"line\"></span><br><span class=\"line\">    read_loop: LOOP </span><br><span class=\"line\">        <span class=\"keyword\">FETCH</span> name_cursor <span class=\"keyword\">INTO</span> str;</span><br><span class=\"line\">        IF str <span class=\"keyword\">LIKE</span> &quot;%T%&quot; <span class=\"keyword\">THEN</span></span><br><span class=\"line\">            LEAVE read_loop;</span><br><span class=\"line\">        <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">CLOSE</span> name_cursor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers <span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> str;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> test();</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在使用游标前，必须声明(定义)它。这个过程实际上没有检索数据，它只是定义要使用的 SELECT 语句和游标选项。</li>\n<li>一旦声明，就必须打开游标以供使用。这个过程用前面定义的 SELECT语句把数据实际检索出来。</li>\n<li>对于填有数据的游标，根据需要取出(检索)各行。</li>\n<li>在结束游标使用时，必须关闭游标，可能的话，释放游标(有赖于具体的 DBMS)</li>\n</ol>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>SQL不区分大小写, 但是表名、列名和值可能有所不同(这有赖于具体的 DBMS 及其如何配置)。</li>\n<li>并非所有数据库的SQL实现都一样, 基本语句往往向通.</li>\n<li>SQL忽略换行, 可以一条语句分多段, 分号结尾.</li>\n<li>SQL 语句一般返回原始的、无格式的数据，不同的 DBMS 和客户端显示数据的方式略有不同(如对齐格式不同、小数位数不同)。数据的格式化是表示问题，而不是检索问题。因此，如何表示一般会在显示该数据的应用程序中规定。通常很少直接使用实际检索出的数据(没有应用程序提供的格式)。</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《SQL必知必会 第五版》 Ben Forta IBSN 9787115539168</li>\n<li><a href=\"https://livesql.oracle.com/apex/f?p=590:1000\" target=\"_blank\">Oracle Live SQL</a></li>\n<li><a href=\"https://forta.com/books/0135182794/challenges/\" target=\"_blank\">教材答案</a></li>\n<li><a href=\"https://www.mysqlzh.com/doc/223.html\" target=\"_blank\">MySql中文文档</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html\" target=\"_blank\">MySql官方文档</a></li>\n<li><a href=\"https://www.runoob.com/w3cnote/mysql-stored-procedure.html\" target=\"_blank\">菜鸟教程-存储过程</a></li>\n<li><a href=\"https://www.yiibai.com/mysql/stored-function.html\" target=\"_blank\">MySQL存储函数</a></li>\n</ol>\n","prev":{"title":"[PicGo]Failedwitherrorcode500","link":"2023/05/09/[PicGo]Failedwitherrorcode500"},"next":{"title":"[Navicat]","link":"2023/05/04/[Navicat]"},"plink":"https://s1acr.github.io/2023/05/09/[SQL]必知/","toc":[{"id":"认识sql","title":"认识SQL","index":"1","children":[{"id":"一些概念","title":"一些概念","index":"1.1"},{"id":"sql-数据类型","title":"SQL 数据类型","index":"1.2"}]},{"id":"检索数据","title":"检索数据","index":"2","children":[{"id":"注释","title":"注释","index":"2.1"},{"id":"select-选择列","title":"SELECT 选择列","index":"2.2"},{"id":"distinct-限制不同数据","title":"DISTINCT 限制不同数据","index":"2.3"},{"id":"limit-限制结果","title":"LIMIT 限制结果","index":"2.4"},{"id":"挑战题","title":"挑战题","index":"2.5"}]},{"id":"排序检索数据","title":"排序检索数据","index":"3","children":[{"id":"order-by-子句","title":"ORDER BY 子句","index":"3.1"},{"id":"挑战题-1","title":"挑战题","index":"3.2"}]},{"id":"过滤数据","title":"过滤数据","index":"4","children":[{"id":"where-子句","title":"WHERE 子句","index":"4.1"},{"id":"between-and-范围值检查","title":"BETWEEN AND 范围值检查","index":"4.2"},{"id":"is-null-空值检查","title":"IS NULL 空值检查","index":"4.3"},{"id":"挑战题-2","title":"挑战题","index":"4.4"}]},{"id":"高级数据过滤","title":"高级数据过滤","index":"5","children":[{"id":"and-和-or-操作符","title":"AND 和 OR 操作符","index":"5.1"},{"id":"in-操作符","title":"IN 操作符","index":"5.2"},{"id":"not-操作符","title":"NOT 操作符","index":"5.3"},{"id":"挑战题-3","title":"挑战题","index":"5.4"}]},{"id":"使用通配符进行过滤","title":"使用通配符进行过滤","index":"6","children":[{"id":"like-操作符","title":"LIKE 操作符","index":"6.1","children":[{"id":"%通配符","title":"%通配符","index":"6.1.1"},{"id":"_通配符","title":"_通配符","index":"6.1.2"}]},{"id":"挑战题-4","title":"挑战题","index":"6.2"}]},{"id":"创建计算字段","title":"创建计算字段","index":"7","children":[{"id":"拼接字段和别名","title":"拼接字段和别名","index":"7.1"},{"id":"算术计算","title":"算术计算","index":"7.2"},{"id":"select-检验计算","title":"SELECT 检验计算","index":"7.3"},{"id":"挑战题-5","title":"挑战题","index":"7.4"}]},{"id":"使用函数处理数据","title":"使用函数处理数据","index":"8","children":[{"id":"文本处理函数","title":"文本处理函数","index":"8.1"},{"id":"日期时间处理","title":"日期时间处理","index":"8.2"},{"id":"数值处理函数","title":"数值处理函数","index":"8.3"},{"id":"挑战题-6","title":"挑战题","index":"8.4"}]},{"id":"汇总数据","title":"汇总数据","index":"9","children":[{"id":"聚集函数","title":"聚集函数","index":"9.1","children":[{"id":"avg()","title":"AVG()","index":"9.1.1"},{"id":"count()","title":"COUNT()","index":"9.1.2"},{"id":"max()-min()","title":"MAX() MIN()","index":"9.1.3"},{"id":"sum()","title":"SUM()","index":"9.1.4"}]},{"id":"聚集不同的值","title":"聚集不同的值","index":"9.2"},{"id":"组合聚集函数","title":"组合聚集函数","index":"9.3"},{"id":"挑战题-7","title":"挑战题","index":"9.4"}]},{"id":"分组数据","title":"分组数据","index":"10","children":[{"id":"创建分组","title":"创建分组","index":"10.1"},{"id":"过滤分组","title":"过滤分组","index":"10.2"},{"id":"分组和排序","title":"分组和排序","index":"10.3","children":[{"id":"select-子句顺序","title":"SELECT 子句顺序","index":"10.3.1"}]},{"id":"挑战题-8","title":"挑战题","index":"10.4"}]},{"id":"使用子查询","title":"使用子查询","index":"11","children":[{"id":"子查询过滤","title":"子查询过滤","index":"11.1"},{"id":"作为计算字段使用子查询","title":"作为计算字段使用子查询","index":"11.2"},{"id":"挑战题-9","title":"挑战题","index":"11.3"}]},{"id":"联结表","title":"联结表","index":"12","children":[{"id":"创建联结","title":"创建联结","index":"12.1"},{"id":"内联结","title":"内联结","index":"12.2"},{"id":"联结多个表","title":"联结多个表","index":"12.3"},{"id":"挑战题-10","title":"挑战题","index":"12.4"}]},{"id":"创建高级联结","title":"创建高级联结","index":"13","children":[{"id":"使用表别名","title":"使用表别名","index":"13.1"},{"id":"使用不同类型的联结","title":"使用不同类型的联结","index":"13.2","children":[{"id":"自联结(self-join)","title":"自联结(self-join)","index":"13.2.1"},{"id":"自然联结(natural-join)","title":"自然联结(natural join)","index":"13.2.2"},{"id":"外联结(outer-join)","title":"外联结(outer join)","index":"13.2.3"}]},{"id":"使用带聚集函数的联结","title":"使用带聚集函数的联结","index":"13.3"},{"id":"使用联结和联结条件","title":"使用联结和联结条件","index":"13.4"},{"id":"挑战题-11","title":"挑战题","index":"13.5"}]},{"id":"组合查询","title":"组合查询","index":"14","children":[{"id":"创建组合查询","title":"创建组合查询","index":"14.1"},{"id":"对组合查询结果排序","title":"对组合查询结果排序","index":"14.2"},{"id":"挑战题-12","title":"挑战题","index":"14.3"}]},{"id":"插入数据","title":"插入数据","index":"15","children":[{"id":"插入完整的行","title":"插入完整的行","index":"15.1"},{"id":"插入部分行","title":"插入部分行","index":"15.2"},{"id":"插入检索出的数据","title":"插入检索出的数据","index":"15.3"},{"id":"从一个表复制到另一个表","title":"从一个表复制到另一个表","index":"15.4"},{"id":"挑战题-13","title":"挑战题","index":"15.5"}]},{"id":"更新和删除数据","title":"更新和删除数据","index":"16","children":[{"id":"更新数据","title":"更新数据","index":"16.1"},{"id":"删除数据","title":"删除数据","index":"16.2"},{"id":"挑战题-14","title":"挑战题","index":"16.3"}]},{"id":"创建和操纵表","title":"创建和操纵表","index":"17","children":[{"id":"创建表","title":"创建表","index":"17.1"},{"id":"更新表","title":"更新表","index":"17.2"},{"id":"删除表","title":"删除表","index":"17.3"},{"id":"重命名表","title":"重命名表","index":"17.4"},{"id":"挑战题-15","title":"挑战题","index":"17.5"}]},{"id":"使用视图","title":"使用视图","index":"18","children":[{"id":"创建使用视图","title":"创建使用视图","index":"18.1"},{"id":"挑战题-16","title":"挑战题","index":"18.2"}]},{"id":"存储过程和函数","title":"存储过程和函数","index":"19","children":[{"id":"存储过程","title":"存储过程","index":"19.1"},{"id":"存储函数","title":"存储函数","index":"19.2"}]},{"id":"管理事务处理(transaction-processing)","title":"管理事务处理(transaction processing)","index":"20"},{"id":"使用游标","title":"使用游标","index":"21"},{"id":"知识点","title":"知识点","index":"22"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"May 9, 2023","updated":"May 9, 2023"},"reading_time":"14429 words in 96 min"}