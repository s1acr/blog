{"title":"[算法设计与分析基础]复习","date":"2023-06-19T00:00:00.000Z","date_formatted":{"ll":"Jun 19, 2023","L":"06/19/2023","MM-DD":"06-19"},"link":"2023/06/19/[算法设计与分析基础]复习","comments":true,"categories":["Algorithm"],"updated":"2023-06-19T00:00:00.000Z","content":"<blockquote>\n<p>万恶的考试周, 大学就是考试了才开始学. 应试不就是多记几个题型和知识点, 决胜2天.</p>\n</blockquote>\n<h2 id=\"绪论&amp;算法效率分析\">绪论&amp;算法效率分析<a title=\"#绪论&amp;算法效率分析\" href=\"#绪论&amp;算法效率分析\"></a></h2>\n<h3 id=\"算法概念\">算法概念<a title=\"#算法概念\" href=\"#算法概念\"></a></h3>\n<p>一系列指令的集合, 这些指令所构成的逻辑能在利用有限的计算资源(时间空间复杂度)完成某种或某类计算. 算法就是解决问题的步骤与方法, 是严格符合推理逻辑的.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171613116.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"算法的特性\">算法的特性<a title=\"#算法的特性\" href=\"#算法的特性\"></a></h3>\n<ul>\n<li><code>输入输出, 有穷性和确定性</code></li>\n<li><code>正确性</code>: 对于任意合法输入, 经过有限时间的计算能得到输出.</li>\n<li><code>效率</code>:\n<ul>\n<li>时间效率: 反应运行速度</li>\n<li>空间效率: 反应运行时间</li>\n</ul>\n</li>\n<li><code>简单性</code>: 相对容易理解和实现</li>\n<li><code>一般性</code>: 所解决问题的一般性和所接受输入的一般性, 建立更通用的算法.</li>\n<li><code>最优性</code></li>\n</ul>\n<h3 id=\"重要的问题类型\">重要的问题类型<a title=\"#重要的问题类型\" href=\"#重要的问题类型\"></a></h3>\n<ul>\n<li>排序</li>\n<li>查找</li>\n<li>字符串处理</li>\n<li>图问题</li>\n<li>组合问题</li>\n<li>几何问题</li>\n<li>数值问题</li>\n</ul>\n<h3 id=\"欧几里得算法求最大公约数gcd(greatest-common-divisor)\">欧几里得算法求最大公约数GCD(Greatest Common Divisor)<a title=\"#欧几里得算法求最大公约数gcd(greatest-common-divisor)\" href=\"#欧几里得算法求最大公约数gcd(greatest-common-divisor)\"></a></h3>\n<p><code>gcd(m,n)=gcd(n,m mod n)</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">GCD</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">\t\tr = a % b; </span><br><span class=\"line\">\t\ta = b;</span><br><span class=\"line\">\t\tb = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">nest_GCD</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!b) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> r = a % b;</span><br><span class=\"line\">\t<span class=\"built_in\">nest_GCD</span>(b, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">GCD</span>(<span class=\"number\">54</span>, <span class=\"number\">36</span>) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// a\tb\tr</span></span><br><span class=\"line\">\t<span class=\"comment\">// 54\t36\tundef</span></span><br><span class=\"line\">\t<span class=\"comment\">// 36\t18\t18</span></span><br><span class=\"line\">\t<span class=\"comment\">// 18\t0\t0</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">nest_GCD</span>(<span class=\"number\">108</span>, <span class=\"number\">162</span>) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本数据结构\">基本数据结构<a title=\"#基本数据结构\" href=\"#基本数据结构\"></a></h3>\n<ul>\n<li>线性数据结构\n<ul>\n<li>线性列表\n<ul>\n<li>数组</li>\n<li>链表\n<ul>\n<li>单链表</li>\n<li>双链表</li>\n</ul>\n</li>\n<li>队列\n<ul>\n<li>优先队列</li>\n</ul>\n</li>\n<li>栈</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>图\n<ul>\n<li>表示 G&lt;V, E&gt;, V- vertex, 顶点集合, E -edge, 边集合, 每个元素是一对定点, 称为边.</li>\n<li>顶点对(u, v)相互<code>邻接</code>, 通过无向边(u, v)相<code>连接</code>, u v 称为端点, u 和 v 和该边相<code>关联</code></li>\n<li>完全图: 各顶点都和其他顶点相连, K_|v|</li>\n<li>稠密图和稀疏图: 相对于完全图缺的边数量较少为稠密, 反之稀疏.</li>\n<li><code>图的表示法</code>\n<ul>\n<li>邻接矩阵\n<ul>\n<li>n*n的布尔矩阵, 每个值表示第i个顶点到第j个顶点是否有边连接.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171658827.png\" alt=\"\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>邻接链表\n<ul>\n<li>每一个顶点用一个邻接链表表示, 表头为每个顶点, 每个链表其余的为和这个顶点相邻接的所有顶点. 对于一个给定的顶点, 它的邻接链表指出了对应邻接矩阵中值为1的列.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171707495.png\" alt=\"\" loading=\"lazy\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>加权图\n<ul>\n<li>给边赋了值的图<br>\n对应的邻接矩阵称权重矩阵或成本矩阵, 不存在相邻边, 权重取 infinite<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171709321.png\" alt=\"\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>路径, 环, 连通分量, 联通度</li>\n</ul>\n</li>\n<li>树(自由树)\n<ul>\n<li>连通无回路的图, 无回路不一定连通的图称为<code>森林</code>, 它的每个连通分量是一棵树.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171719491.png\" alt=\"\" loading=\"lazy\"></li>\n<li>树的边数比定点数少1, |E| = |V| - 1</li>\n<li>有根树\n<ul>\n<li>任选一个顶点, 作为根.</li>\n</ul>\n</li>\n<li>树的<code>深度</code>: 顶点v的深度为根到v的简单路径的长度.</li>\n<li>树的<code>高度</code>: 根到叶子结点最常的简单路径长度.</li>\n<li>有序树\n<ul>\n<li>每个顶点的子女皆是有序的.</li>\n<li>二叉查找树</li>\n<li>多路查找树</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>集合与字典\n<ul>\n<li>互不相同项的无序组合.</li>\n<li>集合的表示方法\n<ul>\n<li>第一种, 表示通用集合的大集合U的子集, U中元素个数n,  可以采取<code>位向量</code>的表示法, 用一个长度为n的位串, 子集中存在U中该位元素就置1.</li>\n<li>第二种, 用线性列表表示, 不过列表式有序且可包含重复元素的, 可以用多重集或包的概念, 绕过唯一性要求.</li>\n</ul>\n</li>\n<li>字典: 能实现对集合或多重集查找, 增加, 删除一个元素操作的数据结构称为字典.</li>\n</ul>\n</li>\n<li>抽象数据类型(ADT), 定义数据项的抽象对象集合和对集合中对象的操作.描述数据结构和对应操作的一个概念.</li>\n</ul>\n<h3 id=\"算法效率分析\">算法效率分析<a title=\"#算法效率分析\" href=\"#算法效率分析\"></a></h3>\n<p>输入规模: 将算法效率表示为一个以输入规模 n 为参数的函数.<br>\n基本操作: 最重要的操作, 对时间贡献最大, 元运算.<br>\n算法程序的运行时间估算:<br>\nMATHJAX-SSR-0<br>\nT(n)为总运行时间,<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.518ex\" height=\"2.843ex\" style=\"vertical-align: -1.005ex;\" viewBox=\"0 -791.3 1514.8 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">C_{op}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-43\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(715,-150)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6F\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-70\" x=\"485\" y=\"0\"></use>\n</g>\n</g>\n</svg>为一次基本操作执行时间, C(n)为基本操作执行次数, n为输入规模.</p>\n<p>增长次数:<br>\n随输入规模n的增大, C(n)为不同函数类型会很大程度决定效率, 一个指数级操作次数的算法随输入规模n的执行次数增长非常快, 有限计算资源下只能计算较小的输入规模.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171759825.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"算法最优-最差-平均效率\">算法最优 最差 平均效率<a title=\"#算法最优-最差-平均效率\" href=\"#算法最优-最差-平均效率\"></a></h3>\n<p>字面意思, 最优效率即输入规模为n时, 算法在最好的情况下(执行次数最少)的效率. 平局效率的评估较为复杂, 必须做出一定假设.<br>\n比如顺序查找算法, 最优执行次数1, 一次就找到; 最差n, 无此元素; 平均需要考虑待查元素在此集合中的概率p, 该元素在每一位的概率1/n, 平均次数: (1-p)*n + p(1/n + 2/n + … + n/n)</p>\n<h3 id=\"渐进符号\">渐进符号<a title=\"#渐进符号\" href=\"#渐进符号\"></a></h3>\n<p><code>O(g(n))</code>为算法的增长次数小于等于g(n)及其常数倍的<code>集合</code>, 增长次数上界.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171920846.png\" alt=\"\" loading=\"lazy\"><br>\n<code>Ω(g(n))</code>同理, 增长次数小于等于g(n)及其常数倍. 增长次数的下界. 如果一个算法的效率类型属于Ω(g(n)), 那么这个算法的增长次数一定是比g(n)高阶或者等阶的.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171926249.png\" alt=\"\" loading=\"lazy\"><br>\n<code>θ(g(n))</code> 增长次数同阶, 等于g(n)常数倍, 反应增长次数的的效率类型与g(n)一样.</p>\n<p>更一般的用极限来比较:<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171935063.png\" alt=\"\" loading=\"lazy\"><br>\n比值为0或常量说明, t(n)属于O(g(n));  为常量 说明t(n)属于θ(g(n)); 为无穷或常量说明t(n)属于Ω(g(n)).</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171941599.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"基本渐进效率类型\">基本渐进效率类型<a title=\"#基本渐进效率类型\" href=\"#基本渐进效率类型\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306171941129.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"非递归算法效率分析一般步骤\">非递归算法效率分析一般步骤<a title=\"#非递归算法效率分析一般步骤\" href=\"#非递归算法效率分析一般步骤\"></a></h3>\n<ol>\n<li>确定输入规模, 通常选 n</li>\n<li>确定基本操作, 通常循环最内层</li>\n<li>检查基本操作的执行次数是否只依赖输入规模, 因为如果不是, 执行次数就还受到其他条件影响, 需要引入其他参数确定执行次数. 分别讨论最优, 最差, 平均.</li>\n<li>建立算法基本操作执行次数的求和表达式.</li>\n<li>计算得到增长次数, 分析效率类型.</li>\n</ol>\n<h3 id=\"递归算法分析\">递归算法分析<a title=\"#递归算法分析\" href=\"#递归算法分析\"></a></h3>\n<ol>\n<li>同非递归一二三</li>\n<li>建立递推关系, 给出相应的初始条件(递归退出条件)</li>\n<li>计算递归表达式, 得到增长次数, 确定效率类型.</li>\n</ol>\n<h4 id=\"fibonacci数列\">Fibonacci数列<a title=\"#fibonacci数列\" href=\"#fibonacci数列\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Fibonacci</span>(n - <span class=\"number\">1</span>) + <span class=\"built_in\">Fibonacci</span>(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 减少重复调用计算相同值， 空间换时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">better_Fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; nums;</span><br><span class=\"line\">\tnums.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\tnums[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tnums[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tnums[i] = nums[i - <span class=\"number\">1</span>] + nums[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nums[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"built_in\">Fibonacci</span>(i) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">better_Fibonacci</span>(<span class=\"number\">10</span>) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>递归效率<br>\nM(n) = M(n-1) + M(n-2)+1<br>\nM(n) = <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.481ex\" height=\"2.676ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -1006.6 1929.5 1152.1\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">2^{n-3}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-32\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(500,412)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6E\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-2212\" x=\"600\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-33\" x=\"1379\" y=\"0\"></use>\n</g>\n</g>\n</svg>+n+2 , <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.381ex\" height=\"2.343ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -863.1 1025.1 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">2{^n}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-32\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(500,0)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6E\" x=\"0\" y=\"583\"></use>\n</g>\n</g>\n</svg>效率类型</p>\n<h2 id=\"蛮力法\">蛮力法<a title=\"#蛮力法\" href=\"#蛮力法\"></a></h2>\n<h3 id=\"选择排序和冒泡排序\">选择排序和冒泡排序<a title=\"#选择排序和冒泡排序\" href=\"#选择排序和冒泡排序\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : nums) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">selection_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min_idx = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i+<span class=\"number\">1</span>; j &lt; nums.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[j] &lt; nums[min_idx]) &#123;</span><br><span class=\"line\">\t\t\t\tmin_idx = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(nums[i], nums[min_idx]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printVector</span>(nums);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>; i++) &#123;   <span class=\"comment\">// n -1 趟</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.<span class=\"built_in\">size</span>()-i<span class=\"number\">-1</span>; j++) &#123;  <span class=\"comment\">// 每一趟进行比较和交换, 将最大值放到最后</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[j] &gt; nums[j + <span class=\"number\">1</span>]) <span class=\"built_in\">swap</span>(nums[j], nums[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printVector</span>(nums);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; nums = &#123; <span class=\"number\">89</span>,<span class=\"number\">45</span>,<span class=\"number\">68</span>,<span class=\"number\">90</span>,<span class=\"number\">29</span>,<span class=\"number\">34</span>,<span class=\"number\">17</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">selection_sort</span>(nums);</span><br><span class=\"line\">\tnums = &#123; <span class=\"number\">89</span>,<span class=\"number\">45</span>,<span class=\"number\">68</span>,<span class=\"number\">90</span>,<span class=\"number\">29</span>,<span class=\"number\">34</span>,<span class=\"number\">17</span> &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;=========================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">bubble_sort</span>(nums);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>选择排序没有最优最差平均之分, 因为每次查找最小值都要遍历之后所有元素, 执行次数<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306172203331.png\" alt=\"\" loading=\"lazy\"><br>\n效率类型 属于 O(n^2)</p>\n</li>\n<li>\n<p>最优顺序不交换, 最差倒序次次交换, 基本操作都是比较, 效率类型 O(n^2)</p>\n</li>\n<li>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306172214584.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n</ul>\n<h3 id=\"顺序查找和蛮力字符串匹配\">顺序查找和蛮力字符串匹配<a title=\"#顺序查找和蛮力字符串匹配\" href=\"#顺序查找和蛮力字符串匹配\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sequential_search</span><span class=\"params\">(vector&lt;T&gt;&amp; nums, T key)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[i] == key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">brute_force_search</span><span class=\"params\">(string s, string p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m = p.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = s.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s[i + j] != p[j]) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j == m) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sequential_search</span>(v, <span class=\"number\">3</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">brute_force_search</span>(<span class=\"string\">&quot;djkasfoiadfahj&quot;</span>, <span class=\"string\">&quot;kas&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最近对问题和凸包问题暴力算法\">最近对问题和凸包问题暴力算法<a title=\"#最近对问题和凸包问题暴力算法\" href=\"#最近对问题和凸包问题暴力算法\"></a></h3>\n<p><code>最近对问题</code>: 计算每两个点之间的距离, 取最小</p>\n<p><code>凸包问题</code>:<br>\n先要明白<code>凸集合</code>: 一个平面点集, 对于该集合中任意两点之间的线段都属于该集合.</p>\n<p>凸包问题就是要再一个点集中求解构造该凸包的集合.<br>\n暴力解法为利用数学方法给每两个点建立一条直线, 然后判断其余点是否在其同一侧.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_dist2</span><span class=\"params\">(pair&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; pair_dots)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(pair_dots.first.first - pair_dots.second.first, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(pair_dots.first.second - pair_dots.second.second, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">print_dot</span><span class=\"params\">(pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; dot)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;(&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"built_in\">to_string</span>(dot.first)).<span class=\"built_in\">append</span>( <span class=\"string\">&quot;,&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"built_in\">to_string</span>(dot.second)).<span class=\"built_in\">append</span>( <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">nearest_dot_pair</span><span class=\"params\">(vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&amp; dots)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 最近对, 蛮力法</span></span><br><span class=\"line\">\tpair&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; pair_dots = &#123;dots[<span class=\"number\">0</span>], dots[<span class=\"number\">1</span>]&#125;;</span><br><span class=\"line\">\t<span class=\"type\">double</span> min_dist = <span class=\"built_in\">get_dist2</span>(pair_dots);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; dots.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i+<span class=\"number\">1</span>; j &lt; dots.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> curr_dist = <span class=\"built_in\">get_dist2</span>(<span class=\"built_in\">make_pair</span>(dots[i], dots[j]));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (min_dist &gt; curr_dist) &#123;</span><br><span class=\"line\">\t\t\t\tmin_dist = curr_dist;</span><br><span class=\"line\">\t\t\t\tpair_dots = &#123; dots[i], dots[j] &#125;;</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;最近点对: &quot;</span> &lt;&lt; <span class=\"built_in\">print_dot</span>(pair_dots.first) &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">print_dot</span>(pair_dots.second) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;最短距离^2: &quot;</span> &lt;&lt; min_dist &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span>  pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; dot;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span>  pair&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; line;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; dots;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">at_which_side</span><span class=\"params\">(line l, dot d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l.first.first == l.second.first) <span class=\"keyword\">return</span> d.first - l.first.first;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l.first.second == l.second.second) <span class=\"keyword\">return</span> d.second - l.first.second;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 两点式</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x1 = l.first.first;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> y1 = l.first.second;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x2 = l.second.first;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> y2 = l.second.second;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x = d.first;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> y = d.second;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ((y2 - y1*<span class=\"number\">1.0</span>) / (x2 - x1)) * (x - x1) - y + y1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">calc_convexhull</span><span class=\"params\">(dots&amp; ds)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 凸包问题, 蛮力法</span></span><br><span class=\"line\">\tset&lt;dot&gt; s;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j, k;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ds.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; ds.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> cnt1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> cnt2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> cnt3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; ds.<span class=\"built_in\">size</span>(); k++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">at_which_side</span>(<span class=\"built_in\">line</span>(ds[i], ds[j]), ds[k]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tcnt1++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">at_which_side</span>(<span class=\"built_in\">line</span>(ds[i], ds[j]), ds[k]) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tcnt2++;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tcnt3++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!cnt3 || !cnt1) &#123; s.<span class=\"built_in\">insert</span>(ds[i]); s.<span class=\"built_in\">insert</span>(ds[j]); &#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;边界点:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (dot d : s) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"built_in\">print_dot</span>(d) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; dots = &#123; <span class=\"built_in\">make_pair</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>), <span class=\"built_in\">make_pair</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>), <span class=\"built_in\">make_pair</span>(<span class=\"number\">10</span>, <span class=\"number\">0</span>),  <span class=\"built_in\">make_pair</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>), <span class=\"built_in\">make_pair</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>), <span class=\"built_in\">make_pair</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>)&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">nearest_dot_pair</span>(dots);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;==============================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">calc_convexhull</span>(dots);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"穷举查找\">穷举查找<a title=\"#穷举查找\" href=\"#穷举查找\"></a></h3>\n<p>列举所有情况得到满足条件的组合</p>\n<ul>\n<li>旅行商问题</li>\n<li>背包问题</li>\n<li>分配问题</li>\n</ul>\n<h2 id=\"分治法\">分治法<a title=\"#分治法\" href=\"#分治法\"></a></h2>\n<p>将问题的实例划分为同一个问题的较小实例.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306182233935.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"合并排序-快速排序\">合并排序 快速排序<a title=\"#合并排序-快速排序\" href=\"#合并排序-快速排序\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191333796.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(vector&lt;T&gt;&amp; nums, <span class=\"type\">int</span> start, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;T&gt; <span class=\"title\">temp</span><span class=\"params\">(end-start+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = start, j = mid+<span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] &lt;= nums[j]) &#123;</span><br><span class=\"line\">            temp[k++] = nums[i++];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[k++] = nums[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid) &#123;</span><br><span class=\"line\">        temp[k++] = nums[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= end) &#123;</span><br><span class=\"line\">        temp[k++] = nums[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>; p &lt; k; p++) &#123;</span><br><span class=\"line\">        nums[start+p] = temp[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; nums, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(nums, start, mid);</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(nums, mid+<span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(nums, start, mid, end);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : nums) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; nums = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191344985.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>核心思想是通过不断比较确定分隔符使左右区间整体有序, 缩小区间范围往下递归.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">partition</span><span class=\"params\">(vector&lt;T&gt;&amp; nums, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    T pivot = nums[end];</span><br><span class=\"line\">    <span class=\"type\">int</span> i = start;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = start; j &lt; end; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[j] &lt; pivot) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(nums[i], nums[j]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(nums[i], nums[end]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; nums, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> pivot = <span class=\"built_in\">partition</span>(nums, start, end);</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(nums, start, pivot<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(nums, pivot+<span class=\"number\">1</span>, end);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : nums) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; nums = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printVector</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效率类型都是 nlogn</p>\n<h3 id=\"二叉树遍历\">二叉树遍历<a title=\"#二叉树遍历\" href=\"#二叉树遍历\"></a></h3>\n<p>前序中序后序</p>\n<h3 id=\"大整数乘法和srassen矩阵乘法\">大整数乘法和Srassen矩阵乘法<a title=\"#大整数乘法和srassen矩阵乘法\" href=\"#大整数乘法和srassen矩阵乘法\"></a></h3>\n<h3 id=\"分治法解最近对和凸包问题\">分治法解最近对和凸包问题<a title=\"#分治法解最近对和凸包问题\" href=\"#分治法解最近对和凸包问题\"></a></h3>\n<p>…</p>\n<h2 id=\"减治法\">减治法<a title=\"#减治法\" href=\"#减治法\"></a></h2>\n<p>减治技术利用了一个问题给定实例的解和同样问题较小实例的解之间的某种关系。一旦建立了这种关系，我们既可以从顶至下(递归地),也可以从底至上(非递归地)地来运用该关系。减治法有3种主要的变种：</p>\n<ul>\n<li>减去一个常量</li>\n<li>减去一个常量因子</li>\n<li>减去的规模是可变的</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191459271.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"插入排序\">插入排序<a title=\"#插入排序\" href=\"#插入排序\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertion_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将 1 - n-1 插入</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; nums[j<span class=\"number\">-1</span>] &gt; nums[j]; j--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(nums[j], nums[j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : nums) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; nums = &#123; <span class=\"number\">89</span>,<span class=\"number\">45</span>,<span class=\"number\">68</span>,<span class=\"number\">90</span>,<span class=\"number\">29</span>,<span class=\"number\">34</span>,<span class=\"number\">17</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">insertion_sort</span>(nums);</span><br><span class=\"line\">\t<span class=\"built_in\">printVector</span>(nums);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"深度优先查找和广度优先查找\">深度优先查找和广度优先查找<a title=\"#深度优先查找和广度优先查找\" href=\"#深度优先查找和广度优先查找\"></a></h3>\n<p>DFS:<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191417903.png\" alt=\"\" loading=\"lazy\"><br>\nBFS:<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191418945.png\" alt=\"\" loading=\"lazy\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191418974.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"拓扑排序\">拓扑排序<a title=\"#拓扑排序\" href=\"#拓扑排序\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191507948.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>另一种方法, 源删除算法:<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191508317.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"生成组合对象的算法\">生成组合对象的算法<a title=\"#生成组合对象的算法\" href=\"#生成组合对象的算法\"></a></h3>\n<p>生成排列, 生成子集</p>\n<h3 id=\"减常因子算法\">减常因子算法<a title=\"#减常因子算法\" href=\"#减常因子算法\"></a></h3>\n<h4 id=\"折半(二分)查找\">折半(二分)查找<a title=\"#折半(二分)查找\" href=\"#折半(二分)查找\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binary_search</span><span class=\"params\">(vector&lt;T&gt;&amp; nums, T target)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">\t\t\tleft = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tright = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : nums) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; nums = &#123; <span class=\"number\">89</span>,<span class=\"number\">45</span>,<span class=\"number\">68</span>,<span class=\"number\">90</span>,<span class=\"number\">29</span>,<span class=\"number\">34</span>,<span class=\"number\">17</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k = <span class=\"built_in\">binary_search</span>(nums, <span class=\"number\">90</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (k != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;该数的下标为：&quot;</span> &lt;&lt; k &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效率类型 θlog(n)</p>\n<h4 id=\"假币问题,-俄式乘法,-约瑟夫问题\">假币问题, 俄式乘法, 约瑟夫问题<a title=\"#假币问题,-俄式乘法,-约瑟夫问题\" href=\"#假币问题,-俄式乘法,-约瑟夫问题\"></a></h4>\n<h2 id=\"变质法\">变质法<a title=\"#变质法\" href=\"#变质法\"></a></h2>\n<p>变治思想有3种主要的类型:<br>\n变换为同样问题的一个更简单或者更方便的实例——我们称之为<code>实例化简</code>。<br>\n变换为同样实例的不同表现——我们称之为<code>改变表现</code>。<br>\n变换为另一个问题的实例，这种问题的算法是已知的——我们称之为<code>问题化简</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191515331.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"预排序\">预排序<a title=\"#预排序\" href=\"#预排序\"></a></h3>\n<h3 id=\"矩阵运算\">矩阵运算<a title=\"#矩阵运算\" href=\"#矩阵运算\"></a></h3>\n<h3 id=\"avl二叉查找树\">AVL二叉查找树<a title=\"#avl二叉查找树\" href=\"#avl二叉查找树\"></a></h3>\n<h3 id=\"堆和堆排序\">堆和堆排序<a title=\"#堆和堆排序\" href=\"#堆和堆排序\"></a></h3>\n<h3 id=\"霍纳法则\">霍纳法则<a title=\"#霍纳法则\" href=\"#霍纳法则\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191528246.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">horner_rule</span><span class=\"params\">(vector&lt;T&gt; params, T x)</span> </span>&#123;</span><br><span class=\"line\">\tT res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; params.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\tres = x * res + params[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; params = &#123; <span class=\"number\">2</span>, <span class=\"number\">-1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">-5</span> &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">horner_rule</span>(params, <span class=\"number\">3</span>) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>乘法次数和加法次数<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191536262.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"问题化简\">问题化简<a title=\"#问题化简\" href=\"#问题化简\"></a></h3>\n<p>将不知道求解的问题化简为已知到求解问题的组合.</p>\n<h4 id=\"最小公倍数\">最小公倍数<a title=\"#最小公倍数\" href=\"#最小公倍数\"></a></h4>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191539042.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"计算图中路径数量\">计算图中路径数量<a title=\"#计算图中路径数量\" href=\"#计算图中路径数量\"></a></h4>\n<p>领接矩阵幂运算<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191542834.png\" alt=\"\" loading=\"lazy\"></p>\n<h4 id=\"优化问题的化简,-线性规划,-简化为图\">优化问题的化简, 线性规划, 简化为图<a title=\"#优化问题的化简,-线性规划,-简化为图\" href=\"#优化问题的化简,-线性规划,-简化为图\"></a></h4>\n<h2 id=\"时空权衡\">时空权衡<a title=\"#时空权衡\" href=\"#时空权衡\"></a></h2>\n<p><code>输入增强</code>: 对问题的部分或全部输入做预处理，然后对获得的额外信息进行存储，以加速后面问题的求解<br>\n空间换时间, 额外空间实现更方便的数据存取, 这种放法成为预购造.</p>\n<ul>\n<li>计数法排序</li>\n<li>Boyer-Moore字符串匹配算法和Horspool提出的简化版本</li>\n</ul>\n<h3 id=\"计数排序\">计数排序<a title=\"#计数排序\" href=\"#计数排序\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191555569.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">count_sort</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;T&gt; <span class=\"title\">rank</span><span class=\"params\">(nums.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;T&gt; <span class=\"title\">res</span><span class=\"params\">(nums.size())</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i+<span class=\"number\">1</span>; j &lt; nums.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class=\"line\">\t\t\t\trank[i]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\trank[j]++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) res[rank[i]] = nums[i];</span><br><span class=\"line\">\tnums = res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(vector&lt;T&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : nums) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; nums = &#123; <span class=\"number\">62</span>,<span class=\"number\">31</span>,<span class=\"number\">84</span>,<span class=\"number\">96</span>,<span class=\"number\">19</span>,<span class=\"number\">47</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">count_sort</span>(nums);</span><br><span class=\"line\">\t<span class=\"built_in\">printVector</span>(nums);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191628692.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"分布计数\">分布计数<a title=\"#分布计数\" href=\"#分布计数\"></a></h3>\n<p>同样的思想</p>\n<h3 id=\"字符串匹配中的输入增强技术\">字符串匹配中的输入增强技术<a title=\"#字符串匹配中的输入增强技术\" href=\"#字符串匹配中的输入增强技术\"></a></h3>\n<p>Horspool算法<br>\nBoyer-Moore算法</p>\n<h3 id=\"散列法\">散列法<a title=\"#散列法\" href=\"#散列法\"></a></h3>\n<h3 id=\"b树\">B树<a title=\"#b树\" href=\"#b树\"></a></h3>\n<h2 id=\"动态规划\">动态规划<a title=\"#动态规划\" href=\"#动态规划\"></a></h2>\n<p>多阶段决策过程最优的通用方法, 特殊的空间换时间权衡.</p>\n<h3 id=\"计算二项式系数\">计算二项式系数<a title=\"#计算二项式系数\" href=\"#计算二项式系数\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nest_binomialCoefficient</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span> || k == n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">binomialCoefficient</span>(n<span class=\"number\">-1</span>, k<span class=\"number\">-1</span>) + <span class=\"built_in\">binomialCoefficient</span>(n<span class=\"number\">-1</span>, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态规划</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binomialCoefficient</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(k + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\tdp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j &lt;= i) &#123;</span><br><span class=\"line\">\t\t\t\tdp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp[n][k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = <span class=\"number\">5</span>, k = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> result = <span class=\"built_in\">binomialCoefficient</span>(n, k);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;C(&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; k &lt;&lt; <span class=\"string\">&quot;) = &quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191928128.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191929201.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"warshall-算法\">Warshall 算法<a title=\"#warshall-算法\" href=\"#warshall-算法\"></a></h3>\n<p>计算有向图的传递闭包矩阵.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306191949827.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这个式子是建立起递推的关键, <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.526ex\" height=\"3.509ex\" style=\"vertical-align: -1.338ex;\" viewBox=\"0 -934.9 1087.5 1510.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">r^{k}_{ij}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6A\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6B\" x=\"638\" y=\"499\"></use>\n<g transform=\"translate(451,-304)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-69\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6A\" x=\"345\" y=\"0\"></use>\n</g>\n</g>\n</svg>取决于<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.238ex\" height=\"3.676ex\" style=\"vertical-align: -1.338ex;\" viewBox=\"0 -1006.6 1824.6 1582.7\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">r^{k-1}_{ij}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6A\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(451,403)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6B\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-2212\" x=\"521\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-31\" x=\"1300\" y=\"0\"></use>\n</g>\n<g transform=\"translate(451,-304)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-69\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6A\" x=\"345\" y=\"0\"></use>\n</g>\n</g>\n</svg>或者<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.238ex\" height=\"3.343ex\" style=\"vertical-align: -1.005ex;\" viewBox=\"0 -1006.6 1824.6 1439.2\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">r^{k-1}_{ik}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(451,403)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6B\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-2212\" x=\"521\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-31\" x=\"1300\" y=\"0\"></use>\n</g>\n<g transform=\"translate(451,-327)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-69\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6B\" x=\"345\" y=\"0\"></use>\n</g>\n</g>\n</svg>和<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.238ex\" height=\"3.676ex\" style=\"vertical-align: -1.338ex;\" viewBox=\"0 -1006.6 1824.6 1582.7\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">r^{k-1}_{kj}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6A\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(451,403)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6B\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-2212\" x=\"521\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-31\" x=\"1300\" y=\"0\"></use>\n</g>\n<g transform=\"translate(451,-327)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6B\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6A\" x=\"521\" y=\"0\"></use>\n</g>\n</g>\n</svg>的与;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">transitiveClosure</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = graph.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">closure</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n, <span class=\"number\">0</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\tclosure[i][j] = graph[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tclosure[i][j] = closure[i][j] || (closure[i][k] &amp;&amp; closure[k][j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Transitive closure:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; closure[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; graph = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">transitiveClosure</span>(graph);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>动态规划就是以空间换时间的技术, 将原问题分解成若干子问题, 将子问题的接缓存到数组中, 避免重复计算. 记忆化搜索, 在需要的时候利用子问题的解. 有点像虚拟机中的快照, 虚拟机将状态保存到磁盘, 以便在需要的时间恢复运用, 也是一种空间换时间, 记忆化搜索.<br>\n我查到的 Warshall 算法和Floyed算法是一个算法, 就是Warshall-Floyed算法, 书上把分为计算传递闭包和最短路径分开来了,不知道为什么. 总的思想都一样, 就是利用高阶矩阵的递推规律每次更新结果. 普遍的只要是存储更新矩阵都能使用.</p>\n<h3 id=\"floyd-算法\">Floyd 算法<a title=\"#floyd-算法\" href=\"#floyd-算法\"></a></h3>\n<p>计算最短路径<br>\nWarshall算法中更新的表示可达性的布尔矩阵, Floyd算法中更新的是距离矩阵, 思想都一样, 还是矩阵的幂运算的递推式, 不过计算的是最短距离, 要改下条件:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306192021387.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INF INT_MAX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">floyd</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = graph.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dist</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\tdist[i][j] = graph[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dist[i][k] != INF &amp;&amp; dist[k][j] != INF) &#123;</span><br><span class=\"line\">\t\t\t\t\tdist[i][j] = <span class=\"built_in\">min</span>(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;All pairs shortest paths:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[i][j] == INF) &#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;INF\\t&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; dist[i][j] &lt;&lt; <span class=\"string\">&quot;\\t&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; graph = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">5</span>, INF, <span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">\t\t&#123;INF, <span class=\"number\">0</span>, <span class=\"number\">3</span>, INF&#125;,</span><br><span class=\"line\">\t\t&#123;INF, INF, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;INF, INF, INF, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">floyd</span>(graph);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最优二叉查找树obst\">最优二叉查找树OBST<a title=\"#最优二叉查找树obst\" href=\"#最优二叉查找树obst\"></a></h3>\n<p>二叉查找树是最重要的数据结构之一。它的一种最主要应用是实现字典，这是一种具有查找、插入和删除操作的元素集合。在 OBST 中，我们希望将搜索代价最小，即查找任意一个元素的平均代价最小。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306192048329.png\" alt=\"\" loading=\"lazy\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306192126194.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">optimalBST</span><span class=\"params\">(vector&lt;<span class=\"type\">float</span>&gt;&amp; p, vector&lt;<span class=\"type\">float</span>&gt;&amp; q, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">float</span>&gt;&gt; <span class=\"built_in\">w</span>(n + <span class=\"number\">2</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">float</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">c</span>(n + <span class=\"number\">2</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">r</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n + <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        w[i][i - <span class=\"number\">1</span>] = q[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        c[i][i - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> len = <span class=\"number\">1</span>; len &lt;= n; ++len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - len + <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j = i + len - <span class=\"number\">1</span>;</span><br><span class=\"line\">            w[i][j] = w[i][j - <span class=\"number\">1</span>] + p[j - <span class=\"number\">1</span>] + q[j];</span><br><span class=\"line\">            c[i][j] = INT_MAX;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i; k &lt;= j; ++k) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> cost = c[i][k - <span class=\"number\">1</span>] + c[k + <span class=\"number\">1</span>][j] + w[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cost &lt; c[i][j]) &#123;</span><br><span class=\"line\">                    c[i][j] = cost;</span><br><span class=\"line\">                    r[i][j] = k;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c[<span class=\"number\">1</span>][n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">float</span>&gt; p = &#123;<span class=\"number\">0.15</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>&#125;;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">float</span>&gt; q = &#123;<span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = p.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> cost = <span class=\"built_in\">optimalBST</span>(p, q, n);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;The minimum cost of OBST is &quot;</span> &lt;&lt; cost &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态规划解背包问题\">动态规划解背包问题<a title=\"#动态规划解背包问题\" href=\"#动态规划解背包问题\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306192220855.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">knapsack</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; w, vector&lt;<span class=\"type\">int</span>&gt;&amp; v, <span class=\"type\">int</span> W)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = w.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(W + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= W; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &gt;= w[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - w[i - <span class=\"number\">1</span>]] + v[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n][W];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; w = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v = &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> W = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_value = <span class=\"built_in\">knapsack</span>(w, v, W);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;The maximum value is: &quot;</span> &lt;&lt; max_value &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该算法的时间效率和空间效率都属于θ(nW)。用来求最优解的具体组成的时间效率属于0(n+W)。<br>\ndp[i][j] 只依赖于 dp[i-1][j] 和 dp[i-1][j-w[i]]，因此我们可以使用一维数组来表示 dp 数组，从而将空间复杂度从 O(nV) 优化到 O(V)。</p>\n<h2 id=\"贪婪技术\">贪婪技术<a title=\"#贪婪技术\" href=\"#贪婪技术\"></a></h2>\n<h3 id=\"prim-算法\">Prim 算法<a title=\"#prim-算法\" href=\"#prim-算法\"></a></h3>\n<p>连通图的一棵生成树是包含图的所有顶点的连通无环子图(也就是一棵树)。加权连通图的一棵最小生成树是图的一棵权重最小的生成树，其中，树的权重定义为所有边的权重总和。<code>最小生成树问题就是求一个给定的加权连通图的最小生成树问题</code>。</p>\n<p>从任意一个顶点开始, 作为生成树的起点, 选取相邻的权值最小的边加入(不可形成环), 直至加入全部节点.</p>\n<h3 id=\"kruskal-算法\">Kruskal 算法<a title=\"#kruskal-算法\" href=\"#kruskal-算法\"></a></h3>\n<p>同样用来构造最小生成树, Prim算法从顶点入手, Kruskal算法从边入手.<br>\n从最短边开始, 不断加入相邻的边直至|V|-1条包含所有节点, 不能形成环, 选取权值最小的边.</p>\n<h3 id=\"dijkstra-算法\">Dijkstra 算法<a title=\"#dijkstra-算法\" href=\"#dijkstra-算法\"></a></h3>\n<p>念  /ˈdɛɪkstra/<br>\n带权图中单源最短路径的贪心算法<br>\n跟Prim算法很像, 不过目标和更新操作不一样.<br>\n核心是比较当前节点直接通往下一个节点和当前节点绕过一个节点再到达下一节点谁的权值小.</p>\n<p>Dijkstra 算法的时间复杂度为 O(V^2)，其中 V 表示节点的数量。如果使用优先队列来优化算法，可以将时间复杂度降为 O(E log V)，其中 E 表示边的数量。因此，Dijkstra 算法适用于节点数量较少，但边的数量较多的图。</p>\n<h3 id=\"哈夫曼树哈夫曼编码\">哈夫曼树哈夫曼编码<a title=\"#哈夫曼树哈夫曼编码\" href=\"#哈夫曼树哈夫曼编码\"></a></h3>\n<h2 id=\"算法能力的极限\">算法能力的极限<a title=\"#算法能力的极限\" href=\"#算法能力的极限\"></a></h2>\n<h3 id=\"p-np-和-np完全问题\">P NP 和 NP完全问题<a title=\"#p-np-和-np完全问题\" href=\"#p-np-和-np完全问题\"></a></h3>\n<p>我们把可以在<code>多项式时间内求解</code>的问题称为<code>易解</code>的，而不能在多项式时间内求解的问题则称为<code>难解</code>的<br>\nP类问题是一类能够用(确定性的)算法在多项式的时间内求解的<code>判定问题</code>。这种问题类型也称为<code>多项式类型</code>。</p>\n<p>某些判定问题是不能用任何算法求解的。我们把这种问题称为是不可判定问题。</p>\n<p>NP类问题是一类可以用<code>不确定多项式算法求解的判定问题</code>。我们把这种问题类型称为不确定多项式类型<br>\nP属于NP</p>\n<p>简单来说, P 类问题是一个判定问题, 判定在在多项式时间的算法类型可不可解, 可接就是P类问题, 大多数问题都是P类, 可以通过分析得出算法的时间效率.<br>\nNP问题也是一个判定问题, 不过判定的对象是不确定算法, 即不可以通过分析直接得出效率类型, 效率类型不确定, 需要进行猜测和验证在多项式时间内能不能给出有效解.这里的N指的nondeterministic.</p>\n<p>NPC问题 NP Complete, 即NP完全问题. 建立在NP基础之上, 属于NP问题. 如果D是NPC问题,  NP中的其他问题都能在多项式的时间类化简为D. 这意味着只要能判定一个问题为NPC, 再基于NPC问题这个典型, 将P = NP ? 的终极问题化简为 P = NPC ? 的问题.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306201616858.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"其他\">其他<a title=\"#其他\" href=\"#其他\"></a></h2>\n<ol>\n<li>一些算法特性<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306200829811.png\" alt=\"\" loading=\"lazy\"></li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>算法设计与分析基础 第二版 清华大学出版社</li>\n</ol>\n","next":{"title":"瘾之花","link":"2023/06/18/瘾之花"},"plink":"https://s1acr.github.io/2023/06/19/[算法设计与分析基础]复习/","toc":[{"id":"绪论&算法效率分析","title":"绪论&amp;算法效率分析","index":"1","children":[{"id":"算法概念","title":"算法概念","index":"1.1"},{"id":"算法的特性","title":"算法的特性","index":"1.2"},{"id":"重要的问题类型","title":"重要的问题类型","index":"1.3"},{"id":"欧几里得算法求最大公约数gcd(greatest-common-divisor)","title":"欧几里得算法求最大公约数GCD(Greatest Common Divisor)","index":"1.4"},{"id":"基本数据结构","title":"基本数据结构","index":"1.5"},{"id":"算法效率分析","title":"算法效率分析","index":"1.6"},{"id":"算法最优-最差-平均效率","title":"算法最优 最差 平均效率","index":"1.7"},{"id":"渐进符号","title":"渐进符号","index":"1.8"},{"id":"基本渐进效率类型","title":"基本渐进效率类型","index":"1.9"},{"id":"非递归算法效率分析一般步骤","title":"非递归算法效率分析一般步骤","index":"1.10"},{"id":"递归算法分析","title":"递归算法分析","index":"1.11","children":[{"id":"fibonacci数列","title":"Fibonacci数列","index":"1.11.1"}]}]},{"id":"蛮力法","title":"蛮力法","index":"2","children":[{"id":"选择排序和冒泡排序","title":"选择排序和冒泡排序","index":"2.1"},{"id":"顺序查找和蛮力字符串匹配","title":"顺序查找和蛮力字符串匹配","index":"2.2"},{"id":"最近对问题和凸包问题暴力算法","title":"最近对问题和凸包问题暴力算法","index":"2.3"},{"id":"穷举查找","title":"穷举查找","index":"2.4"}]},{"id":"分治法","title":"分治法","index":"3","children":[{"id":"合并排序-快速排序","title":"合并排序 快速排序","index":"3.1"},{"id":"二叉树遍历","title":"二叉树遍历","index":"3.2"},{"id":"大整数乘法和srassen矩阵乘法","title":"大整数乘法和Srassen矩阵乘法","index":"3.3"},{"id":"分治法解最近对和凸包问题","title":"分治法解最近对和凸包问题","index":"3.4"}]},{"id":"减治法","title":"减治法","index":"4","children":[{"id":"插入排序","title":"插入排序","index":"4.1"},{"id":"深度优先查找和广度优先查找","title":"深度优先查找和广度优先查找","index":"4.2"},{"id":"拓扑排序","title":"拓扑排序","index":"4.3"},{"id":"生成组合对象的算法","title":"生成组合对象的算法","index":"4.4"},{"id":"减常因子算法","title":"减常因子算法","index":"4.5","children":[{"id":"折半(二分)查找","title":"折半(二分)查找","index":"4.5.1"},{"id":"假币问题,-俄式乘法,-约瑟夫问题","title":"假币问题, 俄式乘法, 约瑟夫问题","index":"4.5.2"}]}]},{"id":"变质法","title":"变质法","index":"5","children":[{"id":"预排序","title":"预排序","index":"5.1"},{"id":"矩阵运算","title":"矩阵运算","index":"5.2"},{"id":"avl二叉查找树","title":"AVL二叉查找树","index":"5.3"},{"id":"堆和堆排序","title":"堆和堆排序","index":"5.4"},{"id":"霍纳法则","title":"霍纳法则","index":"5.5"},{"id":"问题化简","title":"问题化简","index":"5.6","children":[{"id":"最小公倍数","title":"最小公倍数","index":"5.6.1"},{"id":"计算图中路径数量","title":"计算图中路径数量","index":"5.6.2"},{"id":"优化问题的化简,-线性规划,-简化为图","title":"优化问题的化简, 线性规划, 简化为图","index":"5.6.3"}]}]},{"id":"时空权衡","title":"时空权衡","index":"6","children":[{"id":"计数排序","title":"计数排序","index":"6.1"},{"id":"分布计数","title":"分布计数","index":"6.2"},{"id":"字符串匹配中的输入增强技术","title":"字符串匹配中的输入增强技术","index":"6.3"},{"id":"散列法","title":"散列法","index":"6.4"},{"id":"b树","title":"B树","index":"6.5"}]},{"id":"动态规划","title":"动态规划","index":"7","children":[{"id":"计算二项式系数","title":"计算二项式系数","index":"7.1"},{"id":"warshall-算法","title":"Warshall 算法","index":"7.2"},{"id":"floyd-算法","title":"Floyd 算法","index":"7.3"},{"id":"最优二叉查找树obst","title":"最优二叉查找树OBST","index":"7.4"},{"id":"动态规划解背包问题","title":"动态规划解背包问题","index":"7.5"}]},{"id":"贪婪技术","title":"贪婪技术","index":"8","children":[{"id":"prim-算法","title":"Prim 算法","index":"8.1"},{"id":"kruskal-算法","title":"Kruskal 算法","index":"8.2"},{"id":"dijkstra-算法","title":"Dijkstra 算法","index":"8.3"},{"id":"哈夫曼树哈夫曼编码","title":"哈夫曼树哈夫曼编码","index":"8.4"}]},{"id":"算法能力的极限","title":"算法能力的极限","index":"9","children":[{"id":"p-np-和-np完全问题","title":"P NP 和 NP完全问题","index":"9.1"}]},{"id":"其他","title":"其他","index":"10"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"June 19, 2023","updated":"June 19, 2023"},"reading_time":"7112 words in 47 min"}