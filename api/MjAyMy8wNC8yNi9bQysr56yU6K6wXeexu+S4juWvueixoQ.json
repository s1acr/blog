{"title":"[C++笔记]类与对象","date":"2023-04-26T00:00:00.000Z","date_formatted":{"ll":"Apr 26, 2023","L":"04/26/2023","MM-DD":"04-26"},"link":"2023/04/26/[C++笔记]类与对象","comments":true,"categories":["C++"],"updated":"2023-04-26T00:00:00.000Z","content":"<blockquote>\n<p>C++笔记</p>\n</blockquote>\n<h2 id=\"类的访问控制\">类的访问控制<a title=\"#类的访问控制\" href=\"#类的访问控制\"></a></h2>\n<p>三种访问权限类型: <code>public</code> <code>private</code> <code>protected</code><br>\n<code>public</code> 公共权限, 类内类外都能访问, 可继承<br>\n<code>private</code> 私有权限, 类内访问, 不可继承<br>\n<code>protected</code> 保护权限, 类内访问, 可继承<br>\n习惯将<code>public</code>写在类的最前.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Computer</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">turnON</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tpower = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Sleep</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;loading 33%..&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Sleep</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;loading 70%..&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Sleep</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;loading 99%..&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;welcome_&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">bool</span> power;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tstring CPU;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tComputer c;</span><br><span class=\"line\">\tc.<span class=\"built_in\">turnON</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造析构\">构造析构<a title=\"#构造析构\" href=\"#构造析构\"></a></h2>\n<p>构造函数在对象创建时自动调用初始化对象.<br>\n析构函数在对象生存期结束时自动调用, 完成内存回收工作.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;construct building&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>(<span class=\"type\">int</span> area) : <span class=\"built_in\">area</span>(area)&#123;&#125;\t<span class=\"comment\">// 初始化列表</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Building</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;destruct building&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> area;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tBuilding b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化列表与构造析构顺序\">初始化列表与构造析构顺序<a title=\"#初始化列表与构造析构顺序\" href=\"#初始化列表与构造析构顺序\"></a></h3>\n<p>有些数据成员的初始化必须在初始化表中进行, 因为构造函数在在执行函数体前会先按初始化表初始化成员变量, 如果没有就是默认值, 有些情况就会报错. 一类是那些没有默认构造函数的内嵌对象, 因为这类对象初始化时必须提供参数，另一类是引用类型的数据成员, 因为引用型变量必须在初始化时绑定引用的对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y):<span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y)&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Point constructor&quot;</span> &lt;&lt; <span class=\"string\">&quot;_&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>(<span class=\"type\">const</span> Point&amp; p) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;x = p.x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;y = p.y;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Point assignment&quot;</span> &lt;&lt; <span class=\"string\">&quot;_&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Point</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Point destructor&quot;</span> &lt;&lt; <span class=\"string\">&quot;_&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Line</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPoint p1, p2;</span><br><span class=\"line\">\t<span class=\"built_in\">Line</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Line</span>(Point p1, Point p2) : <span class=\"built_in\">p1</span>(p1), <span class=\"built_in\">p2</span>(p2) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Line constructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Line</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Line destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Point <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Point <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Line</span>(p1, p2);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304242300154.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>构造一个类的对象时, 先构造内嵌对象再构造自身</p>\n<p>构造与析构顺序相反, 因为函数调用栈的关系.</p>\n<h3 id=\"拷贝构造\">拷贝构造<a title=\"#拷贝构造\" href=\"#拷贝构造\"></a></h3>\n<p>把初始值对象的每个数据成员的值都复制到新建立的对象中。因此，也可以说是完成了同类对象的复制 (clone) • 这样得到的对象和原对象具有完全相同的数据成员，即完全相同的属性。</p>\n<h4 id=\"调用拷贝构造时机\">调用拷贝构造时机<a title=\"#调用拷贝构造时机\" href=\"#调用拷贝构造时机\"></a></h4>\n<ul>\n<li>用类的一个对象去初始化类的另一个对象</li>\n<li>调用函数把<code>对象当值传递</code>时, 会用实参初始化形参.</li>\n<li>函数返回值为对象时, 会在主函数中创建一个生存期仅在调用语句中的临时无名对象, 用返回值的对象初始化该临时对象.</li>\n</ul>\n<h4 id=\"浅拷贝的问题\">浅拷贝的问题<a title=\"#浅拷贝的问题\" href=\"#浅拷贝的问题\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_num = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> num)&#123;</span><br><span class=\"line\">\t\tp_num = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p_num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(t1)</span></span>;  <span class=\"comment\">// 或者 Test t2 = t1;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>手动释放指针的时候由于拷贝构造初始化的对象只是值传递, 造成析构时指针的重复释放.<br>\n可以通过重载拷贝构造解决</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_num = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> num)&#123;</span><br><span class=\"line\">\t\tp_num = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// override copy constructor</span></span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">const</span> Test&amp; t) &#123;</span><br><span class=\"line\">\t\tp_num = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*(t.p_num));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p_num;\t<span class=\"comment\">// 释放堆区空间</span></span><br><span class=\"line\">\t\tp_num = <span class=\"literal\">NULL</span>;\t<span class=\"comment\">// 保险起见, 避免野指针.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(t1)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\">结构体<a title=\"#结构体\" href=\"#结构体\"></a></h2>\n<p>C++结构体是一种<code>特殊形态的类</code>, 结构体和类具有不同的默认访问控制属性, 类中默认访问控制权限是 private, 结构体中是 public.<br>\n结构体中, 习惯将数据成员设置为公共; 类中习惯设置为私有.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>: </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> foo;</span><br><span class=\"line\">\t<span class=\"type\">float</span> bar;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Mode</span> : <span class=\"keyword\">public</span> Node &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tNode N;</span><br><span class=\"line\">\tMode M;</span><br><span class=\"line\">\tN = &#123; <span class=\"number\">1</span> , <span class=\"number\">2.0</span> &#125;;</span><br><span class=\"line\">\tN.<span class=\"built_in\">gank</span>();</span><br><span class=\"line\">\tM.<span class=\"built_in\">gank</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合体\">联合体<a title=\"#联合体\" href=\"#联合体\"></a></h2>\n<p>联合体的全部数据成员<code>共享同一组内存单元</code>。<br>\n联合体也可以不声明名称，称为元名联合体。无名联合体没有标记名，只是声明一个<br>\n成员项的集合，这些成员项具有相同的内存地址，可以自成员项的名字直接访问。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> A, B, C;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> A) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(Test) &lt;&lt; endl;  <span class=\"comment\">// 4</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"title class_\">My</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> A, B, C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMy u;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> A) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(Test) &lt;&lt; endl;  <span class=\"comment\">// 4</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"位域\">位域<a title=\"#位域\" href=\"#位域\"></a></h2>\n<p>某些数据只需要几个二进制位即可保存, 以通过冒号( :)后的位数来指定为一个位域所占用的二进制位数.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Status</span> &#123; OK, WARNING, ERROR, UNSAFE&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Feedback</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tStatus s1 : <span class=\"number\">2</span>;</span><br><span class=\"line\">\tStatus s2 : <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tFeedback f;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(Feedback) &lt;&lt; endl;  <span class=\"comment\">//4</span></span><br><span class=\"line\">\tf.s1 = OK;</span><br><span class=\"line\">\tcout &lt;&lt; f.s1 &lt;&lt; endl;   <span class=\"comment\">// 0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数定义类型转换\">构造函数定义类型转换<a title=\"#构造函数定义类型转换\" href=\"#构造函数定义类型转换\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">P</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> : x(x)&#123;</span>&#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tP p1, p2;</span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(P p1, P p2) : <span class=\"built_in\">p1</span>(p1), <span class=\"built_in\">p2</span>(p2) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(<span class=\"built_in\">P</span>(<span class=\"number\">1</span>), <span class=\"built_in\">P</span>(<span class=\"number\">2</span>));   <span class=\"comment\">// 构造匿名对象, 也可以看成类型转换</span></span><br><span class=\"line\">\t<span class=\"built_in\">L</span>((P)<span class=\"number\">1</span>, <span class=\"built_in\">P</span>(<span class=\"number\">2</span>));\t<span class=\"comment\">// 自定义类型转换</span></span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(<span class=\"built_in\">static_cast</span>&lt;P&gt;(<span class=\"number\">1</span>), <span class=\"built_in\">static_cast</span>&lt;P&gt;(<span class=\"number\">2</span>));   <span class=\"comment\">// 和上面等同</span></span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>);\t\t<span class=\"comment\">// 隐式转换, 参数列表比对时发生构造</span></span><br><span class=\"line\">\t<span class=\"comment\">// 给P 加上explicit 关键词后上, 不允许发生隐式类型转换P p1 = 1 这种情况实际上是P p1 = P(1).</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据的保护和共享\">数据的保护和共享<a title=\"#数据的保护和共享\" href=\"#数据的保护和共享\"></a></h2>\n<h3 id=\"作用域\">作用域<a title=\"#作用域\" href=\"#作用域\"></a></h3>\n<p>作用域是一个标识符在程序正文中有效的区域。C++中标识符的作用域有<code>函数原型作用域</code>、<code>局部作用域(块作用域)</code>、<code>类作用域</code>和<code>命名空间作用域</code>。</p>\n<h4 id=\"命名空间\">命名空间<a title=\"#命名空间\" href=\"#命名空间\"></a></h4>\n<p>namespace , 为了区分不同的程序模块的标识符, 一个命名空间确定了一个命名空间作用域. 在命名空间内部, 可以直接引用当前命名空间中声明的标识符.</p>\n<p>std是C++标准库的命名空间, 使用了该命名空间就不用再加std作用域了.<br>\n命名空间也允许嵌套.<br>\n具有命名空间作用域的变量也是全局变量.</p>\n<p>两类特殊命名空间<br>\n<code>全局命名空间</code>: 所有显示声明的命名空间之外声明的标识符都定义在全局命名空间之下.<br>\n<code>匿名命名空间</code>: 不希望暴露给其他源文件使用, 仅在<code>定义该匿名命名空间的编译单元中生效</code>, 不需要使用声明.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span>  中文模式 &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> 字符串 &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\tstd::string s;</span><br><span class=\"line\">\t\t字符串()&#123;&#125;</span><br><span class=\"line\">\t\t字符串(<span class=\"type\">const</span> <span class=\"type\">char</span>* s):<span class=\"built_in\">s</span>(std::<span class=\"built_in\">string</span>(s))&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"type\">void</span> 输出(字符串&amp; s) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; s.s &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">void</span> 输出(<span class=\"type\">const</span> <span class=\"type\">char</span>* s) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; s &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">void</span> 输入(字符串&amp; s) &#123;</span><br><span class=\"line\">\t\tstd::cin &gt;&gt; s.s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t字符串 环境 = <span class=\"string\">&quot;中文模式v0.1&quot;</span>;  <span class=\"comment\">// 命名空间中的变量也是全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> 中文模式;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t输出(环境);</span><br><span class=\"line\">\t字符串 信息;</span><br><span class=\"line\">\t输出(<span class=\"string\">&quot;请输入信息&quot;</span>);</span><br><span class=\"line\">\t输入(信息);</span><br><span class=\"line\">\t输出(信息);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可见性\">可见性<a title=\"#可见性\" href=\"#可见性\"></a></h4>\n<p>从标识符引用的角度，来看<code>标识符的有效范围</code>，即标识符的可见性<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304251236795.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"对象生存期\">对象生存期<a title=\"#对象生存期\" href=\"#对象生存期\"></a></h3>\n<p>对象从诞生到结束的时间段.</p>\n<h4 id=\"静态生存期\">静态生存期<a title=\"#静态生存期\" href=\"#静态生存期\"></a></h4>\n<p>如果对象的生存期与程序的运行期相同，则称它具有静态生存期。在命名空间作用域中声明的对象都是具有静态生存期的。如果要在函数内部的局部作用域中声明具有静态生存期的对象，则要使用关键字 statìc<br>\n定义时未指定初值的基本类型静态生存期变量，会被赋予0值初始化，而对于动态生存期变量，不指定初值意味着初值不确定。</p>\n<h4 id=\"动态生存期\">动态生存期<a title=\"#动态生存期\" href=\"#动态生存期\"></a></h4>\n<p>在局部作用域中声明的具有动态生存期的对象，习惯上也称为局部生存期对象。局部生存期对象诞生于声明点，结束于声明所在的块执行完毕之时。</p>\n<h3 id=\"静态成员变量\">静态成员变量<a title=\"#静态成员变量\" href=\"#静态成员变量\"></a></h3>\n<p>static关键字来声明静态成员, 类属性是描述类的所有对象共同特征的一个数据项，对于任何对象实例，它的属性值是相同的. 静态数据成员具有静态生存期。</p>\n<p>静态数据成员不属于任何一个对象，因此可以通过类名对它进行访问，</p>\n<p>在类的定义中仅仅对静态数据成员进行<code>引用性声明</code>，必须在<code>命名空间作用域</code>的某个地方使用<code>类名限定定义性声明</code>，这时也可以进行初始化.</p>\n<h3 id=\"静态成员函数\">静态成员函数<a title=\"#静态成员函数\" href=\"#静态成员函数\"></a></h3>\n<p>静态成员函数可以直接访问该类的静态数据和函数成员。而访问非静态成员，必须通过对象名。<br>\n静态成员可以通过类名访问.</p>\n<h3 id=\"友元\">友元<a title=\"#友元\" href=\"#友元\"></a></h3>\n<p>友元关系提供了不同类或对象的成员函数之间、类的成员函数与一般函数之间进行数据共享的机制.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">double</span> <span class=\"title\">getLen</span><span class=\"params\">(P p1, P p2)</span></span>;   <span class=\"comment\">// 设置getLen为P友元, 可以访问P中所有成员</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">double</span> x;</span><br><span class=\"line\">\t<span class=\"type\">double</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">getLen</span><span class=\"params\">(P p1, P p2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">pow</span>(p1.x - p2.x, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(p1.y - p2.y, <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">getLen</span>(<span class=\"built_in\">P</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">P</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>)) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"共享数据的保护\">共享数据的保护<a title=\"#共享数据的保护\" href=\"#共享数据的保护\"></a></h3>\n<p>虽然数据隐藏保证了数据的安全性，但各种形式的数据共享却又不同程度地破坏了数据的安全。因此，对于<code>既需要共享又需要防止改变的数据应该声明为常量</code>。因为常量在程序运行期间是不可改变的，所以可以有效地保护数据。</p>\n<h4 id=\"常对象\">常对象<a title=\"#常对象\" href=\"#常对象\"></a></h4>\n<p>常对象的数据成员值在对象的整个生存期间内不能被改变. 常对象必须在声明时初始化，因为之后不能更改。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> P <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;\t<span class=\"comment\">// 常对象, 不可修改</span></span><br><span class=\"line\">\t<span class=\"function\">P <span class=\"type\">const</span> <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">4</span>)</span></span>;  <span class=\"comment\">// 放在类型名后也可以 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常数据成员\">常数据成员<a title=\"#常数据成员\" href=\"#常数据成员\"></a></h4>\n<p>常数据成员只能被初始化，不能被赋值，因此要用初始化列表，或者定义时初始化.</p>\n<h4 id=\"常成员函数\">常成员函数<a title=\"#常成员函数\" href=\"#常成员函数\"></a></h4>\n<p>成员函数有两类, 修改对象状态的成员函数，获取对象状态的成员函数。<br>\n<code>常成员函数就是一种获取成员状态的函数，并且不能改变对象状态</code></p>\n<ol>\n<li>常对象只能调用常成员函数</li>\n<li>常成员函数只能调用常成员</li>\n<li>常成员函数可以成为其它函数的重载</li>\n<li>常成员函数不能用于初始化对象，因为这时只能叫赋值</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">mutable</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>() : <span class=\"built_in\">x</span>(<span class=\"number\">111</span>)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;\t<span class=\"comment\">// 常成员函数, 注意标志是后面那个 const</span></span><br><span class=\"line\">\t\ty = <span class=\"number\">100</span>;\t\t\t<span class=\"comment\">// 常成员函数不能改变对象的状态\t\t\t\t\t\t     </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//getY();\t\t // 但我们可以用 mutable 关键字使在常成员函数中也可改变成员变量的值\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tTest t;</span><br><span class=\"line\">\tcout &lt;&lt; t.<span class=\"built_in\">getX</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"关于const和引用\">关于const和引用<a title=\"#关于const和引用\" href=\"#关于const和引用\"></a></h4>\n<p>const 关键字修饰其实就是指定一个空间不可被修改, 其中的值就是固定的.<br>\n比如C++中的引用, 本质上是一个 <code>指针常量</code>, 固定指向的指针. 引用发生赋值实际上是取<br>\n常引用实际上是 <code>(常量指针)常量</code>, 固定指向且不可修改指向的值的指针.<br>\n但凡引用数据类型就必须涉及到’指针’, 指针实际上谈指向有些不准确的意味, 就是用来存放地址的特殊变量.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tP p;</span><br><span class=\"line\">\tP&amp; quote_p = p; </span><br><span class=\"line\">\tP* <span class=\"type\">const</span> ptr_p = &amp;p;\t<span class=\"comment\">// 上面的引用相当于定义指针常量, 引用的写法是一种简化.</span></span><br><span class=\"line\">\tptr_p-&gt;x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tP&amp; test_p = quote_p;\t<span class=\"comment\">// 引用赋值, test_p 也是指向p的指针常量, 指向确定了就不可修改.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tP pp;</span><br><span class=\"line\">\t<span class=\"type\">const</span> P&amp; quote_pp = pp; <span class=\"comment\">// 常引用, 不可修改指向的值</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> P* <span class=\"type\">const</span> ptr_pp = &amp;pp; <span class=\"comment\">// 上式相当于一个常量指针常量\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多文件结构和编译预处理命令\">多文件结构和编译预处理命令<a title=\"#多文件结构和编译预处理命令\" href=\"#多文件结构和编译预处理命令\"></a></h2>\n<h3 id=\"多文件组织结构\">多文件组织结构<a title=\"#多文件组织结构\" href=\"#多文件组织结构\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304251511191.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>#include &lt;filename&gt;</code>表示按照标准方式搜索要嵌入的文件，该文件位于编译环境的 include 子目录下，一般要嵌入系统提供的标准文件时采用这样的方式,<br>\n<code>#include &quot;filename&quot;</code>, 表示首先在当前目录下搜索要嵌入的文件，如果没有，再按照标准方式搜索，对用户自己编写的文件一般采用这种方式，</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304251529318.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>决定一个声明放在源文件中还是头文件中的一般原则是，将<code>需要分配空间的定义放在源文件中</code>，例如函数的定义(需要为函数代码分配空间)、命名空间作用域中变量的定义(需要为变量分配空间)等;而将不需要分配空间的声明放在头文件中，例如类声明、外部函数的原型声明、外部变量的声明、基本数据类型常量的声明等。内联函数比较特殊，由于它的内容需要嵌入到每个调用它的函数之中，所以对于那些需要被多个编译单元调用的内联函数，它们的代码应该被各个编译单元可见，这些内联函数的定义应当出现在头文件中。</p>\n<h3 id=\"外部变量与外部函数\">外部变量与外部函数<a title=\"#外部变量与外部函数\" href=\"#外部变量与外部函数\"></a></h3>\n<p>如果一个变量除了在定义它的源文件中可以使用外，还能被其他文件使用，那么就称这个变量是外部变量。命名空间作用域中定义的变量，默认情况下都是外部变量，但在其他文件中如果需要使用这一变量，需要用<code>extern</code>关键字加以声明。</p>\n<p>通常情况下，变量和函数的定义都放在源文件中，而对<code>外部变量和外部函数的引用性声明则放在头文件</code>中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file one</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> i = <span class=\"number\">9</span>;\t\t\t\t<span class=\"comment\">// 定义性声明, 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; &amp;i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\ti++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// another</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;\t\t\t\t<span class=\"comment\">// 引用性声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test</span>();</span><br><span class=\"line\">\tcout &lt;&lt; &amp;i &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"标准c++库\">标准C++库<a title=\"#标准c++库\" href=\"#标准c++库\"></a></h3>\n<p>C语言中，系统函数、系统的外部变量和一些宏定义都放置在运行库( run-time library) 中。 c++ 的库中除继续保留了大部分 语言系统函数外，还加入了预定义的模板和类。标准 c++ 类库是一个极为灵活并可扩展的可<code>重用软件模块的集合</code>。标准 c++ 类与组件在逻辑上分为如下6种类型。包含了必要的头文件后，就可以使用其中预定义的内容了。</p>\n<ul>\n<li>输入输出类;</li>\n<li>容器类与 ADT( 抽象数据类型) ;</li>\n<li>存储管理类;</li>\n<li>算法;</li>\n<li>错误处理;</li>\n<li>运行环境支持。</li>\n</ul>\n<h3 id=\"编译预处理\">编译预处理<a title=\"#编译预处理\" href=\"#编译预处理\"></a></h3>\n<p>在编译器对摞程序进行编译之前，首先要由预处理器对程序文本进行预处理。<code>预处理器提供了一组编译预处理指令和预处理操作符</code>。预处理指令实际上不是 c++ 语言的一部分，它只是用来扩充 c++ 程序设计的环境。所有的预处理指令在程序中都是以&quot;#&quot;来引导，每一条预处理指令单独占用一行，不要用分号结束。预处理指令可以根据需要出现在程序中的任何位置。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">#define</td>\n<td style=\"text-align:left\">定义宏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#include</td>\n<td style=\"text-align:left\">包含一个源代码文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#undef</td>\n<td style=\"text-align:left\">取消已定义的宏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#ifdef</td>\n<td style=\"text-align:left\">如果宏已经定义，则返回真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#ifndef</td>\n<td style=\"text-align:left\">如果宏没有定义，则返回真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#if</td>\n<td style=\"text-align:left\">如果给定条件为真，则编译下面代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#else</td>\n<td style=\"text-align:left\">#if 的替代方案</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#elif</td>\n<td style=\"text-align:left\">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#endif</td>\n<td style=\"text-align:left\">结束一个 #if……#else 条件编译块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#error</td>\n<td style=\"text-align:left\">当遇到标准错误时，输出错误消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#pragma</td>\n<td style=\"text-align:left\">使用标准化方法，向编译器发布特殊的命令到编译器中</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __STDC__</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;yes\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG \\</span></span><br><span class=\"line\"><span class=\"meta\">printf(<span class=\"string\">&quot;debug begin!!\\n&quot;</span>);         <span class=\"comment\">// 这个 \\ 是宏延续运算符, 与下一句之间必须只有一个换行</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> squre(x) (x*x)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Max(x, y) (x &gt; y ? x : y)</span></span><br><span class=\"line\"><span class=\"comment\">// 参数化宏来模拟函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> tokenpaster(n) printf (<span class=\"string\">&quot;token&quot;</span> #n <span class=\"string\">&quot; = %d\\n&quot;</span>, token##n)</span></span><br><span class=\"line\"><span class=\"comment\">// #标记粘连运算符, 允许宏定义中两个独立标记合并为一个, #n 代表取n的字符串, ##n表示将token与n两个字符串粘连成一个新标识符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FILE__);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, __LINE__);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __DATE__);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __TIME__); <span class=\"comment\">// 预定义宏</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(&quot;%s\\n&quot;, __STDC__);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> token30 = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">tokenpaster</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">squre</span>(<span class=\"number\">5</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">Max</span>(<span class=\"number\">88</span>, <span class=\"number\">99</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"typedef-vs-#define\">typedef vs #define<a title=\"#typedef-vs-#define\" href=\"#typedef-vs-#define\"></a></h4>\n<p>typedef 仅限于为类型定义符号名称，#define不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。<br>\ntypedef 是由编译器执行解释的，#define 语句是由预编译器进行处理的。</p>\n<h2 id=\"代码的编译连接与执行过程\">代码的编译连接与执行过程<a title=\"#代码的编译连接与执行过程\" href=\"#代码的编译连接与执行过程\"></a></h2>\n<p><code>编译</code><br>\n一个个源文件，经过编译系统的处理，生成目标文件的过程叫做编译。编译是对一个个源文件分别处理的，因此每个源文件构成了一个独立的编译单元，编译过程中不同的编译单元互不影响。<br>\n目标文件主要用来描述程序在运行过程中需要放在内存中的内容，这些内容包括两大类一一代码和数据。相应地，<code>目标文件也分成代码段和数据段</code>。<br>\n<code>代码段(. text)</code>中的内容就是源文件中定义的一个个<code>函数编译后得到的目标代码</code>。<br>\n<code>数据段</code>中包含对源文件中定义的各个<code>静态生存期对象(包括基本类型变量)</code>的描述。<br>\n数据段又分为初始化的数据段(. data) 和未初始化的数据段(. bss) 。</p>\n<p><code>初始化的数据段</code>中包括了那些在<code>定义的同时设置了初值的静态生存期对象</code>(通过执行构造函数的方式赋初值的不在此列)。这些对象在运行时占多少内存空间，在目标文件中就要提供多少空间存放它们的初值。<br>\n其他静态生存期对象，都放在<code>未初始化的数据段中</code>。由于它们没有静态的初值，目标文件中不需要保留专门空间存储它们的信息，只需记录这个段的大小。</p>\n<p>不同编译单元间的相同变量或函数的联系要通过这些变量或函数的名字来建立，这些名字都存放在目标代码的符号表中。</p>\n<p>符号表是用来把各个标识符名称和它们在各段中的地址关联起来的数据结构。具体地说，符号表应当包含若干个条目，每个静态生存期对象或函数都对应于符号表中的一个条目。这个条目存储了该静态生存期对象或函数的名字和它在该目标文件中的位置，位置是通过它所在那个段以及它相对于该段段首的偏移地址来表示。</p>\n<p>对于那些在编译单元中被引用但未定义的外部变量、外部函数，在符号表中也有相关的条目，但条目中只有符号名，而位置信息是未定义的。</p>\n<p>符号表中，函数并不只以它在源程序中的名字命名，函数在符号表中的名字至少要包括源程序中的函数名和参数表类型信息。</p>\n<p>目标文件代码段的目标代码中对静态生存期对象的引用和对函数的调用所使用的地址都是未定义的，因为它们的地址在连接阶段才能确定。</p>\n<p>在目标文件中还需要保存一些信息，用来将目标代码中的地址和符号表中的条目建立关联，这样到连接时，通过这些信息就可以将这些指令中的地址设置为有效的地址。这些信息称为重定位信息。</p>\n<p><code>链接</code></p>\n<p>在连接期间，需要将各个编译单元的目标文件和运行库当中被调用过的单元加以合并。运行库实际上就是一个个目标代码文件的集合，运行库的各个组成部分a.o这样的目标代码具有相同的结构。经过合并后，不同编译单元的代码段和两类数据段就分别合并到一起了，程序在运行时代码和静态数据需要占据的内存空间就全部已知了，因此所有代码和数据都可以被分配确定的地址了。</p>\n<p>与此同时，各个目标文件的符号表也可以被综合起来，符号表的每个条目都会有确定的地址。重定位信息这时也能发挥作用了，各段代码中未定义的地址，都可以被替换为有效地址。</p>\n<p>连接的对象除了用户源程序生成的目标文件外，还有系统的运行库。例如，执行输入输出功能，调用 sin.fabs 这类标准函数，都需要通过系统运行库。此外，系统运行库中还包括程序的引导代码。在执行 maln 函数之前，程序需要执行一些初始化工作;在 main函数返回后，需要通知操作系统程序执行完毕，这些都要由运行库中的代码来完成。</p>\n<h2 id=\"知识点:\">知识点:<a title=\"#知识点:\" href=\"#知识点:\"></a></h2>\n<ol>\n<li>OOP基本特征: <code>抽象封装继承多态</code></li>\n<li>通常情况下， using namespace 语句不宜放在头文件中，因为这会使一个命名空间不被察觉地对一个源文件开放。</li>\n<li>zu%, 格式化输出size_t 类型</li>\n<li>出现不安全报错可以添加编译预处理指令<code>#pragma warning(disable _code)</code></li>\n<li>mutable修饰的成员对象在任何时候都不会被视为常对象, 也就是说常对象的mutable对象成员是可变的</li>\n<li>函数声明中可以不指定形参名, 只给类型.</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n","prev":{"title":"[C++笔记]指针","link":"2023/04/26/[C++笔记]指针"},"next":{"title":"[WPS]","link":"2023/04/25/[WPS]"},"plink":"https://s1acr.github.io/2023/04/26/[C++笔记]类与对象/","toc":[{"id":"类的访问控制","title":"类的访问控制","index":"1"},{"id":"构造析构","title":"构造析构","index":"2","children":[{"id":"初始化列表与构造析构顺序","title":"初始化列表与构造析构顺序","index":"2.1"},{"id":"拷贝构造","title":"拷贝构造","index":"2.2","children":[{"id":"调用拷贝构造时机","title":"调用拷贝构造时机","index":"2.2.1"},{"id":"浅拷贝的问题","title":"浅拷贝的问题","index":"2.2.2"}]}]},{"id":"结构体","title":"结构体","index":"3"},{"id":"联合体","title":"联合体","index":"4"},{"id":"位域","title":"位域","index":"5"},{"id":"构造函数定义类型转换","title":"构造函数定义类型转换","index":"6"},{"id":"数据的保护和共享","title":"数据的保护和共享","index":"7","children":[{"id":"作用域","title":"作用域","index":"7.1","children":[{"id":"命名空间","title":"命名空间","index":"7.1.1"},{"id":"可见性","title":"可见性","index":"7.1.2"}]},{"id":"对象生存期","title":"对象生存期","index":"7.2","children":[{"id":"静态生存期","title":"静态生存期","index":"7.2.1"},{"id":"动态生存期","title":"动态生存期","index":"7.2.2"}]},{"id":"静态成员变量","title":"静态成员变量","index":"7.3"},{"id":"静态成员函数","title":"静态成员函数","index":"7.4"},{"id":"友元","title":"友元","index":"7.5"},{"id":"共享数据的保护","title":"共享数据的保护","index":"7.6","children":[{"id":"常对象","title":"常对象","index":"7.6.1"},{"id":"常数据成员","title":"常数据成员","index":"7.6.2"},{"id":"常成员函数","title":"常成员函数","index":"7.6.3"},{"id":"关于const和引用","title":"关于const和引用","index":"7.6.4"}]}]},{"id":"多文件结构和编译预处理命令","title":"多文件结构和编译预处理命令","index":"8","children":[{"id":"多文件组织结构","title":"多文件组织结构","index":"8.1"},{"id":"外部变量与外部函数","title":"外部变量与外部函数","index":"8.2"},{"id":"标准c++库","title":"标准C++库","index":"8.3"},{"id":"编译预处理","title":"编译预处理","index":"8.4","children":[{"id":"typedef-vs-#define","title":"typedef vs #define","index":"8.4.1"}]}]},{"id":"代码的编译连接与执行过程","title":"代码的编译连接与执行过程","index":"9"},{"id":"知识点:","title":"知识点:","index":"10"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"April 26, 2023","updated":"April 26, 2023"},"reading_time":"6019 words in 40 min"}