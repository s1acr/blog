{"title":"[Java笔记]继承&多态","date":"2023-05-09T00:00:00.000Z","date_formatted":{"ll":"May 9, 2023","L":"05/09/2023","MM-DD":"05-09"},"link":"2023/05/09/[Java笔记]继承&多态","comments":true,"categories":["Java"],"updated":"2023-05-09T00:00:00.000Z","content":"<h2 id=\"继承\">继承<a title=\"#继承\" href=\"#继承\"></a></h2>\n<p>定义类时若缺省extends 关键字，则所定义的类为java.lang.Object类的直接子类.<br>\nJava 仅支持单重继承，即一个类至多只有一个直接父类。在Java 中可以通过接口实现其他语言中的多重继承。</p>\n<h3 id=\"覆盖(overriding)\">覆盖(overriding)<a title=\"#覆盖(overriding)\" href=\"#覆盖(overriding)\"></a></h3>\n<p><code>@Override</code> 注解表示其后的方法必须是覆盖父类的一个方法。如果具有该注解的方法没有覆盖父类的方法，编译器将报告一个错误。<br>\n父类中static方法可以被继承，但不能被覆盖。<br>\n要在子类中定义一个覆盖的方法，方法的参数和返回值类型都必须与父类中的方法相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Base() &#123;&#125;;</span><br><span class=\"line\">    Base(<span class=\"type\">int</span> pr_1) &#123;<span class=\"built_in\">this</span>.pr_1 =  pr_1;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from base&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Derived() &#123;&#125;;</span><br><span class=\"line\">    Derived(<span class=\"type\">int</span> pr_1) &#123;<span class=\"built_in\">this</span>.pr_1 = pr_1;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from derived&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Derived</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Derived</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        d.say();  <span class=\"comment\">// 2_from derived</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"super关键字\">super关键字<a title=\"#super关键字\" href=\"#super关键字\"></a></h3>\n<p>引用当前对象的父类对象.</p>\n<p>this()：调用本类中其他重载的构造函数（必须写在函数中的第一行）<br>\nsuper()：调用父类中的构造函数（必须写在函数中的第一行）<br>\n它们不能存在于同一个构造方法中</p>\n<p><a href=\"http://this.XXX\">this.XXX</a>()：调用在本类中重写的父类方法<br>\n<a href=\"http://super.XXX\">super.XXX</a>()：调用父类中的方法<br>\n它们可以存在于同一个构造方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Base() &#123;&#125;;</span><br><span class=\"line\">    Base(<span class=\"type\">int</span> pr_1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pr_1 =  pr_1;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Base constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from base&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Derived() &#123;&#125;;</span><br><span class=\"line\">    Derived(<span class=\"type\">int</span> pr_1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();        <span class=\"comment\">// 构造父类构造</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.pr_1 = <span class=\"number\">100</span>;   <span class=\"comment\">// 访问父类成员</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pr_1 = pr_1;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Derived constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from derived&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">baseSay</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.say();   <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Derived</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Derived</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        d.baseSay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    Base constructor</span></span><br><span class=\"line\"><span class=\"comment\">//    Derived constructor</span></span><br><span class=\"line\"><span class=\"comment\">//    100_from base</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"访问修饰符\">访问修饰符<a title=\"#访问修饰符\" href=\"#访问修饰符\"></a></h2>\n<p>Java 类有 两种访问权限, public 和 缺省, public 权限可以供类外访问, 缺省只能包内访问.</p>\n<p>类的成员有四种访问权限  private 缺省 protected public.<br>\nprivate只能类内访问; 缺省本类和同一个包中的类可以访问; protected 可以被这个类本身、同一<br>\n个包中的类以及该类的子类访问; public 被任何类访问.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305092037566.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"抽象类(abstract-class)\">抽象类(abstract class)<a title=\"#抽象类(abstract-class)\" href=\"#抽象类(abstract-class)\"></a></h2>\n<p><code>抽象方法只有方法的声明，没有方法的实现</code>。<code>包含抽象方法的类必须定义为抽象类</code>，定义抽象类需要的类前加上abstract修饰符。<br>\n在抽象类中可以定义构造方法，这些构造方法可以在子类的构造方法中调用。尽管在抽象类中可以定义构造方法，但<code>抽象类不能被实例化</code>，即不能生成抽象类的对象。<br>\n在抽象类中可以定义非抽象的方法。可以创建抽象类的子类，抽象类的子类还可以是抽象类，只有非抽象的子类才能使用new创建该类的对象。<br>\n<code>抽象类的非抽象子类必须实现父类的抽象方法.</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(<span class=\"type\">int</span> age, String name)</span> &#123; <span class=\"built_in\">this</span>.name = name; <span class=\"built_in\">this</span>.age = age;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">intro</span><span class=\"params\">()</span>; <span class=\"comment\">// 抽象方法没有实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">Programmer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Programmer</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123; <span class=\"built_in\">super</span>(age, name);&#125; <span class=\"comment\">// 调用父类构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">intro</span><span class=\"params\">()</span> &#123;       <span class=\"comment\">// 实现父类抽象方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am a &quot;</span> + <span class=\"built_in\">this</span>.getClass().getSimpleName() + <span class=\"string\">&quot;, and my name is &quot;</span>+ name + <span class=\"string\">&quot;, &quot;</span> +  age + <span class=\"string\">&quot; years old.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Programmer</span> <span class=\"variable\">slacr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Programmer</span>(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">      slacr.intro();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// I am a Programmer, and my name is slacr, 19 years old.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象转换\">对象转换<a title=\"#对象转换\" href=\"#对象转换\"></a></h2>\n<p>子类对象和父类对象在一定条件下也可以相互转换，这种类型转换一般称为对象转换或造型 (casting)。对象转换也有自动转换和强制转换之分.<br>\n子类对象可以作为父类对象使用. 和C++中一样. 这种转换称为向上转换 (up casting)。向上转换指的是在类的层次结构图中，位于下方的类(或接口)对象都可以自动转换为位于上方的类(或接口)对象.<br>\n也可以将一个父类对象转换成子类对象，这时需要使用强制类型转换。强制类型转换需要使用转换运算符&quot;()&quot;。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> salary;</span><br><span class=\"line\">    Father(<span class=\"type\">int</span> salary)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Father.parametric_constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Father.default_constructor&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.salary = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;This is the 996 foobar&quot;</span> + <span class=\"string\">&quot;, from which I could get &quot;</span> + salary + <span class=\"string\">&quot; a month.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> score;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Son.default_constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">(<span class=\"type\">int</span> score)</span> &#123;         <span class=\"comment\">// 子类没写super(), 会自动调用父类的无参构造</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Son.parametric_constructor&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doExam</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I got &quot;</span> + score + <span class=\"string\">&quot;, but I hate exam.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Father</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        <span class=\"type\">Son</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        f.work();</span><br><span class=\"line\">        s.doExam();</span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">ff</span> <span class=\"operator\">=</span> s;    <span class=\"comment\">// 父类接受子类对象,  自动隐式类型转换</span></span><br><span class=\"line\">        ff.work();        <span class=\"comment\">// 在构造子类时调用的父类是无参构造, salary = 0;</span></span><br><span class=\"line\">        <span class=\"type\">Son</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> (Son)f;  <span class=\"comment\">// 父类强制显示转换为子类， 写法没问题， 但不能完成转换，异常</span></span><br><span class=\"line\">        ss.doExam();       <span class=\"comment\">// 无法调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305092159458.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"instanceof-运算符\">instanceof 运算符<a title=\"#instanceof-运算符\" href=\"#instanceof-运算符\"></a></h2>\n<p>测试一个实例是否是某种类型的实例.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Father</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Father</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"type\">Son</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    System.out.println( s <span class=\"keyword\">instanceof</span> Father );</span><br><span class=\"line\">    System.out.println( f <span class=\"keyword\">instanceof</span> Father );</span><br><span class=\"line\">    System.out.println(s <span class=\"keyword\">instanceof</span> Object);</span><br><span class=\"line\">    System.out.println(f <span class=\"keyword\">instanceof</span> Son);</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多态与动态绑定\">多态与动态绑定<a title=\"#多态与动态绑定\" href=\"#多态与动态绑定\"></a></h2>\n<p>多态 (polymorphism) 就是多种形式，是指Java 程序中一个类或多个类中可以定义多个同名方法，这多个同名方法完成的操作不同.<br>\nJava 语言支持两种类型的多态：<br>\n(1)静态多态：也叫<code>编译时多态</code>，是通过方法重载实现的。<br>\n(2)动态多态：也叫<code>运行时多态</code>，是通过方法覆盖实现的。</p>\n<p>将方法调用与方法体关联起来称方法绑定 (binding)。若在程序执行前进行绑定，叫前期绑定.若在程序运行时根据对象的类型进行绑定，则称后期绑定或动态绑定。Java 中除static方法和 final方法外都是后期绑定.</p>\n<p>对重载的方法，Java运行时系统根据传递给方法的参数个数和类型确定调用哪个方法，而对覆盖的方法，运行时系统根据实例类型决定调用哪个方法。对子类的一个实例，如果子类覆盖了父类的方法，运行时系统调用子类的方法，如果子类继承了父类的方法，则运行时系统调用父类的方法.</p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>final 修饰的 class不能被继承, 其中的方法隐含为final修饰 ; final修饰的方法不能被重写; final修饰的变量不可更改.</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n","prev":{"title":"[Java笔记]常用核心类内部类枚举注解","link":"2023/05/09/[Java笔记]常用核心类内部类枚举注解"},"next":{"title":"[PicGo]Failedwitherrorcode500","link":"2023/05/09/[PicGo]Failedwitherrorcode500"},"plink":"https://s1acr.github.io/2023/05/09/[Java笔记]继承&多态/","toc":[{"id":"继承","title":"继承","index":"1","children":[{"id":"覆盖(overriding)","title":"覆盖(overriding)","index":"1.1"},{"id":"super关键字","title":"super关键字","index":"1.2"}]},{"id":"访问修饰符","title":"访问修饰符","index":"2"},{"id":"抽象类(abstract-class)","title":"抽象类(abstract class)","index":"3"},{"id":"对象转换","title":"对象转换","index":"4"},{"id":"instanceof-运算符","title":"instanceof 运算符","index":"5"},{"id":"多态与动态绑定","title":"多态与动态绑定","index":"6"},{"id":"知识点","title":"知识点","index":"7"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"May 9, 2023","updated":"May 9, 2023"},"reading_time":"1893 words in 13 min"}