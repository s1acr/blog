{"title":"[C++Lab]","date":"2023-04-16T00:00:00.000Z","date_formatted":{"ll":"Apr 16, 2023","L":"04/16/2023","MM-DD":"04-16"},"link":"2023/04/16/[C++Lab]","comments":true,"categories":["C++"],"updated":"2023-04-16T00:00:00.000Z","content":"<blockquote>\n<p>C++实验课</p>\n</blockquote>\n<h2 id=\"lab2_3\">lab2_3<a title=\"#lab2_3\" href=\"#lab2_3\"></a></h2>\n<h3 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h3>\n<p>补充实验：成绩表里找同学<br>\n【问题描述】<br>\n编写一个程序，读入 N 个同学的姓名和语数外三门功课的单科成绩，对其按照一定的排序规则排序形成一张成绩表（先按总分从高到低排序，总分相同则按语文成绩由高到低排序，仍然相同则按数学成绩由高到低排序，若总分和单科成绩均相同则最后按姓名的字典序排序）。最后给定一个数字 K(K&lt;=N) ，输出在这张排好序的成绩表中位置在第 K 位的同学的姓名和总分。<br>\n字典序举例说明：<br>\nabc &gt; abd<br>\na &gt; aa<br>\n要求：用C++对象数组表示学生数据。采用多文件结构，类的声明放在头文件如student.h，类的实现放在源文件如student.cpp。<br>\n【输入形式】<br>\n第一行输入一个正整数 N(1&lt;=N&lt;=1024)，代表接下来将录入 N 个学生的成绩。<br>\n接下来 N 行录入 N 条学生的成绩记录，每条记录依次为姓名，语文成绩，数学成绩，英语成绩，这四个字段以空格分隔。姓名为字符串（仅包含小写字母，不含空格，长度&lt;=19），学生之间不会重名。三科成绩均为整数（0~100）。<br>\n最后输入一个正整数 K(1&lt;=K&lt;=N)，代表需要在成绩表中从前往后找到的位置。<br>\n【输出形式】<br>\n在成绩表中从前往后处在第 K 位的同学的姓名和总分，中间以空格分隔。<br>\n【样例输入1】<br>\n2<br>\ntom 90 91 92<br>\nlucy 91 90 92<br>\n1<br>\n【样例输出1】<br>\nlucy 273<br>\n【样例输入2】<br>\n4<br>\nlily 90 100 88<br>\njack 87 79 95<br>\nhanz 90 89 71<br>\ndavid 90 89 71<br>\n4<br>\n【样例输出2】<br>\nhanz 250</p>\n<h3 id=\"解答\">解答<a title=\"#解答\" href=\"#解答\"></a></h3>\n<figure class=\"highlight plaintext\"><figcaption><span>lab2_3_Stu.h C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma once</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">class Student &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\tint yu;</span><br><span class=\"line\">\tint shu;</span><br><span class=\"line\">\tint wai;</span><br><span class=\"line\">\tint sum;</span><br><span class=\"line\">\tStudent() &#123;&#125;</span><br><span class=\"line\">\tStudent(string name, int yu, int shu, int wai) :name(name), yu(yu), shu(shu), wai(wai) &#123;&#125;</span><br><span class=\"line\">\tvoid setInfo();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>lab2_3_Stu.cpp C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;lab2_3_Stu.h&quot;</span><br><span class=\"line\">void Student::setInfo() &#123;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;name;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;yu;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;shu;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;wai;</span><br><span class=\"line\">\tsum = this-&gt;yu + this-&gt;wai + this-&gt;shu;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>lab2_3.cpp C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &quot;lab2_3_Stu.h&quot;</span><br><span class=\"line\">class Mypred &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool operator()(Student s1, Student s2) &#123;</span><br><span class=\"line\">\t\tif (s1.sum == s2.sum) &#123;</span><br><span class=\"line\">\t\t\treturn s1.name &lt; s2.name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\treturn s1.sum &gt; s2.sum;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class ScoreSheet &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numOfStu;</span><br><span class=\"line\">\tvector&lt;Student&gt; vstus;</span><br><span class=\"line\">\tvoid initSheet() &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; numOfStu;</span><br><span class=\"line\">\t\tvstus.resize(numOfStu);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; numOfStu; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tStudent stu;</span><br><span class=\"line\">\t\t\tstu.setInfo();</span><br><span class=\"line\">\t\t\tvstus[i] = stu;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsort(vstus.begin(), vstus.end(), Mypred());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvoid queeryCode() &#123;</span><br><span class=\"line\">\t\tint code;</span><br><span class=\"line\">\t\tcin &gt;&gt; code;</span><br><span class=\"line\">\t\tcout &lt;&lt; vstus[code-1].name &lt;&lt; &quot; &quot; &lt;&lt; vstus[code-1].sum &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tScoreSheet ss;</span><br><span class=\"line\">\tss.initSheet();</span><br><span class=\"line\">\tss.queeryCode();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分文件, 我这里只分了一个<br>\n<strong>分文件方法:</strong><br>\n.h 中放声明, .cpp中放实现, 主函数中引用 .h<br>\n或者.hpp中放声明和实现, 主函数中引用 .hpp<br>\n这题很典型, vector容器储存, sort算法排序传个谓词进去, 不同排序的方式由谓词实现.</p>\n<h2 id=\"lab3_1\">lab3_1<a title=\"#lab3_1\" href=\"#lab3_1\"></a></h2>\n<h3 id=\"题目-1\">题目<a title=\"#题目-1\" href=\"#题目-1\"></a></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写一个学生和教师数据输入和显示程序。其中，学生数据有编号、姓名、班级和成绩，教师数据有编号、姓名、职称和部门。</span><br><span class=\"line\">要求：</span><br><span class=\"line\">（1）将编号、姓名输入和显示设计成一个类person；</span><br><span class=\"line\">（2）设计类person的派生类：学生类student和教师类teacher；</span><br><span class=\"line\">（3）主函数中分别定义一个学生对象和教师对象进行测试。</span><br><span class=\"line\">【输入形式】</span><br><span class=\"line\">程序参考的输入（输入数据前面为提示文字）：</span><br><span class=\"line\">Input id:1</span><br><span class=\"line\">Input name:zhangsan</span><br><span class=\"line\">Input class:1</span><br><span class=\"line\">Input score:90</span><br><span class=\"line\">Input id:2</span><br><span class=\"line\">Input name:lisi</span><br><span class=\"line\">Input title:teacher</span><br><span class=\"line\">Input department:computer</span><br><span class=\"line\">【输出形式】</span><br><span class=\"line\">程序参考的输出：</span><br><span class=\"line\">Student&#x27;s info:</span><br><span class=\"line\">Id:1</span><br><span class=\"line\">Name:zhangsan</span><br><span class=\"line\">Class:1</span><br><span class=\"line\">Score:90</span><br><span class=\"line\">Teacher&#x27;s info:</span><br><span class=\"line\">Id:2</span><br><span class=\"line\">Name:lisi</span><br><span class=\"line\">Title:teacher</span><br><span class=\"line\">Department:computer</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答-1\">解答<a title=\"#解答-1\" href=\"#解答-1\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input  id:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; id;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input  name:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Id:&quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name:&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string  id;</span><br><span class=\"line\">    string  name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 填充部分</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">student</span> : <span class=\"keyword\">public</span> person&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">student</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input class:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; classNum;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input score:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Student&#x27;s info:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        person::<span class=\"built_in\">display</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Class:&quot;</span> &lt;&lt; classNum &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Score:&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string classNum;</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">teacher</span> : <span class=\"keyword\">public</span> person &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">teacher</span>() &#123; </span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input title:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; title;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input department:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Teacher&#x27;s info:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        person::<span class=\"built_in\">display</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Title:&quot;</span> &lt;&lt; title &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Department:&quot;</span> &lt;&lt; department &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string title;</span><br><span class=\"line\">    string department;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    student  stu;</span><br><span class=\"line\">    teacher  tea;</span><br><span class=\"line\">    stu.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    tea.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一开始想了半天调用父类的private成员要用友元, 又不能更改题目, 后来才发现不是给了公共display接口么. 写派生类多关注公共接口, 私有的不需要管.</p>\n<h2 id=\"lab3_2\">lab3_2<a title=\"#lab3_2\" href=\"#lab3_2\"></a></h2>\n<h3 id=\"题目-2\">题目<a title=\"#题目-2\" href=\"#题目-2\"></a></h3>\n<p>补充：字符串统计排序，继承系统string类<br>\n【问题描述】<br>\n编写一个程序，接收用户输入的一个字符串(可以包含空格)，统计其中所有出现过的所有字符，并按照频率高低的顺序排列输出。频率相同的字符按输入顺序输出。<br>\n【输入形式】<br>\n用户在第一行输入一个字符串，以回车结束输入。<br>\n【输出形式】<br>\n程序统计字符串中出现的所有字符，然后按照字符出现频率大小排序输出，频率相同时，按输入顺序输出。输出形式规定为每行输出4个字符数据，输出格式为：字符-出现次数。每个字符-出现次数输出中间用一个空格分隔，每行末尾没有空格。程序输出结尾有一个回车。<br>\n【样例输入】<br>\nThe job requires an agile mind.<br>\n【样例输出】<br>\n#-5 e-4 i-3 r-2<br>\na-2 n-2 T-1 h-1<br>\nj-1 o-1 b-1 q-1<br>\nu-1 s-1 g-1 l-1<br>\nm-1 d-1 .-1               #表示空格(在程序请输出空格，而不是字符&quot;#&quot;，这里只是表示而已。)<br>\n【样例说明】<br>\n用户首先输入字符串The job requires an agile mind. 程序统计完毕之后按照每行4个统计结果输出，字符串中有5个空格，所以输出为#-5,#表示空格。字符’b’和’T’出现次数同为1，因为输入时’b’先于’T’输入，所以输出时也先打印’b’的统计信息。</p>\n<h3 id=\"解答-2\">解答<a title=\"#解答-2\" href=\"#解答-2\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">MyChar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyChar</span>() :<span class=\"built_in\">num</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"type\">char</span>  ch;        <span class=\"comment\">//字符</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>  num;        <span class=\"comment\">//出现次数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">MyString</span> : <span class=\"keyword\">public</span>  string</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">input</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getline</span>(cin, *<span class=\"keyword\">this</span>);  <span class=\"comment\">//输入一行，支持空格</span></span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">putchar</span><span class=\"params\">(<span class=\"type\">char</span>  ch)</span></span>;  <span class=\"comment\">//放入字符</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">output</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tMyChar  chars[<span class=\"number\">300</span>];  <span class=\"comment\">//字符计数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>  sum; <span class=\"comment\">//已有总数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">MyString::putchar</span><span class=\"params\">(<span class=\"type\">char</span>  ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 存在有这个字符的话num++</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sum; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (chars[i].ch == ch)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tchars[i].num++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//没有这个字符的话初始化这个字符</span></span><br><span class=\"line\">\tchars[sum].ch = ch;</span><br><span class=\"line\">\tchars[sum].num++;</span><br><span class=\"line\">\tsum++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 填空一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">MyString::compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//分析字符出现频次并排序</span></span><br><span class=\"line\">\t<span class=\"comment\">//遍历输入的字符串 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (*<span class=\"keyword\">this</span>).<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>((*<span class=\"keyword\">this</span>)[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//按照字符个数排序chars[], 冒泡排序, 如果两个字符数量相同, 冒泡排序是安全的, 不会改变位置.</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sum - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; sum - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (chars[j].num &lt; chars[j + <span class=\"number\">1</span>].num) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\t\tMyChar temp = chars[j];</span><br><span class=\"line\">\t\t\t\tchars[j] = chars[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tchars[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 填空二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">MyString::output</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//输出分析结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= sum; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; chars[i - <span class=\"number\">1</span>].ch &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; chars[i - <span class=\"number\">1</span>].num &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span>) cout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使得程序正确执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyString  s;</span><br><span class=\"line\">\ts.<span class=\"built_in\">input</span>();</span><br><span class=\"line\">\ts.<span class=\"built_in\">compute</span>();</span><br><span class=\"line\">\ts.<span class=\"built_in\">output</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要看懂每一个函数是做什么, <code>getline(cin, *this);</code>, 用到了多态, *this是string的派生类, 父类指针指向子类对象.<br>\nchars[]中的是引用对象, 交换位置的时候交换引用就行了, 而不是值交换.</p>\n<h2 id=\"lab5\">lab5<a title=\"#lab5\" href=\"#lab5\"></a></h2>\n<p>两道分析题</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>   <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>   <span class=\"string\">&lt;complex&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span>   std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Base-ctor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Base</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Base-dtor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;Base::f(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;Base::f(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> i = <span class=\"number\">10</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;Base::g()&quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Derived</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Derived-ctor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Derived</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Derived-dtor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(complex&lt;<span class=\"type\">double</span>&gt;)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived::f(complex)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span>   i = <span class=\"number\">20</span>)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived::g()&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class=\"line\">    Base b;</span><br><span class=\"line\">    Derived d;</span><br><span class=\"line\">    Base* pb = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\">    b.<span class=\"built_in\">f</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    d.<span class=\"built_in\">f</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    pb-&gt;<span class=\"built_in\">f</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">g</span>();</span><br><span class=\"line\">    d.<span class=\"built_in\">g</span>();</span><br><span class=\"line\">    pb-&gt;<span class=\"built_in\">g</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> pb;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">分析： </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">8                         // vfptr 64位 占 8 字节, 32位占 4 字节</span></span><br><span class=\"line\"><span class=\"comment\">8                          // 同上</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor                   //  基类构造</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor                   // 派生类先构造基类再构造派生类</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor        </span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor                      // new 创建派生类再堆区， 同上先构造基类再构造派生类</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Base::f(double)                 // 本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Derived::f(complex)             //  本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Base::f(double)                 // pb是基类指针指向派生类对象，调用f函数，先再Derived类中的Base中匹配发现无， 再利用继承的vfptr向vftable中寻找发现匹配基类中的函数， 调用, 基类f函数没有重写. 虚表中还是基类函数的地址 </span></span><br><span class=\"line\"><span class=\"comment\">Base::g()10                     //  本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Derived::g()20                   //   本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Derived::g()10                    //   pb依旧先在Derived中的Base下寻找g发现无, 利用继承的vfptr向vftable中寻找, 因为Derived重写了Base的g, 继承时基类虚表的g函数地址被改变, 从而调用派生类的g</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor                           // delete释放, pb调用派生类下基类析构</span></span><br><span class=\"line\"><span class=\"comment\">Derived-dtor                        // 编译器自动调用清理内存, 按主函数调用栈中本地变量的创建顺序相反, 析构d, 先析构派生类再析构基类 </span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor                           //析构b</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>   <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>   <span class=\"keyword\">namespace</span>   std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>   <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() :<span class=\"built_in\">data</span>(count)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base-ctor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     ~<span class=\"built_in\">Base</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base-dtor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        --count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Base::count;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Derived</span>() :<span class=\"built_in\">data</span>(count), <span class=\"built_in\">data1</span>(data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived-ctor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Derived</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived-dtor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        --count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\">    <span class=\"type\">int</span> data1;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Derived::count = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class=\"line\">    Base* pb = <span class=\"keyword\">new</span> Derived[<span class=\"number\">3</span>];</span><br><span class=\"line\">    cout &lt;&lt; pb[<span class=\"number\">2</span>].data &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; ((<span class=\"built_in\">static_cast</span>&lt;Derived*&gt;(pb)) + <span class=\"number\">2</span>)-&gt;data1 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] pb;</span><br><span class=\"line\">    cout &lt;&lt; Base::count &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; Derived::count &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">4           // static 静态变量, 在编译时确定内存, 不包括在类中, Base中含有一个int, 分配的大小为 4 字节, </span></span><br><span class=\"line\"><span class=\"comment\">12          // Base中的data, 和Derived中的data, data1, 三个int , 12字节</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor       // new 堆区初始化Derived实例, 三次, 先构造基类在构造自身</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">10              // pb基类指针指向派生类对象, 基类在派生类的内存分布在最前, pb访问到的是派生类的成员, 并且有偏移量限制, 不能访问派生类的内存.</span></span><br><span class=\"line\"><span class=\"comment\">-842150451      // static_cast将pb转换为Derived*, 这是可以的, 或者用更安全的dynamic_cast, 只要改变偏移量, 不过基类要改成多态类型的抽象类, </span></span><br><span class=\"line\"><span class=\"comment\">//  这题有点问题, 搞不懂为什么要用data初始化data1, data而又没有初始化值, 所以是不确定的内存值, 初始化了data1就是正常值</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor       // 调用pb指向的Derived中Base下的析构三次</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor       // </span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor</span></span><br><span class=\"line\"><span class=\"comment\">0               // 静态变量默认初始化0</span></span><br><span class=\"line\"><span class=\"comment\">13              // Derived 构造三次 13, 没有调用Derived析构.内存泄漏,  建议把基类析构声明成虚函数就可以动态绑定按顺序析构派生类.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"lab6\">lab6<a title=\"#lab6\" href=\"#lab6\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">CFraction</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span>  nume;    <span class=\"comment\">//  分子</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>  deno;    <span class=\"comment\">//  分母</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">CFraction</span>(<span class=\"type\">int</span>  nu = <span class=\"number\">0</span>, <span class=\"type\">int</span>  de = <span class=\"number\">1</span>) :<span class=\"built_in\">nume</span>(nu), <span class=\"built_in\">deno</span>(de)  &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">simplify</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//输入输出的重载</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span>  istream  &amp;<span class=\"keyword\">operator</span>&gt;&gt;(istream  &amp;in, CFraction  &amp;x);</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span>  ostream  &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream  &amp;out, CFraction  x);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ldeno = deno * c2.deno;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> lnume = nume * c2.deno + c2.nume * deno;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">temp</span><span class=\"params\">(lnume, ldeno)</span></span>;</span><br><span class=\"line\">\t\t\ttemp.<span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相加，结果要化简</span></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ldeno = deno * c2.deno;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> lnume = nume * c2.deno - c2.nume * deno;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">temp</span><span class=\"params\">(lnume, ldeno)</span></span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\ttemp.<span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相减，结果要化简</span></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ldeno = deno * c2.deno;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> lnume = nume * c2.nume;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">temp</span><span class=\"params\">(lnume, ldeno)</span></span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\ttemp.<span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相乘，结果要化简</span></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>/(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">rotate</span><span class=\"params\">(c2.deno, c2.nume)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>*rotate;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相除，结果要化简</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream  &amp;in, CFraction  &amp;x)&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp;</span><br><span class=\"line\">\tin &gt;&gt; x.nume &gt;&gt; temp &gt;&gt; x.deno;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp;  <span class=\"keyword\">operator</span>&lt;&lt;(ostream  &amp;out, CFraction  x)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x.deno == <span class=\"number\">1</span>)&#123; out &lt;&lt; x.nume &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> out &lt;&lt; (x.nume &lt; <span class=\"number\">0</span> ? showpos : noshowpos) &lt;&lt; x.nume &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; noshowpos &lt;&lt; x.deno;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\ta = <span class=\"built_in\">abs</span>(a);</span><br><span class=\"line\">\tb = <span class=\"built_in\">abs</span>(b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tr = a % b;</span><br><span class=\"line\">\t\ta = b;</span><br><span class=\"line\">\t\tb = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CFraction::simplify</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> common = <span class=\"built_in\">gcd</span>(deno, nume);</span><br><span class=\"line\">\tnume /= common;</span><br><span class=\"line\">\tdeno /= common;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator+(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint deno = c1.deno * c2.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint nume = c1.nume * c2.deno + c2.nume * c1.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction temp(nume, deno);</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.simplify();</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相加，结果要化简</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator-(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint deno = c1.deno * c2.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint nume = c1.nume * c2.deno - c2.nume * c1.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction temp(nume, deno);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.simplify();</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相减，结果要化简</span></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator*(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint deno = c1.deno * c2.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint nume = c1.nume * c2.nume;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction temp(nume, deno);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.simplify();</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相乘，结果要化简</span></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator/(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction rotate(c2.deno, c2.nume);</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn c1*rotate;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相除，结果要化简</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCFraction  x, y, s;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Input x: &quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; x;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Input y: &quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; y;</span><br><span class=\"line\">\ts = x + y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x+y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\ts = x - y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x-y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\ts = x*y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x*y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\ts = x / y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x/y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Matrix</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) :<span class=\"built_in\">i</span>(i), <span class=\"built_in\">j</span>(j) &#123;</span><br><span class=\"line\">\t\tv.<span class=\"built_in\">resize</span>(i * j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 赋值运算</span></span><br><span class=\"line\">\tMatrix&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(m.v.<span class=\"built_in\">begin</span>(), m.v.<span class=\"built_in\">end</span>(), v.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t\tj = m.j;</span><br><span class=\"line\">\t\ti = m.i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 &lt;&lt; </span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>; p &lt; m.i; p++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> q = <span class=\"number\">0</span>; q &lt; m.j; q++) &#123;</span><br><span class=\"line\">\t\t\t\tout &lt;&lt; m.v[p * m.j + q] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tout &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 &gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> istream&amp; <span class=\"keyword\">operator</span>&gt;&gt; (istream&amp; in, Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m.v.<span class=\"built_in\">size</span>(); i++) cin &gt;&gt; m.v[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> in;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 += </span></span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>+=(<span class=\"type\">const</span> Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i != m.i || j != m.j) cout &lt;&lt; <span class=\"string\">&quot;ERROR!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m.v.<span class=\"built_in\">size</span>(); i++) v[i] += m.v[i];</span><br><span class=\"line\">\t\t\tcout &lt;&lt; *<span class=\"keyword\">this</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 *=</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>*=(<span class=\"type\">const</span> Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j != m.i) cout &lt;&lt; <span class=\"string\">&quot;ERROR!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tMatrix <span class=\"built_in\">res</span>(i, m.j);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 矩阵乘, 比如 ij 矩阵 乘 jk 矩阵得到 ik 矩阵, 求ik矩阵只需遍历i行k列, 然后遍历j次求和得到 m[i][k]   </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>; p &lt; res.i; p++) &#123;   </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> q = <span class=\"number\">0</span>; q &lt;res.j; q++) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = <span class=\"number\">0</span>; r &lt; j; r++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres.v[p * res.j + q] = res.v[p * res.j + q] + v[p * j + r] * m.v[r * m.j + q];</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">copy</span>(res.v.<span class=\"built_in\">begin</span>(), res.v.<span class=\"built_in\">end</span>(), v.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t\t\tcout &lt;&lt; *<span class=\"keyword\">this</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载()</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v[a * j + b];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> row1, col1, row2, col2;</span><br><span class=\"line\">\tcin &gt;&gt; row1 &gt;&gt; col1;</span><br><span class=\"line\">\t<span class=\"function\">Matrix <span class=\"title\">m1</span><span class=\"params\">(row1, col1)</span></span>;</span><br><span class=\"line\">\tcin &gt;&gt; m1;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; row2 &gt;&gt; col2;</span><br><span class=\"line\">\t<span class=\"function\">Matrix <span class=\"title\">m2</span><span class=\"params\">(row2, col2)</span></span>;</span><br><span class=\"line\">\tcin &gt;&gt; m2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">m1</span>(row1 / <span class=\"number\">2</span>, col1 / <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tm1 *= m2;</span><br><span class=\"line\">\tm1 += m2;</span><br><span class=\"line\">\tm1 = m2;</span><br><span class=\"line\">\tcout &lt;&lt; m1 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"[博客健设六]RSS订阅","link":"2023/04/18/[博客健设六]RSS订阅"},"next":{"title":"[C++Task]","link":"2023/04/16/[C++Task]"},"plink":"https://s1acr.github.io/2023/04/16/[C++Lab]/","toc":[{"id":"lab2_3","title":"lab2_3","index":"1","children":[{"id":"题目","title":"题目","index":"1.1"},{"id":"解答","title":"解答","index":"1.2"}]},{"id":"lab3_1","title":"lab3_1","index":"2","children":[{"id":"题目-1","title":"题目","index":"2.1"},{"id":"解答-1","title":"解答","index":"2.2"}]},{"id":"lab3_2","title":"lab3_2","index":"3","children":[{"id":"题目-2","title":"题目","index":"3.1"},{"id":"解答-2","title":"解答","index":"3.2"}]},{"id":"lab5","title":"lab5","index":"4"},{"id":"lab6","title":"lab6","index":"5"}],"reward":true,"copyright":{"author":"slacr_","license":"<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img src = \"/lib/cc-by-nc-sa.svg\">CC BY-NC-ND 4.0</a>","published":"April 16, 2023","updated":"April 16, 2023"},"reading_time":"4116 words in 27 min"}