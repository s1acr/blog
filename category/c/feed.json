{
    "version": "https://jsonfeed.org/version/1",
    "title": "slacr_'s blog • All posts by \"c\" category",
    "description": "slacr_ blog self blog website record coding githubpages",
    "home_page_url": "https://s1acr.github.io",
    "items": [
        {
            "id": "https://s1acr.github.io/2023/04/22/[C]%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "https://s1acr.github.io/2023/04/22/[C]%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "[C]常用排序算法",
            "date_published": "2023-04-22T00:00:00.000Z",
            "content_html": "<h2 id=\"冒泡排序\">冒泡排序<a title=\"#冒泡排序\" href=\"#冒泡排序\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bubble_sort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择排序\">选择排序<a title=\"#选择排序\" href=\"#选择排序\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">selection_sort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min = i; <span class=\"comment\">// 记录最小变量的标志为i</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i+<span class=\"number\">1</span>; j &lt; len; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">\t\t\t\tmin = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (min != i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果确实有更小的值</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 完成一次交换使当前位置顺序正确</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\">\t\t\tarr[i] = arr[min];</span><br><span class=\"line\">\t\t\tarr[min] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入排序\">插入排序<a title=\"#插入排序\" href=\"#插入排序\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//void insertion_sort(int arr[], int len) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tfor (int i = 1; i &lt; len; i++)</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tint temp = arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tint j;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tfor ( j = i; j &gt; 0 &amp;&amp; arr[j-1] &gt; temp ; j--)</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tarr[j] = arr[j-1];</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tarr[j] = temp;</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">insertion_sort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j - <span class=\"number\">1</span>] &gt; arr[j]; j--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\tarr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\tarr[j - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"希尔排序\">希尔排序<a title=\"#希尔排序\" href=\"#希尔排序\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 希尔排序---在插入排序的基础上</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">shell_sort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> gap = len &gt;&gt; <span class=\"number\">1</span>; gap &gt; <span class=\"number\">0</span>; gap = gap &gt;&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ( j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp ; j = j -gap)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tarr[j + gap] = arr[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j != i - gap) &#123;</span><br><span class=\"line\">\t\t\t\tarr[j + gap] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并排序\">合并排序<a title=\"#合并排序\" href=\"#合并排序\"></a></h2>\n<p><code>非递归</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">min</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &lt; y ? x : y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* a = arr;</span><br><span class=\"line\">    <span class=\"type\">int</span>* b =  (<span class=\"type\">int</span>*)<span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"type\">int</span> seg, start;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (seg = <span class=\"number\">1</span>; seg &lt; len; seg = seg*<span class=\"number\">2</span>) &#123;  <span class=\"comment\">// 每次的片段大小， 从1开始;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (start = <span class=\"number\">0</span>; start &lt; len; start = start + seg * <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// 每次将两个相同大小的片段排好, </span></span><br><span class=\"line\">            <span class=\"type\">int</span> low = start, mid = min(start + seg, len), high = min(start + seg * <span class=\"number\">2</span>, len);  <span class=\"comment\">// 最后一次只用排第一段</span></span><br><span class=\"line\">            <span class=\"type\">int</span> k = low;</span><br><span class=\"line\">            <span class=\"type\">int</span> start1 = low, end1 = mid;</span><br><span class=\"line\">            <span class=\"type\">int</span> start2 = mid, end2 = high;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class=\"line\">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start1 &lt; end1)</span><br><span class=\"line\">                b[k++] = a[start1++];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start2 &lt; end2)</span><br><span class=\"line\">                b[k++] = a[start2++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>* temp = a;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = temp;           <span class=\"comment\">// 实现将部分排列好的数组重新给a, b是用来摆放的容器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a != arr) &#123;          <span class=\"comment\">// 如果a指向的是临时创建的容器, 说明只完成了奇数次装填, 这里要将正确结果返回给装载到arr也就是b中</span></span><br><span class=\"line\">                                <span class=\"comment\">// b = a可以没有,也就是让他指会原来空间, 直接让编译器释放掉a b就行</span></span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">            b[i] = a[i];</span><br><span class=\"line\">        b = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>递归</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">merge_sort_recursive</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> reg[], <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (start &gt;= end) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = end - start; </span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = (len &gt;&gt; <span class=\"number\">1</span>) + start;</span><br><span class=\"line\">\t<span class=\"type\">int</span> start1 = start;</span><br><span class=\"line\">\t<span class=\"type\">int</span> end1 = mid;</span><br><span class=\"line\">\t<span class=\"type\">int</span> start2 = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> end2 = end;</span><br><span class=\"line\">\t<span class=\"type\">int</span> k = start;</span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, start1, end1);</span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, start2, end2);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class=\"line\">\t\treg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start1 &lt;= end1) &#123;</span><br><span class=\"line\">\t\treg[k++] = arr[start1++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start2 &lt;= end2) &#123;</span><br><span class=\"line\">\t\treg[k++] = arr[start2++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (k = start; k &lt;= end; k++)</span><br><span class=\"line\">\t\tarr[k] = reg[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> arr[],  <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* reg = (<span class=\"type\">int</span>*)<span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));  <span class=\"comment\">// malloc 申请的内存大小可以是变量, 可以用来代替创建数组, 因为C中数组长度必须是常量</span></span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序\">快速排序<a title=\"#快速排序\" href=\"#快速排序\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span>* x, <span class=\"type\">int</span>* y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = *x;</span><br><span class=\"line\">    *x = *y;</span><br><span class=\"line\">    *y = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort_recursive</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)   <span class=\"comment\">// 数组长度为1停止</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = arr[end];  <span class=\"comment\">// 分隔的值设置为数组最后元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> left = start, right = end - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调整左右元素, 寻找到分隔位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right)</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right)</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(&amp;arr[left], &amp;arr[right]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断作为分隔的值应该放在哪一边, 如果比左半边的最后一个值小, 就放左边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[left] &gt;= arr[end])</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(&amp;arr[left], &amp;arr[end]);</span><br><span class=\"line\">    <span class=\"comment\">// 否则放右边</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        left++;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 递归</span></span><br><span class=\"line\">    <span class=\"comment\">// 排序区间长度&gt;=0 防止3 2 1 这种全倒序 left = 0, 出现负数, 不加这个条件也行 函数开始会比较.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left) <span class=\"built_in\">quick_sort_recursive</span>(arr, start, left - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort_recursive</span>(arr, left + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort_recursive</span>(arr, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}