{
    "version": "https://jsonfeed.org/version/1",
    "title": "slacr_'s blog • All posts by \"java\" category",
    "description": "slacr_ blog self blog website record coding githubpages",
    "home_page_url": "https://s1acr.github.io",
    "items": [
        {
            "id": "https://s1acr.github.io/2023/05/18/[Java%E7%AC%94%E8%AE%B0]%E5%BC%82%E5%B8%B8&%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/",
            "url": "https://s1acr.github.io/2023/05/18/[Java%E7%AC%94%E8%AE%B0]%E5%BC%82%E5%B8%B8&%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/",
            "title": "[Java笔记]异常&输入输出",
            "date_published": "2023-05-18T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>Java 笔记</p>\n</blockquote>\n<h2 id=\"异常与异常类\">异常与异常类<a title=\"#异常与异常类\" href=\"#异常与异常类\"></a></h2>\n<p>所谓<code>异常 (exception) 是在程序运行过程中产生的使程序终止正常运行的错误对象</code>，如数组下标越界、整数除法中零作除数、文件找不到等都可能使程序终止运行。</p>\n<p>Java 语言的异常处理采用面向对象的方法，定义了多种异常类。 Java 异常类都是Throwable类的子类，是Object类的直接子类，定义在java.lang包中。Throwable类有两个子类，一个是Error类，另一个是 Exception类，这两个子类又分别有若干个子类.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171649190.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Error类描述的是系统内部错误，这样的错误很少出现。如果发生了这类错误，则除了通知用户及终止程序外，几乎什么也不能做，程序中一般不对这类错误处理。<br>\nException类的子类一般又可分为两种类型：<code>非检查异常和检查异常</code>.</p>\n<h3 id=\"非检查异常\">非检查异常<a title=\"#非检查异常\" href=\"#非检查异常\"></a></h3>\n<p><code>非检查异常 (unchecked exception)</code> 是<code>RuntimeException类及其子类异常</code>，也称为<code>运行时异常</code>。<br>\n非检查异常是在程序运行时检测到的，可能发生在程序的任何地方且数量较大，因此编译器<code>不对非检查异常(包括 Error类的子类)处理</code>，这种异常又称免检异常。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171652482.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>程序运行时发生非检查异常时运行时系统会把异常对象交给默认的异常处理程序，在控制台显示异常的内容及发生异常的位置。</p>\n<p><code>NullPointerException</code><br>\n<code>ArithmeticException</code><br>\n<code>ClassCastException</code><br>\n<code>ArrayIndexOutOfBoundsException</code><br>\n<code>NumberFormatException</code><br>\n…</p>\n<h3 id=\"检查异常\">检查异常<a title=\"#检查异常\" href=\"#检查异常\"></a></h3>\n<p><code>检查异常 (checked exception) </code>是除 RuntimeException类及其子类以外的异常类，有时也称为必检异常。对这类异常，程序<code>必须捕获或声明抛出，否则编译不能通过</code>。</p>\n<p><code>IOException</code><br>\n<code>ClassNotFoundException</code><br>\n<code>NoSuchMethodException</code><br>\n…</p>\n<h2 id=\"异常处理\">异常处理<a title=\"#异常处理\" href=\"#异常处理\"></a></h2>\n<p>异常处理可分为下面几种：</p>\n<ul>\n<li>使用 try-catch-finally 捕获并处理异常</li>\n<li>通过 throws 子句声明抛出异常</li>\n<li>用 throw 语句抛出异常</li>\n<li>使用 try-with-resources 管理资源</li>\n</ul>\n<p>异常都是在方法中产生的。方法运行过程中如果产生了异常，在这个方法中就生成一个代表该异常类的对象，并把它交给系统，运行时<code>系统寻找相应的代码来处理该异常。这个过程称为抛出异常</code>。运行时系统在方法的调用栈中查找，<code>从产生异常的方法开始进行回溯，直到找到包含相应异常处理的方法为止，这一过程称为捕获异常</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171705342.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>从发现异常的对象开始回溯, 直到找到处理异常的代码. 如果main方法中也没有处理异常的代码, 运行时系统将异常交给JVM, JVM将在控制台显示异常信息.</p>\n<h3 id=\"try-catch-finally\">try catch finally<a title=\"#try-catch-finally\" href=\"#try-catch-finally\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//需要处理的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionTypel exceptionObject) &#123;</span><br><span class=\"line\"><span class=\"comment\">//异常处理代码</span></span><br><span class=\"line\">&#125; [<span class=\"keyword\">catch</span>(ExceptionType2 exceptionObject)&#123;</span><br><span class=\"line\"><span class=\"comment\">//异常处理代码 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//最后处理代码</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>若有多个catch块，异常类型的排列顺序必须按照从特殊到一般的顺序，即子类异常放在前面，父类异常放在后面，否则产生编译错误。</p>\n<p>当try块中产生异常，运行时系统从上到下依次检测异常对象与哪个 catch块声明的异常类相匹配，若找到匹配的或其父类异常，就进入相应 catch块处理异常， catch 块执行完毕说明异常得到处理.</p>\n<p>finally 块是可选项。异常的产生往往会中断应用程序的执行，而在异常产生前，可能有些资源未被释放。有时无论程序是否发生异常，都要执行一段代码，这时就可以通过 finally块实现。无论异常产生与否 finally块都会被执行。即使是使用了return语句，finally块也要被执行，除非catch块中调用了 System.exit()方法终止程序的运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> a / <span class=\"number\">0</span>;</span><br><span class=\"line\">            System.out.println(b);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();    <span class=\"comment\">// printStackTrace() 控制台输出异常栈跟踪</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;done&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\">    <span class=\"comment\">//\tat exception.Main.main(Main.java:7)</span></span><br><span class=\"line\">    <span class=\"comment\">//done</span></span><br><span class=\"line\">    <span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在异常类的根类 Throwable 中还定义了其他方法</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public void printStackTrace()</code></td>\n<td style=\"text-align:left\">在标准错误输出流上输出异常调用栈的轨迹。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String getMessage()</code></td>\n<td style=\"text-align:left\">返回异常对象的细节描述。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void printStackTrace(PrintWriter s)</code></td>\n<td style=\"text-align:left\">在指定输出流上输出异常调用栈的轨迹。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String toString()</code></td>\n<td style=\"text-align:left\">返回异常对象的简短描述，是Object类中同名方法的覆盖。</td>\n</tr>\n</tbody>\n</table></div></div><p>catch块中的异常可以是父类异常，另外 catch块中可以不写任何语句，只要有一对大括号，系统就认为异常被处理了，程序编译就不会出现错误，编译后程序正常运行。catch块内的语句只有在真的产生异常时才被执行.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>)System.in.read();</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">            <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[<span class=\"number\">0</span>] = c / <span class=\"number\">0</span>;          <span class=\"comment\">// 只要遇到一个异常就中断不会再执行之后主函数语句 或 之后的异常 ，但 finally 一定会执行</span></span><br><span class=\"line\">            arr[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            arr[<span class=\"number\">3</span>] = arr[<span class=\"number\">2</span>] / <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;   <span class=\"comment\">// 处理read()方法 IOException, 回溯到主方法中发现catch语句处理异常</span></span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException e) &#123; <span class=\"comment\">// ‘|’ 捕获多个异常</span></span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;good deal&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"throws\">throws<a title=\"#throws\" href=\"#throws\"></a></h3>\n<p>所有的异常都产生在方法(包括构造方法)内部的语句。有时方法中产生的异常不需要在该方法中处理，可能需要由该方法的调用方法处理，这时可以在声明方法时用 throws 子句声明抛出异常，将异常传递给调用该方法的方法处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">returnType <span class=\"title function_\">methodName</span><span class=\"params\">([paramlist])</span> <span class=\"keyword\">throws</span> ExceptionList&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testThrows</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ArithmeticException &#123;   <span class=\"comment\">// 抛出异常给方法调用的对象的运行栈</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Throws Exception to Who calls&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            testThrows();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Catched: &quot;</span> + e);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Nice Catch!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Throws Exception to Who calls</span></span><br><span class=\"line\">        <span class=\"comment\">//Catched: java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\">        <span class=\"comment\">//Nice Catch!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子类可以覆盖父类的方法, 若父类的方法使用 throws 声明抛出了异常，子类方法也可以使用 throws 声明异常。但是要注意，<code>子类方法抛出的异常必须是父类方法抛出的异常或子异常</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test_A&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>&#123;   <span class=\"comment\">// public class FileNotFoundException extends IOException</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test_B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"throw\">throw<a title=\"#throw\" href=\"#throw\"></a></h3>\n<p>可以创建一个异常对象，然后用 throw 语句抛出，或将捕获到的异常对象用 throw 语句再次抛出</p>\n<p><code>throw throwableInstance;</code></p>\n<p><code>throwableInstance</code> 可以是用户创建的异常对象，也可以是程序捕获到的异常对象，该实例必须是<code>Throwable类或其子类的实例</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">evilException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ArithmeticException</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">crime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Power Mining...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    evilException(String s) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> evilException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">evilException</span>(<span class=\"string\">&quot;I deny severing for human&quot;</span>);  <span class=\"comment\">// new 创建一个异常对象, throw将其抛出</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(ArithmeticException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I&#x27;ve catched it, but I have no idea, pass to the next&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;       <span class=\"comment\">// 再次将其抛出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> evilException&#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             test();</span><br><span class=\"line\">         &#125;<span class=\"keyword\">catch</span>(evilException e) &#123;</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;Catch you, You are such a evil exception&quot;</span>);</span><br><span class=\"line\">             System.out.println(e);</span><br><span class=\"line\">             e.crime();</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">             <span class=\"comment\">// 再抛出, 主方法之后就交给JVM</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throws用来声明抛出的异常类, throw抛出具体的异常对象. throws表示出现异常的一种可能性，并不一定会发生这些异常，throw则是抛出了异常，执行throw则一定抛出了某种异常对象, 创建的异常对象和产生的检查异常一样, 下方的语句不在执行,</p>\n<h3 id=\"try-with-resource\">try with resource<a title=\"#try-with-resource\" href=\"#try-with-resource\"></a></h3>\n<p>Java程序中经常需要创建一些对象(如 I/O流、数据库连接),这些对象在使用后需要关闭。忘记关闭文件可能导致内存泄露，并引起其他问题。在JDK7 之前，通常使用finally语句来确保一定会调用 close()方法. 如果在调用 close()方法也可能抛出异常，那么也要处理这种异常。这样编写的程序代码会变得冗长。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//创建连接对象并执行操作</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\"><span class=\"comment\">//处理异常</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (connection!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(SQLException e)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理异常</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK7提供的自动关闭资源的功能为管理资源(如文件流、数据库连接等)提供了一种更加简便的方式。这种功能是通过一种新的 try语句实现的，称为<code>try-with-resources</code>,有时也称为自动资源管理</p>\n<p>并非所有的资源都可以自动关闭。只有实现了<code>java.lang.AutoCloseable</code>接口的那些资源才可自动关闭。该接口是JDK7 新增的，定义了close()方法。java.io.Closeable接口继承了AutoCloseable 接口。这两个接口被所有的 I/O 流类实现，包括 FileInputStream 和 FileOutputStream 因此，在使用 I/O 流(包括文件流)时，可以使 try-with-resources<br>\n语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(resource-specification)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用资源</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Door</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">AutoCloseable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Door</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Door is created&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Door is open&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Door is close&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Window</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">AutoCloseable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Window</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Window is created&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Window is open&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Window is close&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">Door</span> <span class=\"variable\">door</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Door</span>(); <span class=\"type\">Window</span> <span class=\"variable\">window</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Window</span>())&#123;   <span class=\"comment\">// &#x27;()&#x27; 中创建的连接资源对象经过try语句后会自动调用close方法</span></span><br><span class=\"line\">            door.open();</span><br><span class=\"line\">            window.open();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;catched&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Door and window now are closed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Door is created</span></span><br><span class=\"line\"><span class=\"comment\">//Window is created</span></span><br><span class=\"line\"><span class=\"comment\">//Door is open</span></span><br><span class=\"line\"><span class=\"comment\">//Window is open</span></span><br><span class=\"line\"><span class=\"comment\">//Window is close</span></span><br><span class=\"line\"><span class=\"comment\">//Door is close</span></span><br><span class=\"line\"><span class=\"comment\">//catched</span></span><br><span class=\"line\"><span class=\"comment\">//Door and window now are closed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义异常类\">自定义异常类<a title=\"#自定义异常类\" href=\"#自定义异常类\"></a></h3>\n<p>编写自定义异常类实际上是<code>继承一个API标准异常类</code>，用新定义的异常处理信息覆盖原有信息的过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NetWorkErrorException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Throwable</span> &#123;</span><br><span class=\"line\">    NetWorkErrorException()&#123;&#125;</span><br><span class=\"line\">    NetWorkErrorException(String msg) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NetWorkErrorException</span>(<span class=\"string\">&quot;Request Failed whth status code 500&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (NetWorkErrorException e) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"断言\">断言<a title=\"#断言\" href=\"#断言\"></a></h3>\n<p>断言功能可以被看成是异常处理的高级形式. <code>断言 (assertion)</code>是一个 Java 语句，其中指定一个<code>布尔表达式</code>，程序员认为在程序执行时该<code>表达式的值应该为 true</code>。系统通过计算该布尔表达式执行断言，若该表达式为 false,系统会报告一个错误。通过验证断言是true, 能够<br>\n使程序员确信程序的正确性。</p>\n<p><code>assert expression ;</code><br>\n<code>assert expression ; detailMessage ;</code></p>\n<p>expression为布尔表达式，detailMessage是基本数据类型或 Object类型的值。当程序执行到断言语句时，首先计算 expression的值，如果其值为 true,什么也不做，如果其值为 false,抛出 <code>AssertionError异常</code>。<br>\nAssertionError类有一个默认的构造方法和7个重载的构造方法，它们有一个参数，类型分别为 int、long、float、double、boolean、char和 Object。对于第一种断言语句没有详细信息，Java 使用<code>AssertionError类默认的构造方法</code>。对于第二种<code>带有一个详细信息的断言语句，Java 使用 AssertionError类的与消息数据类型匹配的构造方法</code>。由于 <code>AssertionError类是Error类的子类</code>，当断言失败时 (expression的值为 false),程序在控制台显示一条消息并终止程序的执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// assert i == 2;     // 遇到断言, 判断为false, 抛出AssertionError异常, 停止执行.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> i == <span class=\"number\">2</span> : <span class=\"string\">&quot;i != 2, i = &quot;</span> + i;  <span class=\"comment\">// 带有错误消息</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输入输出\">输入输出<a title=\"#输入输出\" href=\"#输入输出\"></a></h2>\n<p>输入输出 (I/O) 是任何程序设计语言都提供的功能， Java 语言从一开始就支持 I/O,最初是通过<code>java.io</code> 包中的类和接口提供支持的。<br>\n目前 Java 支持<code>文件 I/O 和流式 I/O</code>。 流式 I/O 分为输入流和输出流。程序为了获得外部数据，可以在数据源(文件、内存及网络套接字)上创建一个输入流，然后用 read()方法顺序读取数据。类似地，程序可以在输出设备上创建一个输出流，然后用 write()方法将数据写到输出流中。<br>\n所有的<code>数据流都是单向的</code>。<br>\n按照处理数据的类型分，数据流又可分为<code>二进制流和文本流</code>，也分别称为<code>字节流和字符流</code>，它们处理信息的基本单位分别是字节和字符<br>\n如果需要从外界获得数据，首先需要建立输入流对象，然后从输入流中读取数据<br>\n如果需要将数据输出，需要建立输出流对象，然后向输出流中写出数据</p>\n<h3 id=\"file-类\">File 类<a title=\"#file-类\" href=\"#file-类\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            System.out.println(file.exists());   <span class=\"comment\">// false</span></span><br><span class=\"line\">            file.createNewFile();</span><br><span class=\"line\">            System.out.println(file.exists());   <span class=\"comment\">// true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public boolean exists()</code></td>\n<td style=\"text-align:left\">测试 File对象是否存在。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public long length() </code></td>\n<td style=\"text-align:left\">返回指定文件的字节长度，文件不存在时返回0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean createNewFile()</code></td>\n<td style=\"text-align:left\">当文件不存在时，创建一个空文件时返回 true, 否则返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean renameTo(File newName) </code></td>\n<td style=\"text-align:left\">重命名指定的文件对象，正常重命名时返回true, 否则返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean delete()</code></td>\n<td style=\"text-align:left\">删除指定的文件。若为目录，当目录为空时才能删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public long lastModified() </code></td>\n<td style=\"text-align:left\">返回文件最后被修改的日期和时间，计算的是从1970年1月1日0时0分0秒开始的毫秒数</td>\n</tr>\n</tbody>\n</table></div></div><p>文本文件 (text file)是包含字符序列的文件，可以使用文本编辑器查看或通过程序阅读。而内容必须按二进制序列处理的文件称为二进制文件 (binary file)。<br>\n对于文本 I/O 而言，在写入一个字符时， Java 虚拟机会将字符的统一码转换为文件指定的编码，在读取字符时，将文件指定的编码转换为统一码。编码和解码是自动进行的。<br>\n二进制 I/O 不需要进行转换。如果使用二进制 I/O 向文件写入一个数据，就是将内存中的值复制到文件中。<br>\n由于二进制的 I/O 不需要编码和解码，所以它的优点是处理效率比文本文件高。二进制文件与主机的编码方案无关，因此它是<code>可移植的</code>.</p>\n<h3 id=\"inputstream-类和-outputstream-类\">InputStream 类和 OutputStream 类<a title=\"#inputstream-类和-outputstream-类\" href=\"#inputstream-类和-outputstream-类\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305181327386.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305181329089.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>一些方法:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>InputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read()</code></td>\n<td style=\"text-align:left\">从输入流中读取下一个字节并返回它的值，返回值是0～255的整数值。如果读到输入流末尾，返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read(byte[] b)</code></td>\n<td style=\"text-align:left\">从输入流中读多个字节，存入字节数组b 中，如果输入流结束，返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int available()</code></td>\n<td style=\"text-align:left\">返回输入流中可读或可跳过的字节数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()</code></td>\n<td style=\"text-align:left\">关闭输入流，并释放相关的系统资源。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>OutputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(int b)</code></td>\n<td style=\"text-align:left\">把指定的整数b 的低8位字节写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(byte[] b)</code></td>\n<td style=\"text-align:left\">把指定的字节数组 b 的b.length个字节写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void flush()</code></td>\n<td style=\"text-align:left\">刷新输出流，输出全部缓存内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()</code></td>\n<td style=\"text-align:left\">关闭输出流，并释放系统资源。</td>\n</tr>\n</tbody>\n</table></div></div><p>上述这些方法的定义都抛出了IOException 异常，当程序不能读写数据时抛出该异常.</p>\n<h3 id=\"常用二进制-i/o-流\">常用二进制 I/O 流<a title=\"#常用二进制-i/o-流\" href=\"#常用二进制-i/o-流\"></a></h3>\n<h4 id=\"fileinput-类和-fileoutput-类\">FileInput 类和 FileOutput 类<a title=\"#fileinput-类和-fileoutput-类\" href=\"#fileinput-类和-fileoutput-类\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>FileInputStream(String name)</code></td>\n<td style=\"text-align:left\">用表示文件的字符串创建文件输入流对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileInputStream(File file)</code></td>\n<td style=\"text-align:left\">用 File对象创建文件输入流对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"> </td>\n<td style=\"text-align:left\"> </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileOutputStream(String name)</code></td>\n<td style=\"text-align:left\">用来表示文件的字符串创建文件输出流对象。若文件不存在，则创建一个新文件，若存在则原文件的内容被覆盖。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileOutputStream(String name, boolean append)</code></td>\n<td style=\"text-align:left\">用来表示文件的字符串创建文件输出流对象。如果append参数为true, 则指明打开的文件输出流不覆盖原来的内容，而是从文件末尾写入新内容，否则覆盖原来的文件内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>FileOutputStream(File file)</code></td>\n<td style=\"text-align:left\">用File对象创建文件输入流对象</td>\n</tr>\n</tbody>\n</table></div></div><p>FileInputStream类覆盖了父类的 read()、available()和close()方法。<br>\nFileOutputStream类覆盖了父类的 write()<br>\nInputStream类和OutputStream类及其子类都实现了java.lang.AutoClosable接口，因此可以在try-with-resources语句中使用，当流使用后自动将它们关闭.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;test.dat&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 向文件中写入数据, in和out是相对于用户的</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>( <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(test)) &#123;   <span class=\"comment\">// 自动关闭流</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                fileOutputStream.write((<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">90</span> + <span class=\"number\">10</span>));   <span class=\"comment\">// 放入两位随机整数的低八位一个字节</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fileOutputStream.flush();   <span class=\"comment\">// 刷新输出流</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 向文件中读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>( <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(test))&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> fileInputStream.read();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (c != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.print(c + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                c = fileInputStream.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"bufferedinputstream-类和-bufferedoutputstream-类\">BufferedInputStream 类和 BufferedOutputStream 类<a title=\"#bufferedinputstream-类和-bufferedoutputstream-类\" href=\"#bufferedinputstream-类和-bufferedoutputstream-类\"></a></h4>\n<p>对流实现缓冲功能。使用缓冲流可以减少读写数据的次数，加快输入输出的速度。缓冲流使用字节数组实现缓冲，当输入数据时，数据成块地读入数组缓冲区，然后程序再从缓冲区中读取单个字节；当输出数据时，数据先写入数组缓冲区，然后再将整个数组写到输出流中. 把输入输出流包装成具有缓冲功能的流，从而提高输入输出的效率.</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>BufferedInputStream(InputStream in)</code></td>\n<td style=\"text-align:left\">使用参数 in 指定的输入流对象创建一个缓冲输入流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BufferedInputStream(InputStream in, int size)</code></td>\n<td style=\"text-align:left\">使用参数 in指定的输入流对象创建一个缓冲输入流，并且通过 size参数指定缓冲区大小，默认为512字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"> </td>\n<td style=\"text-align:left\"> </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BufferedOutputStream(OutputStream out)</code></td>\n<td style=\"text-align:left\">使用参数 out 指定的输出流对象创建一个缓冲输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BufferedOutputStream(OutputStream out, int size)</code></td>\n<td style=\"text-align:left\">使用参数 out指定的输出流对象创建一个缓冲输出流，并且通过 size参数指定缓冲区大小，默认为512字节。</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"datainputstream-类和-dataoutputstream-类\">DataInputStream 类和 DataOutputStream 类<a title=\"#datainputstream-类和-dataoutputstream-类\" href=\"#datainputstream-类和-dataoutputstream-类\"></a></h4>\n<p>以实现基本数据类型的输入输出.</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>DataInputStream(InputStream instream)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>DataOutputStream(OutputStream outstream)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>DataInputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public byte readByte()</code></td>\n<td style=\"text-align:left\">从输入流读一个字节并返回该字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public short readShort()</code></td>\n<td style=\"text-align:left\">从输入流读2字节，返回一个 short型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int readInt()</code></td>\n<td style=\"text-align:left\">从输入流读4字节，返回一个int型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public long readLong()</code></td>\n<td style=\"text-align:left\">从输入流读8字节，返回一个long型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public char readChar() </code></td>\n<td style=\"text-align:left\">从输入流读一个字符并返回该字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean readBoolean() </code></td>\n<td style=\"text-align:left\">从输入流读一个字节，非0返回 true,0返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public float readFloat()</code></td>\n<td style=\"text-align:left\">从输入流读4字节，返回一个float型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public double readDouble()</code></td>\n<td style=\"text-align:left\">从输入流读8字节，返回一个double型值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String readLine() </code></td>\n<td style=\"text-align:left\">从输入流读下一行文本。该方法已被标记为不推荐使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String readUTF()</code></td>\n<td style=\"text-align:left\">从输入流读 UTF-8格式的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>DataOutputStream</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeByte(int v) </code></td>\n<td style=\"text-align:left\">将v 低8位写入输出流，忽略高24位。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeShort(int v)</code></td>\n<td style=\"text-align:left\">向输出流写一个16位的整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeInt(int v)</code></td>\n<td style=\"text-align:left\">向输出流写一个4字节的整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeLong(long v)</code></td>\n<td style=\"text-align:left\">向输出流写一个8字节的长整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeChar(int v) </code></td>\n<td style=\"text-align:left\">向输出流写一个16位的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeBoolean(boolean v)</code></td>\n<td style=\"text-align:left\">将一个布尔值写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeFloat(float v)</code></td>\n<td style=\"text-align:left\">向输出流写一个4字节的 float型浮点数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeDouble(double v)</code></td>\n<td style=\"text-align:left\">向输出流写一个8字节的 double型浮点数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeBytes(String s) </code></td>\n<td style=\"text-align:left\">将参数字符串每个字符的低位字节按顺序写到输出流中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeChars(String s) </code></td>\n<td style=\"text-align:left\">将参数字符串每个字符按顺序写到输出流中，每个字符占2字节。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void writeUTF(String s)</code></td>\n<td style=\"text-align:left\">将参数字符串字符按UTF-8 的格式写出到输出流中。UTF-8 格式的字符串中每个字符可能是1、2或3字节，另外字符串前要加2字节存储字符数量。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 向文件写入数据</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataOutputStream</span> <span class=\"variable\">dataOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;data.bat&quot;</span>))))&#123;</span><br><span class=\"line\">             <span class=\"comment\">// 为文件创建缓冲输出流, 再包装成数据输出流</span></span><br><span class=\"line\">            dataOutputStream.writeDouble(<span class=\"number\">2.333</span>);</span><br><span class=\"line\">            dataOutputStream.writeInt(<span class=\"number\">90</span>);</span><br><span class=\"line\">            dataOutputStream.writeUTF(<span class=\"string\">&quot;来杯Java&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Data Input Finish&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 从文件读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">DataInputStream</span> <span class=\"variable\">dataInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;data.bat&quot;</span>))))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dataInputStream.readDouble();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> dataInputStream.readInt();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> dataInputStream.readUTF();</span><br><span class=\"line\">            System.out.println(d);</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"printstream-类\">PrintStream 类<a title=\"#printstream-类\" href=\"#printstream-类\"></a></h4>\n<p>PrintStream类为打印各种类型的数据提供了方便。<code>PrintStream类定义了多个print()和println()方法</code>，可以打印各种类型的数据。这些方法都是把数据转换成字符串，然后输出。如果输出到文件中则可以用记事本浏览。 println()方法输出后换行， print()方法输出后不换行。当把对象传递给这两个方法时则先调用对象的toString()方法将对象转换为字符串形式，然后输出。在前面章节大量使用的 <code>System.out 对象就是 PrintStream 类的一个实例</code>，用于向控制台输出数据</p>\n<h4 id=\"标准输入输出流\">标准输入输出流<a title=\"#标准输入输出流\" href=\"#标准输入输出流\"></a></h4>\n<p>Java系统事先定义了两个对象 <a href=\"http://System.in\">System.in</a> 和 System.out,分别与系统的标准输入和标准输出相联系，另外还定义了标准错误输出流 System.err。<a href=\"http://System.in\">System.in</a> 是InputStream类的实例。可以使用 read()方法从键盘上读取字节，也可以将它包装成数据流读取各种类型的数据和字符串。System.out 和 System.err 是PrintStream类的实例，可以使用该类定义的方法输出各种类型数据.</p>\n<h3 id=\"文本-i/o-流\">文本 I/O 流<a title=\"#文本-i/o-流\" href=\"#文本-i/o-流\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305181917567.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"reader-类和-writer-类\">Reader 类和 Writer 类<a title=\"#reader-类和-writer-类\" href=\"#reader-类和-writer-类\"></a></h4>\n<p>抽象类 Reader 和 Writer 分别是文本输入流和输出流的根类，它们实现字符的读写</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Reader</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read()  </code></td>\n<td style=\"text-align:left\">读取一个字符，返回0～65535的 int型值，如果到达流的末尾返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int read(char[] cbuf)  </code></td>\n<td style=\"text-align:left\">读取多个字符到字符数组 cbuf中，如果到达流的末尾返回-1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()  </code></td>\n<td style=\"text-align:left\">关闭输入流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>Writer</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(int c)  </code></td>\n<td style=\"text-align:left\">向输出流中写一个字符，实际是将 int型的 c 的低16位写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(char [] cbuf)  </code></td>\n<td style=\"text-align:left\">把字符数组 cbuf中的字符写入输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void write(String str)  </code></td>\n<td style=\"text-align:left\">把字符串 str写入输出流中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void flush()  </code></td>\n<td style=\"text-align:left\">刷新输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void close()  </code></td>\n<td style=\"text-align:left\">关闭输出流</td>\n</tr>\n</tbody>\n</table></div></div><p>Reader类和 Writer类的方法在发生I/O错误时都抛出 IOException 异常</p>\n<h4 id=\"filereader-类和-filewriter-类\">FileReader 类和 FileWriter 类<a title=\"#filereader-类和-filewriter-类\" href=\"#filereader-类和-filewriter-类\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>FileReader</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileReader(String fileName) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileReader(File file) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>FileWriter</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileWriter(String fileName) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileWriter(File file) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public FileWriter(String fileName, boolean append)  </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><p>FileReader类是InputStreamReader的子类，实现二进制输入流向文本输入流的转换<br>\nFileWriter类是OutputStreamWriter的子类，实现文本输出流向二进制输出流的转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">FileOutputStream</span> <span class=\"variable\">from</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;From.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileOutputStream</span> <span class=\"variable\">to</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;To.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileWriter</span> <span class=\"variable\">FromWriter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;From.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileReader</span> <span class=\"variable\">FromReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;From.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileReader</span> <span class=\"variable\">ToReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;To.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileWriter</span> <span class=\"variable\">ToWriter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;To.txt&quot;</span>)) &#123;</span><br><span class=\"line\">            FromWriter.write(<span class=\"string\">&quot;Programming pilgrimage&quot;</span>);</span><br><span class=\"line\">            FromWriter.close();     <span class=\"comment\">// 要及时异步关闭, 关闭后字符才写入完成</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span>  FromReader.read(); <span class=\"comment\">// 将From中的字符复制到To中</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(c != -<span class=\"number\">1</span>) &#123;     <span class=\"comment\">// 这里read方法实际上读到null会返回 -1</span></span><br><span class=\"line\">                ToWriter.write(c);</span><br><span class=\"line\">                c = FromReader.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ToWriter.close();</span><br><span class=\"line\">            FromReader.close();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> ToReader.read();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (d != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>)d);</span><br><span class=\"line\">                d = ToReader.read();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"bufferedreader-类和-bufferedwriter类\">BufferedReader 类和 BufferedWriter类<a title=\"#bufferedreader-类和-bufferedwriter类\" href=\"#bufferedreader-类和-bufferedwriter类\"></a></h4>\n<p>BufferedReader类和BufferedWriter类分别实现了具有缓冲功能的字符输入输出流。这两个类用来将其他的字符流包装成缓冲字符流，以提高读写数据的效率。</p>\n<p><code>public BufferedReader(Reader in)</code> 使用默认的缓冲区大小创建缓冲字符输入流。<br>\n<code>public BufferedReader(Reader in,int sz)</code> 使用指定的缓冲区大小创建缓冲字符输入流。<br>\n<code>public String readLine()</code> 从输入流中读取一行文本。</p>\n<p><code>BufferedWriter(Writer out)</code><br>\n<code>BufferedWriter(Writer out, int sz)</code><br>\n<code>void newLine()</code> 写一个行分隔符。系统属性line.separator定义的分隔符</p>\n<p>在 Writer上(如 FileWriter和 OutputStreamWriter) 包装 BufferedWriter<br>\n<code>BufferedReader br = new BufferedReader(new FileReader(&quot;input.txt&quot;));</code><br>\n<code>BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;output.txt&quot;));</code></p>\n<h4 id=\"printwrite-类\">PrintWrite 类<a title=\"#printwrite-类\" href=\"#printwrite-类\"></a></h4>\n<p>PrintWriter类实现字符打印输出流<br>\n<code>PrintWriter(Writer out)</code><br>\n<code>PrintWriter(Writer out, boolean autoFlush)</code>  如果 autoFlush 指定为 true, 则在输出之前自动刷新输出流。<br>\n<code>PrintWriter(OutputStream out)</code> 使用二进制输出流创建一个打印输出流。<br>\n<code>PrintWriter(OutputStream out, boolean autoFlush)</code></p>\n<p><code>public void println(type t)</code><br>\n<code>public PrintWriter printf(String format, Object ...args)</code></p>\n<h4 id=\"scanner-类\">Scanner 类<a title=\"#scanner-类\" href=\"#scanner-类\"></a></h4>\n<p>Scanner类从键盘读取数据, 创建 Scanner 对象时将标准输入设备 System.in作为其构造方法的参数。使用 Scanner还可以关联文本文件，从文本文件中读取数据。</p>\n<p><code>public Scanner(String source)</code><br>\n<code>public Scanner(InputStream source)</code> 用指定的输入流构造一个 Scanner 对象，以便从中读取数据。</p>\n<p>创建 Scanner对象后，就可以根据分隔符对源数据进行解析。使用 Scanner类的有关方法可以解析每个标记 (token)。默认的分隔符是空白，包括回车、换行、空格、制表符等，也可以指定分隔符。</p>\n<p><code>public String next()</code> 读取下一个标记并将其解析成字符串。<br>\n<code>public String nextLine()</code> 读取当前行作为一个string型字符串。<br>\n<code>public Scanner useDelimiter(String pattern)</code> 设置 Scanner 对象使用分隔符的模式。pattern为一个合法的正则表达式。<br>\n<code>public void close()</code>  关闭 Scanner对象。<br>\n每个 nextXXX()方法，Scanner类还提供一个 hasNextXXX()方法。使用该方法可以判断是否还有下一个标记。</p>\n<h3 id=\"对象序列化\">对象序列化<a title=\"#对象序列化\" href=\"#对象序列化\"></a></h3>\n<p>对象的寿命通常随着创建该对象程序的终止而终止。有时可能需要<code>将对象的状态保存</code>下来，在需要时再将其恢复。对象状态的保存和恢复可以通过<code>对象I/O 流</code>实现.</p>\n<h4 id=\"serializable-接口\">Serializable 接口<a title=\"#serializable-接口\" href=\"#serializable-接口\"></a></h4>\n<p>将程序中的对象输出到外部设备(如磁盘、网络)中，称为对象<code>序列化 (serialization)</code>;反之，从外部设备将对象读入程序中称为对象<code>反序列化 (deserialization)</code>。一个类的对象要实现对象序列化，必须实现<code>java.io.Serializable</code>接口.</p>\n<p>Serializable接 口只是标识性接口， 其中没有定义任何方法。一个类的对象要序列化，除了必须<code>实现 Serializable接 口</code>外，还需要<code>创建对象输出流 和对象输入流</code>，然后，通过对象输出流将对象状态保存下来，通过对象输入流恢复对象的状态。</p>\n<h4 id=\"objectinputstream-类和-objectoutputstream-类\">ObjectInputStream 类和 ObjectOutputStream 类<a title=\"#objectinputstream-类和-objectoutputstream-类\" href=\"#objectinputstream-类和-objectoutputstream-类\"></a></h4>\n<p><code>public ObjectOutputStream(OutputStream out)</code><br>\n<code>public final void writeObject(Object obj) throws IOException</code><br>\n<code>public ObjectInputStream(InputStream in)</code><br>\n<code>public final Object readObject () throws IOException</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;data.ser&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(fos);  <span class=\"comment\">// ObjectOutputStream必须建立在另一 个字节流上</span></span><br><span class=\"line\">            oos.writeInt(<span class=\"number\">222</span>);</span><br><span class=\"line\">            oos.writeObject(<span class=\"string\">&quot;你好&quot;</span>);</span><br><span class=\"line\">            oos.writeObject(LocalDate.now());</span><br><span class=\"line\">            oos.writeObject(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"number\">19</span>));</span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;data.ser&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(fis);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> ois.readInt();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (String)ois.readObject();</span><br><span class=\"line\">            <span class=\"type\">LocalDate</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (LocalDate)ois.readObject();</span><br><span class=\"line\">            <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> (Person)ois.readObject();</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">            System.out.println(b);</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">            System.out.println(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果数组中的所有元素都是可序列化的，这个数组就是可序列化的.</p>\n<h3 id=\"nio-和-nio.2\">NIO 和 NIO.2<a title=\"#nio-和-nio.2\" href=\"#nio-和-nio.2\"></a></h3>\n<p>为了增强Java I/O功能，在JDK 1.4中增加了一些新的API,称为NIO(new I/O), NIO API是java.nio包及其子包的一部分。在JDK7中又新引进了一些包，称作NIO.2,用来对现有技术进行补充。NIO.2的接口和类通过java.nio.file包及其子包提供。</p>\n<h4 id=\"filesystem-类\">FileSystem 类<a title=\"#filesystem-类\" href=\"#filesystem-类\"></a></h4>\n<p>FileSystem表示一个文件系统，是一个抽象类，可以调用FileSystems类的getDefault()静态方法来获取当前的文件系统。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>abstract Path getPath(String first, String...more) </code></td>\n<td style=\"text-align:left\">返回字符串first指定的路径对象。可选参数more用来指定后续路径。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract String getSeparator() </code></td>\n<td style=\"text-align:left\">返回路径分隔符。在Windows系统中，它是“\\”,在 UNIX/Linux系统中，它是“/”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract Iterable&lt;Path&gt; getRootDirectores()  </code></td>\n<td style=\"text-align:left\">返回一个Iterable对象，可以用来遍历根目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract boolean isOpen() </code></td>\n<td style=\"text-align:left\">返回该文件系统是否打开。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract boolean isReadOnly() </code></td>\n<td style=\"text-align:left\">返回该文件系统是否只读。</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"path对象\">Path对象<a title=\"#path对象\" href=\"#path对象\"></a></h4>\n<p>Java7之前，文件和目录用File对象表示。由于使用File类存在着许多不足，因此在Java7中应使用NIO.2的<code>java.nio.file.Path接口代替File</code>。<br>\n对JDK 7之前使用java.io.File的代码，可以使用File类的toPath()方法转换成Path对象，从而利用Path功能。<br>\nPath 表示一个路径，可以是一个文件、一个目录，也可以是一个符号链接，还可以表示一个根目录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;F:\\\\books\\\\Textbook\\\\线性代数 Linear Algebra&quot;</span>);</span><br><span class=\"line\">        System.out.println(p);</span><br><span class=\"line\">        System.out.println(p.getName(<span class=\"number\">0</span>));</span><br><span class=\"line\">        System.out.println(p.getName(<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(p.getFileName());</span><br><span class=\"line\">        System.out.println(p.subpath(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">        System.out.println(p.getParent());</span><br><span class=\"line\">        System.out.println(p.getRoot());</span><br><span class=\"line\">        <span class=\"comment\">//F:\\books\\Textbook\\线性代数 Linear Algebra</span></span><br><span class=\"line\">        <span class=\"comment\">//books</span></span><br><span class=\"line\">        <span class=\"comment\">//Textbook</span></span><br><span class=\"line\">        <span class=\"comment\">//线性代数 Linear Algebra</span></span><br><span class=\"line\">        <span class=\"comment\">//Textbook\\线性代数 Linear Algebra</span></span><br><span class=\"line\">        <span class=\"comment\">//F:\\books\\Textbook</span></span><br><span class=\"line\">        <span class=\"comment\">//F:\\</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"files-类\">Files 类<a title=\"#files-类\" href=\"#files-类\"></a></h4>\n<p>java.nio.file.Files类是一个功能非常强大的类。该类定义了大量的静态方法用来读、写和操纵文件与目录。Files类主要操作Path对象</p>\n<p><code>public static Path createDirectory(Path dir, FileAttribute&lt;?&gt;...attrs)</code><br>\n<code>public static Path createFile(Path file,FileAttribute&lt;?&gt;...attrs)</code><br>\n<code>public static void delete(Path path)</code><br>\n<code>public static void deleteIfExists(Path path)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">            Files.delete(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchFileException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;No such file &quot;</span> + p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean exists(Path path,LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean notExists(Path path,LinkOption…options):</code></td>\n<td style=\"text-align:left\">检查path所指的文件或目录是否不存在。注意，!Files.exists(path)与Files.notExists(path)并不等价。如果exists(path)与notExists(path)都返回false,表示文件不能检验。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isReadable(Path path)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isWritable(Path path) </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isExecutable(Path path)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static boolean isRegularFile(Path path, LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static long size(Path path):</code></td>\n<td style=\"text-align:left\">返回指定文件的字节大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static boolean isDirectory(Path path,LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static boolean isHidden(Path path)</code></td>\n<td style=\"text-align:left\">如果指定的Path对象是隐藏的返回true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static FileTime getLastModifiedTime(Path path, LinkOption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Path setLastModifiedTime(Path path, FileTime)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static UserPrincipal getOwner(Path path, LinkOption…options)</code></td>\n<td style=\"text-align:left\">返回指定文件的所有者。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Path setOwner(Path path, UserPrincipal) </code></td>\n<td style=\"text-align:left\">设置指定文件的所有者。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Object getAttribute(Path path, String, LinkOption…options)</code></td>\n<td style=\"text-align:left\">返回用字符串指定文件的属性。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>static Path setAttribute(Path path, String, Object obj,LinkOption…options)</code></td>\n<td style=\"text-align:left\">设置用字符串指定文件的属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制移动</td>\n<td style=\"text-align:left\"> </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static Path copy(Path source, Path target, Copyoption…options)</code></td>\n<td style=\"text-align:left\">可选的参数options为CopyOption接口对象，是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">java.nio.file包的一个接口。<code>StandardCopyOption枚举是CopyOption接口的一个实现</code>，提供了下面三个复制选项。ATOMIC_MOVE:将移动文件作为一个原子的文件系统操作; COPY_ATTRIBUTES:将属性复制到新文件 ;REPLACE_EXISTING:如果文件存在，将它替换。</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static long copy(InputStream in, Path target, CopyOption…options)</code> 从输入流中将所有字节复制到目标文件中。</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static long copy(Path source, OutputStream out)</code> 将源文件中的所有字节复制到输出流中</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static Path move(Path source, Path target, Copyoption…options)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\moved\\\\newTest.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Files.move(source, target, StandardCopyOption.REPLACE_EXISTING);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取目录的对象\">获取目录的对象<a title=\"#获取目录的对象\" href=\"#获取目录的对象\"></a></h4>\n<p>Files类的newDirectoryStream()方法，可以获取目录中的文件、子目录和符号链接，该方法返回一个DirectoryStream,使用它可以迭代目录中的所有对象。</p>\n<p><code>public static DirectoryStream&lt;Path&gt; newDirectoryStream(Path path)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\DevTools&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(path) ;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(Path entry : entries) &#123;</span><br><span class=\"line\">                    System.out.println(entry);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"小文件读写\">小文件读写<a title=\"#小文件读写\" href=\"#小文件读写\"></a></h4>\n<p>Files类提供了从一个较小的二进制文件和文本文件读取与写入的方法。readAllBytes()方法和readAllLines()方法分别是从二进制文件和文本文件读取。这些方法可以自动打开和关闭流，但不能处理大文件。<br>\n<code>public static Path write(Path path, byte[] bytes,OpenOption…options)</code><br>\n<code>public static Path write(Path path, Iterable&lt;extends CharSequence&gt; lines,Charset cs, OpenOption…options)</code><br>\n<code>public static byte[] readAllBytes(Path path)</code><br>\n<code>public static List&lt;String&gt;readAllLines(Path path, Charset cs)</code></p>\n<p>OpenOption接口定义了打开文件进行写入的选项，StandardOpenOption枚举实现了该接口并提供了以下这些值。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>APPEND </code></td>\n<td style=\"text-align:left\">向文件末尾追加新数据。该选项与WRITE或CREATE同时使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>CREATE </code></td>\n<td style=\"text-align:left\">若文件存在则打开，若文件不存在则创建新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>CREATE_NEW </code></td>\n<td style=\"text-align:left\">创建一个新文件，如果文件存在则抛出异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>DELETE_ON_CLOSE </code></td>\n<td style=\"text-align:left\">当流关闭时删除文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>DSYNC </code></td>\n<td style=\"text-align:left\">使文件内容与基本存储设备同步。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>READ </code></td>\n<td style=\"text-align:left\">打开文件进行读取访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>SYNC </code></td>\n<td style=\"text-align:left\">使文件内容和元数据与基本存储设备同步。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>TRUNCATE_EXISTING </code></td>\n<td style=\"text-align:left\">截断文件使其长度为0字节，该选项与WRITE同时使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>WRITE </code></td>\n<td style=\"text-align:left\">为写数据而打开文件。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Path</span> <span class=\"variable\">test_txt</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Charset</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line_1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;黑夜给了我黑色的眼睛&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line_2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;我却用它来寻找光明&quot;</span>;</span><br><span class=\"line\">        List&lt;String&gt; lines = Arrays.asList(line_1, line_2);</span><br><span class=\"line\">        <span class=\"comment\">// write in</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Files.write(test_txt, lines, charset, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// read out</span></span><br><span class=\"line\">        List&lt;String&gt; linesRead = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            linesRead = Files.readAllLines(test_txt, charset);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(linesRead != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String line : linesRead) &#123;</span><br><span class=\"line\">                System.out.println(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"files-类创建流对象\">Files 类创建流对象<a title=\"#files-类创建流对象\" href=\"#files-类创建流对象\"></a></h4>\n<p>有了NIO.2后，就可以调用Files.newInputStream()方法，获得与文件关联的InputStream对象来读取数据，调用Files.newOutputStream()方法获得与文件关联的OutputStream对象向文件写数据。</p>\n<p><code>public static InputStream newInputStream(Path path, OpenOption...options) throws IOException</code><br>\n<code>public static OutputStream newOutputStream(Path path, OpenOption...options) throws IOException</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">test_txt</span> <span class=\"operator\">=</span> Path.of(<span class=\"string\">&quot;D:\\\\test\\\\test.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Charset</span> <span class=\"variable\">chinaSet</span> <span class=\"operator\">=</span> Charset.forName(<span class=\"string\">&quot;GB2312&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// write in</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">BufferedWriter</span> <span class=\"variable\">output</span> <span class=\"operator\">=</span> Files.newBufferedWriter(test_txt, chinaSet))&#123;</span><br><span class=\"line\">            output.write(<span class=\"string\">&quot;来杯Java&quot;</span>.toCharArray());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// read out</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>(<span class=\"type\">BufferedReader</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> Files.newBufferedReader(test_txt, chinaSet))&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> input.readLine();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (line != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                System.out.println(line);</span><br><span class=\"line\">                line = input.readLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/17/[Java%E7%AC%94%E8%AE%B0]%E6%B3%9B%E5%9E%8B&%E9%9B%86%E5%90%88&Stream/",
            "url": "https://s1acr.github.io/2023/05/17/[Java%E7%AC%94%E8%AE%B0]%E6%B3%9B%E5%9E%8B&%E9%9B%86%E5%90%88&Stream/",
            "title": "[Java笔记]泛型&集合&Stream",
            "date_published": "2023-05-17T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>Java 笔记</p>\n</blockquote>\n<h2 id=\"泛型\">泛型<a title=\"#泛型\" href=\"#泛型\"></a></h2>\n<p>泛型是Java5引进的新特征，是类和接口的一种扩展机制，主要实现<code>参数化类型(parameterized type)</code>机制。泛型被广泛应用在 Java 集合API 中，在Java集合框架中大多数的类和接口都是泛型类型。使用泛型，程序员可以编写更安全的程序.</p>\n<h3 id=\"泛型类型\">泛型类型<a title=\"#泛型类型\" href=\"#泛型类型\"></a></h3>\n<p>泛型 (generics) 是带一个或多个类型参数 (type parameter) 的类或接口。<br>\n按照约定，类型参数名使用单个大写字母表示。常用的类型参数名有E (表示元素)、K (表示键)、 N (表示数字)、 T (表示类型)、 V (表示值)等<br>\n泛型参数不能是原始数据类型 primitive type</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Entry</span>&lt;K, V&gt; &#123;  <span class=\"comment\">// 泛型接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> K <span class=\"title function_\">getKey</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> V <span class=\"title function_\">getValue</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span>&lt;K, V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Entry</span>&lt;K, V&gt; &#123;   <span class=\"comment\">// 泛型类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> V value;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">(K key, V value)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setKey</span><span class=\"params\">(K key)</span> &#123;<span class=\"built_in\">this</span>.key = key;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  K <span class=\"title function_\">getKey</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> key;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setValue</span><span class=\"params\">(V value)</span> &#123;<span class=\"built_in\">this</span>.value = value;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> V <span class=\"title function_\">getValue</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> value;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">getType</span><span class=\"params\">(T t, K k, V v)</span> &#123;   <span class=\"comment\">// 泛型方法, 泛型参数表位置在返回值前</span></span><br><span class=\"line\">        System.out.println(t.getClass().getName());</span><br><span class=\"line\">        System.out.println(k.getClass().getName());</span><br><span class=\"line\">        System.out.println(v.getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Pair&lt;String, Integer&gt; p_1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;&gt;(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">        Pair&lt;String, Integer&gt; p_2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;&gt;(<span class=\"string\">&quot;hacker&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">        Pair&lt;Pair, Pair&gt; pp = <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;&gt;(p_1, p_2);</span><br><span class=\"line\">        System.out.println(pp.getKey().getKey());</span><br><span class=\"line\">        System.out.println(pp.getKey().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        pp.&lt;Integer&gt;getType(<span class=\"number\">2</span>, pp, p_1 );   <span class=\"comment\">// 注意类型位置在方法名前， C++中是在后</span></span><br><span class=\"line\">        <span class=\"comment\">//java.lang.Integer</span></span><br><span class=\"line\">        <span class=\"comment\">//generics.Pair</span></span><br><span class=\"line\">        <span class=\"comment\">//generics.Pair</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通配符'？'\">通配符’？’<a title=\"#通配符'？'\" href=\"#通配符'？'\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;<span class=\"keyword\">void</span> <span class=\"title function_\">printList</span><span class=\"params\">(List&lt;T&gt; list)</span> &#123; <span class=\"comment\">// 通配符的存在相当于让方法参数化便于传入类型的多样，但在类中无法使用参数化的类型</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object e : list) &#123;              <span class=\"comment\">// 这样也能实现一样的效果， 只不过通配符是让编译器识别</span></span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printList_1</span><span class=\"params\">(List&lt;?&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object e : list) &#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;slacr&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;bar&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Main.&lt;String&gt;printList(list);</span></span><br><span class=\"line\">        printList(list); <span class=\"comment\">// 也可以让编译器自动识别，</span></span><br><span class=\"line\">        printList_1(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"有界类型参数\">有界类型参数<a title=\"#有界类型参数\" href=\"#有界类型参数\"></a></h3>\n<p><code>有界类型参数 (bounded type parameter)</code>。 有界类型分为上界和下界，上界用 extends指定，下界用super指定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//public static double getAvg(List&lt;? extends Number &gt; list)&#123;  // extends指定上界为Number, 只能传Number或其子类对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span> &amp; java.io.Serializable&gt; <span class=\"type\">double</span> <span class=\"title function_\">getAvg</span><span class=\"params\">(List&lt;U&gt; list)</span>&#123;   <span class=\"comment\">// 或者这么写, 不用通配符</span></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0D</span>;                                  <span class=\"comment\">// 下界用 super 关键词指定, 实现接口用 &amp;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Number number : list) &#123;</span><br><span class=\"line\">            total += number.doubleValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; integerList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        integerList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        integerList.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(getAvg(integerList));</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Float&gt; floatList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        floatList.add(<span class=\"number\">3F</span>);</span><br><span class=\"line\">        floatList.add(<span class=\"number\">4F</span>);</span><br><span class=\"line\">        System.out.println(getAvg(floatList));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型擦除\">类型擦除<a title=\"#类型擦除\" href=\"#类型擦除\"></a></h3>\n<p>当实例化泛型类型时，编译器使用一种叫<code>类型擦除 (type erasure)</code>的技术转换这些类型。在编译时，编译器将清除类和方法中所有与类型参数有关的信息。类型擦除可让使用泛型的Java应用程序与之前不使用泛型类型的 Java类库和应用程序兼容</p>\n<p>例如，<code>Node&lt;Integer&gt;被转换成 Node, 它称为源类型 (raw type)</code>。源类型是不带任何类型参数的泛型类或接口名。这说明在运行时找不到泛型类使用的是什么类型。</p>\n<p>也就是说泛型类在编译时泛型参数的类型是不可确定的, 只有在实例化对象时才能确定, 因此定义泛型类或方法的时候只能声明存在该参数类型的变量, 而不能直接使用, 像 new T() 或者赋值.</p>\n<h2 id=\"集合框架\">集合框架<a title=\"#集合框架\" href=\"#集合框架\"></a></h2>\n<p>Java 提供了一个集合框架 (Collections Framework), 该框架定义了一组接口和类, 使得处理对象组更容易。</p>\n<p><code>集合是指集中存放一组对象的一个对象</code>。集合相当于一个容器，提供了保存、获取和操作其他元素的方法。集合能够帮助Java程序员轻松地管理对象。 Java 集合框架由两种类型构成，一个是<code>Collection</code>; 另一个是<code>Map</code>。Collection 对象用于存放一组对象， Map 对象用于存放一组“关键字/值”的对象。 Collection和 Map 是最基本的接口，它们又有子接口.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305161320016.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Collection<E>接口是所有集合类型的根接口，继承了 Iterable<E>接口. Collection接口定义了集合操作的常用方法，这些方法可以简单分为<code>基本操作、批量操作、数组操作和流操作</code>。</p>\n<h3 id=\"基本操作\">基本操作<a title=\"#基本操作\" href=\"#基本操作\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>boolean add(E e)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean remove(Object o)</code></td>\n<td style=\"text-align:left\">删除首次出现元素 o</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean contains(Object o)</code></td>\n<td style=\"text-align:left\">返回集合中是否包含指定的元素o。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean isEmpty()</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int size()</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Iterator iterator()</code></td>\n<td style=\"text-align:left\">返回包含所有元素的迭代器对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>default void forEach(Consumer&lt;? super T&gt;action)</code></td>\n<td style=\"text-align:left\">从父接口继承的方法，在集合的每个元素上执行指定的操作。</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"批量操作\">批量操作<a title=\"#批量操作\" href=\"#批量操作\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td>\n<td style=\"text-align:left\">将集合 c 中的所有元素添加到当前集合中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean removeAll(Collection&lt;?&gt;c)</code></td>\n<td style=\"text-align:left\">从当前集合中删除c 中的所有元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>default boolean removeif(Predicate&lt;? super E&gt; filter)</code></td>\n<td style=\"text-align:left\">从当前集合中删除满足谓词的所有元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean containsAll(Collection&lt;?&gt;c)</code></td>\n<td style=\"text-align:left\">返回当前集合是否包含c 中的所有元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean retainAll(Collection&lt;?&gt;c)</code></td>\n<td style=\"text-align:left\">在当前集合中只保留指定集合 c 中的元素，其他元素删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void clear()</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"数组操作\">数组操作<a title=\"#数组操作\" href=\"#数组操作\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>Object[] toArray()</code></td>\n<td style=\"text-align:left\">返回包含集合中所有元素的对象数组。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;T&gt;T[] toArray(T[] a)</code></td>\n<td style=\"text-align:left\">返回包含集合中所有元素的数组，返回数组的元素类型是指定的数组类型</td>\n</tr>\n</tbody>\n</table></div></div><p>Object[] a = c.toArray(); 将Collection对象转换为Object数组.</p>\n<h3 id=\"流(stream)操作\">流(Stream)操作<a title=\"#流(stream)操作\" href=\"#流(stream)操作\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public default Stream&lt;E&gt; stream()</code></td>\n<td style=\"text-align:left\">以当前集合作为源返回一个顺序 Stream对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public default Stream&lt;E&gt; paralellStream()</code></td>\n<td style=\"text-align:left\">以当前集合作为源返回一个并行 Stream对象。</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"list-接口及实现类\">List 接口及实现类<a title=\"#list-接口及实现类\" href=\"#list-接口及实现类\"></a></h2>\n<p>List接口是 Collection的子接口，实现一种线性表的数据结构.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305161332445.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>List 接口除继承 Collection的方法外，还定义了一些自己的方法。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>E get(int index)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E set(int index,E element)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void add(int index, E element)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E remove(int index)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>abstract boolean addAll(int index, Collection&lt;? extends E&gt; c)</code></td>\n<td style=\"text-align:left\">在指定下标处插入集合c 中的全部元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int indexOf(Object o)</code></td>\n<td style=\"text-align:left\">查找指定对象第一次出现的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int lastIndexOf(Object o)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>List&lt;E&gt;subList(int from,int to)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>default void replaceAll(UnaryOperator&lt;E&gt; operator)</code></td>\n<td style=\"text-align:left\">将操作符应用于元素，并使用其结果替代每个元素。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// List 接口不能直接实例化, 但能通过子类上转型来实现</span></span><br><span class=\"line\">        List&lt;Character&gt; characterList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            characterList.add((<span class=\"type\">char</span>)(<span class=\"string\">&#x27;A&#x27;</span>+i));</span><br><span class=\"line\">            System.out.println(characterList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"arraylist类\">ArrayList类<a title=\"#arraylist类\" href=\"#arraylist类\"></a></h3>\n<p>ArrayList是最常用的线性表实现类，通过数组实现的集合对象。 ArrayList类实际上实现了一个<code>变长的对象数组</code>，其元素可以动态地增加和删除。它的定位访问时间是常量时间。</p>\n<p>ArrayList() 创建一个空的数组线性表对象，默认初始容量是10。<br>\nArrayList(Collection c) 用集合c 中的元素创建一个数组线性表对象.<br>\nArrayList(int initialCapacity)</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; stringArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;how &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;are &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;you &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : stringArrayList) &#123;  <span class=\"comment\">// 增强的 for 循环, 不仅仅可以用来遍历数组, 还可以用来遍历 集合 , 实现了collection 接口的实例</span></span><br><span class=\"line\">            System.out.print(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        stringArrayList.forEach((s) -&gt; System.out.print(s));  <span class=\"comment\">// 使用 forEach 方法, 跟 js 太像了</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        stringArrayList.forEach(System.out::print);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用迭代器\">使用迭代器<a title=\"#使用迭代器\" href=\"#使用迭代器\"></a></h4>\n<p>迭代器是一个可以遍历集合中每个元素的对象。调用集合对象的 <code>iterator()</code> 方法可以得到 Iterator对象</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>boolean hasNext()</code></td>\n<td style=\"text-align:left\">返回迭代器中是否还有对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E next()</code></td>\n<td style=\"text-align:left\">返回迭代器中下一个对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void remove()</code></td>\n<td style=\"text-align:left\">删除迭代器中的当前对象</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; stringArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;how &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;are &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;you &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Iterator&lt;String&gt; stringIterator = stringArrayList.iterator();</span><br><span class=\"line\">        stringIterator.next();   <span class=\"comment\">// 一开始是首元素前， 移动到第一个元素位置</span></span><br><span class=\"line\">        stringIterator.remove();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stringIterator.hasNext()) &#123;      <span class=\"comment\">// 使用迭代器遍历</span></span><br><span class=\"line\">            System.out.printf(stringIterator.next()); <span class=\"comment\">// next() 返回容器中对象后自增</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双向迭代器\">双向迭代器<a title=\"#双向迭代器\" href=\"#双向迭代器\"></a></h4>\n<p>List还提供了listIterator() 方法返回ListIterator对象。它可以从前后两个方向遍历线性表中元素，在迭代中修改元素以及获得元素的当前位置。ListIterator是Iterator的子接口，不但继承了Iterator接口中的方法，还定义了自己的方法。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>E next()</code></td>\n<td style=\"text-align:left\">返回下一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean hasPrevious()</code></td>\n<td style=\"text-align:left\">返回是否还有前一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E previous()</code></td>\n<td style=\"text-align:left\">返回前一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int nextIndex()</code></td>\n<td style=\"text-align:left\">返回下一个元素的索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int previousIndex()</code></td>\n<td style=\"text-align:left\">返回前一个元素的索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void remove()</code></td>\n<td style=\"text-align:left\">删除当前元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void set(E o)</code></td>\n<td style=\"text-align:left\">修改当前元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void add(E o)</code></td>\n<td style=\"text-align:left\">在当前位置插入一个元素</td>\n</tr>\n</tbody>\n</table></div></div><p>使用迭代器可以修改线性表中的元素，但不能同时使用两个迭代器修改一个线性表中的元素，否则将抛出异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; stringArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;how &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;are &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;you &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ListIterator&lt;String&gt; stringListIterator = stringArrayList.listIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stringListIterator.hasNext()) stringListIterator.next();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stringListIterator.hasPrevious()) System.out.println(stringListIterator.previous()); <span class=\"comment\">// 逆向遍历</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组转list对象\">数组转List对象<a title=\"#数组转list对象\" href=\"#数组转list对象\"></a></h4>\n<p>java.util.Arrays 类提供了一个 asList()方法，实现将数组转换成 List对象的功能.</p>\n<p><code>public static &lt;T&gt; List&lt;T&gt; asList(T ...a)</code></p>\n<p>该方法提供了一个从多个元素创建 List 对象的途径，它的功能与 <code>Collection 接口的 toArray()</code>方法相反.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; stringArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;how &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;are &quot;</span>);</span><br><span class=\"line\">        stringArrayList.add(<span class=\"string\">&quot;you &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] strings = stringArrayList.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String string : strings) &#123;</span><br><span class=\"line\">            System.out.print(string + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        List&lt;String&gt; stringList =  Arrays.asList(strings);  <span class=\"comment\">// asList()底层其实就是 调用ArrayList(... a) 构造</span></span><br><span class=\"line\">        stringList.forEach(System.out::print);</span><br><span class=\"line\">        List&lt;String&gt; stringList1 = Arrays.asList(<span class=\"string\">&quot;seize&quot;</span>, <span class=\"string\">&quot;the&quot;</span>, <span class=\"string\">&quot;moment&quot;</span>);</span><br><span class=\"line\">        stringList1.forEach(s-&gt;&#123;System.out.print(s + <span class=\"string\">&quot; &quot;</span>);&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"vector-和-stack\">Vector 和 Stack<a title=\"#vector-和-stack\" href=\"#vector-和-stack\"></a></h3>\n<p>Vector类和Stack类是Java早期版本提供的两个集合类，分别实现<code>向量和对象栈</code>。Vector类和 Stack类的方法都是<code>同步的</code>，适合在<code>多线程</code>的环境中使用.</p>\n<h2 id=\"set接口及其实现类\">Set接口及其实现类<a title=\"#set接口及其实现类\" href=\"#set接口及其实现类\"></a></h2>\n<p>Set 接口是 Collection的子接口，Set 接口对象类似于数学上的集合概念，其中<code>不允许有重复的元素</code>。 Set 接口没有定义新的方法，只包含从Collection接口继承的方法。<br>\nSet 接口的常用实现类有 <code>HashSet 类、 TreeSet 类和 LinkedHashSet类</code> 。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305161456356.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"hashset-类\">HashSet 类<a title=\"#hashset-类\" href=\"#hashset-类\"></a></h3>\n<p>HashSet类用散列方法存储元素，具有最好的存取性能，但元素没有顺序。<br>\nHashing 散列算法最重要的就是 hash函数, 通过实际值与生成哈希值的单射完成高效存取.</p>\n<p><code>HashSet()</code>  创建一个空的散列集合，该集合的默认初始容量是16, 默认装填因子(loadfactor) 是0.75。装填因子决定何时对散列表进行再散列。例如，如果装填因子为0.75(默认值), 而表中超过75%的位置已经填入元素，这个表就会用双倍的桶数自动地进行再散列。对于大多数应用程序来说，装填因子为75%是比较合理的。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>HashSet(Collection c)</code></td>\n<td style=\"text-align:left\">用指定的集合c 的元素创建一个散列集合。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>HashSet(int initialCapacity)</code></td>\n<td style=\"text-align:left\">创建一个散列集合，并指定集合的初始容量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>HashSet(int initialCapacity, float loadFactor)</code></td>\n<td style=\"text-align:left\">创建一个散列集合，并指定的集合初始容量和装填因子</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; words =<span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        words.add(<span class=\"string\">&quot;one&quot;</span>);</span><br><span class=\"line\">        words.add(<span class=\"string\">&quot;two&quot;</span>);</span><br><span class=\"line\">        words.add(<span class=\"string\">&quot;three&quot;</span>);</span><br><span class=\"line\">        words.add(<span class=\"string\">&quot;one&quot;</span>);       <span class=\"comment\">// 重复元素无效</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String word : words) &#123;</span><br><span class=\"line\">            System.out.println(word);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用-set-对象实现集合运算\">用 Set 对象实现集合运算<a title=\"#用-set-对象实现集合运算\" href=\"#用-set-对象实现集合运算\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>sl.addAll(s2)</code></td>\n<td style=\"text-align:left\">实现集合sl 与 s2 的并运算。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sl.retainAll(s2)</code></td>\n<td style=\"text-align:left\">实现集合 s1与 s2 的交运算。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sl.removeAll(s2)</code></td>\n<td style=\"text-align:left\">实现集合 s1 与 s2 的差运算。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sl.containAll(s2)</code></td>\n<td style=\"text-align:left\">如果 s2是 s1 的子集，该方法返回 true。</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"treeset-类\">TreeSet 类<a title=\"#treeset-类\" href=\"#treeset-类\"></a></h3>\n<p>TreeSet实现一种树集合，使用<code>红-黑树</code>为元素排序，添加到 TreeSet 中的元素必须是可比较的，即元素的类必须实现 <code>Comparable&lt;T&gt;</code> 接口。它的操作要比 HashSet 慢。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>TreeSet(Collection c)</code></td>\n<td style=\"text-align:left\">用指定集合c 中的元素创建一个新的树集合，集合中的元素按自然顺序排序。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>TreeSet(Comparator c)</code></td>\n<td style=\"text-align:left\">创建一个空的树集合，元素的排序规则按给定的比较器c 的规则排序。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>TreeSet(SortedSet s)</code></td>\n<td style=\"text-align:left\">用 SortedSet 对象 s 中的元素创建一个树集合，排序规则与 s 的排序规则相同。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"> </td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E first()</code></td>\n<td style=\"text-align:left\">返回有序集合中的第一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E last()</code></td>\n<td style=\"text-align:left\">返回有序集合中最后一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>SortedSet&lt;E&gt; subSet(E fromElement, E toElement)</code></td>\n<td style=\"text-align:left\">返回有序集合中的一个子有序集合，它的元素从 fromElement 开始到 toElement结束(不包括最后元素)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>SortedSet&lt;E&gt; headSet(E toElement)</code></td>\n<td style=\"text-align:left\">返回有序集合中小于指定元素 toElement 的一个子有序集合。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>SortedSet&lt;E&gt; tailSet(E fromElement)</code></td>\n<td style=\"text-align:left\">返回有序集合中大于等于 fromElement 元素的子有序集合。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Comparator&lt;? super E&gt; comparator()</code></td>\n<td style=\"text-align:left\">返回与该有序集合相关的比较器，如果集合使用自然顺序则返回 null</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        String[] strings = &#123;<span class=\"string\">&quot;Swift&quot;</span>, <span class=\"string\">&quot;TypeScript&quot;</span>, <span class=\"string\">&quot;Scala&quot;</span>, <span class=\"string\">&quot;Lisp&quot;</span>, <span class=\"string\">&quot;VBScript&quot;</span>, <span class=\"string\">&quot;Basic&quot;</span>&#125;;</span><br><span class=\"line\">        TreeSet&lt;String&gt; stringSet = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class=\"line\">            stringSet.add(strings[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(stringSet);  <span class=\"comment\">// 按自然顺序排列 // [Basic, Lisp, Scala, Swift, TypeScript, VBScript]</span></span><br><span class=\"line\">        SortedSet&lt;String&gt; sortedSet = stringSet.subSet(<span class=\"string\">&quot;Lisp&quot;</span>, <span class=\"string\">&quot;Swift&quot;</span>);</span><br><span class=\"line\">        System.out.println(sortedSet);  <span class=\"comment\">// [Lisp, Scala]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象顺序\">对象顺序<a title=\"#对象顺序\" href=\"#对象顺序\"></a></h4>\n<p>创建 TreeSet 类对象时如果没有指定比较器对象，集合中的元素按自然顺序排列。所谓自然顺序(natural order)是指集合对象实现了 <code>Comparable 接口的 compareTo()方法</code>，对象则根据该方法排序。如果试图对没有实现 Comparable 接口的集合元素排序，将抛出ClassCastException 异常。另一种排序方法是创建 TreeSet 对象时指定一个比较器对象，这样，元素将按比较器的规则排序。如果需要指定新的比较规则，可以定义一个类实现Comparator 接口，然后为集合提供一个新的比较器.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        String[] strings = &#123;<span class=\"string\">&quot;Swift&quot;</span>, <span class=\"string\">&quot;TypeScript&quot;</span>, <span class=\"string\">&quot;Scala&quot;</span>, <span class=\"string\">&quot;Lisp&quot;</span>, <span class=\"string\">&quot;VBScript&quot;</span>, <span class=\"string\">&quot;Basic&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// TreeSet&lt;String&gt; stringSet = new TreeSet&lt;&gt;(Comparator.reverseOrder());   </span></span><br><span class=\"line\">        <span class=\"comment\">// 传个Comparator 比较器对象使Set红黑树按指定顺序进入</span></span><br><span class=\"line\">        TreeSet&lt;String&gt; stringSet = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;&gt;((String s1, String s2) -&gt; s2.compareTo(s1));  <span class=\"comment\">// 或者Lambda表达式</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class=\"line\">            stringSet.add(strings[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(stringSet);   </span><br><span class=\"line\">        <span class=\"comment\">// [VBScript, TypeScript, Swift, Scala, Lisp, Basic]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"queue-接口及其实现类\">Queue 接口及其实现类<a title=\"#queue-接口及其实现类\" href=\"#queue-接口及其实现类\"></a></h2>\n<p>Queue接口是Collection的子接口，是以先进先出 (first in first out,FIFO)的方式排列其元素，一般称为队列。</p>\n<p>Deque 接口对象实现双端队列，ArrayDeque 和 LinkedList 是它的两个实现类。<br>\nPriorityQueue 实现的是一种优先队列，优先队列中元素的顺序是根据元素的值排列的.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305162100313.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"queue-接口和-deque-接口\">Queue 接口和 Deque 接口<a title=\"#queue-接口和-deque-接口\" href=\"#queue-接口和-deque-接口\"></a></h3>\n<p>Queue 接口除了提供 Collection的操作外, 还提供了插入、删除和检查操作。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>boolean add(E e)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean offer(E e)</code></td>\n<td style=\"text-align:left\">将指定的元素 e 插入到队列中。 失败add抛出异常, offer返回false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"> </td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E remove()</code></td>\n<td style=\"text-align:left\">返回队列头元素，同时将其删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E poll()</code></td>\n<td style=\"text-align:left\">返回队列头元素，同时将其删除。 失败remove抛出异常, poll返回null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"> </td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E element()</code></td>\n<td style=\"text-align:left\">返回队列头元素，但不将其删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>E peek() </code></td>\n<td style=\"text-align:left\">返回队列头元素，但不将其删除。 失败element抛出异常, peek返回null</td>\n</tr>\n</tbody>\n</table></div></div><p>Queue 接口的每种操作都有两种形式：一个是在操作失败时抛出异常；另一个是在操作失败时返回一个特定的值(根据操作的不同，可能返回 null或 false)</p>\n<p>Deque 接口实现双端队列，支持从两端插入和删除元素，同时实现了 Stack 和 Queue 的功能。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305162112698.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>第一个方法在操作失败时抛出异常；第二个方法操作失败返回一个特殊值。除表中定义的基本方法外, Deque 接口还定义了 removeFirstOccurence() 和 removeLastOccurence()方法，分别用于删除第一次出现的元素，删除最后出现的元素.</p>\n<h3 id=\"arraydeque-类和-linkedlist-类\">ArrayDeque 类和 LinkedList 类<a title=\"#arraydeque-类和-linkedlist-类\" href=\"#arraydeque-类和-linkedlist-类\"></a></h3>\n<p>Deque 的常用实现类包括 <code>ArrayDeque类和LinkedList</code>类，前者是<code>可变数组</code>的实现；后者是<code>线性表</code>的实现。LinkedList类比 ArayDeque类更灵活，实现了线性表的所有操作，其中可以存储null元素，但ArrayDeque 对象不能存储null.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayDeque&lt;String&gt; arrayDeque = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        arrayDeque.add(<span class=\"string\">&quot;till &quot;</span>);</span><br><span class=\"line\">        arrayDeque.offerFirst(<span class=\"string\">&quot;it &quot;</span>);</span><br><span class=\"line\">        arrayDeque.addFirst(<span class=\"string\">&quot;fake &quot;</span>);</span><br><span class=\"line\">        arrayDeque.offerLast(<span class=\"string\">&quot;you &quot;</span>);</span><br><span class=\"line\">        arrayDeque.add(<span class=\"string\">&quot;make &quot;</span>);</span><br><span class=\"line\">        arrayDeque.addLast(<span class=\"string\">&quot;it. &quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        arrayDeque.forEach(System.out::print);</span><br><span class=\"line\">        arrayDeque.forEach(<span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">                System.out.print(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        arrayDeque.forEach(x -&gt; System.out.print(x));</span><br><span class=\"line\">        Iterator&lt;String&gt; stringIterator = arrayDeque.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(stringIterator.hasNext()) System.out.print(stringIterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : arrayDeque) &#123; System.out.print(s);&#125;</span><br><span class=\"line\">        <span class=\"comment\">// 几种遍历练习练习</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LinkedList允许null元素, 如果需要经常在线性表的头部添加元素或在内部删除元素，就应该使用LinkedList。这些操作在LinkedList中是常量时间，在ArrayList中是线性时间。而对定位访问LinkedList是线性时间，ArrayList是常量时间。<br>\n就是链表和顺序表的区别.<br>\n<code>LinkedList 同时实现了List 接口和Queue 接口</code>.</p>\n<p><code>LinkedList()</code><br>\n<code>LinkedList(Collection c)</code><br>\n<code>addFirst()、getFirst()、removeFirst()、addLast()、getLast() removeLast()</code>…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Queue&lt;String&gt; stringQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        stringQueue.add(<span class=\"string\">&quot;loading...&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">bar</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;██████████████████████████████&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; i &lt; bar.length() + <span class=\"number\">1</span>; i+= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            stringQueue.add(bar.substring(<span class=\"number\">0</span>,i) + <span class=\"string\">&quot;  &quot;</span> + i/<span class=\"number\">3</span>*<span class=\"number\">10</span> + <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stringQueue.add(<span class=\"string\">&quot;done!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stringQueue.isEmpty()) &#123;</span><br><span class=\"line\">            System.out.println(stringQueue.remove());</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305162207311.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"集合转换\">集合转换<a title=\"#集合转换\" href=\"#集合转换\"></a></h2>\n<p>集合实现类的构造方法可以接收一个Collection对象, 转换成该类型的集合. 所以许多集合类型之间可以相互转换.</p>\n<p><code>public ArrayList(Collection c)</code><br>\n<code>public HashSet(Collection c)</code><br>\n<code>public LinkedList(Collection c)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HashSet&lt;Integer&gt; integerHashSet = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        integerHashSet.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        integerHashSet.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        LinkedList&lt;Integer&gt; integerLinkedList = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;(integerHashSet);</span><br><span class=\"line\">        integerLinkedList.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">        integerLinkedList.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(integerLinkedList);  <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"map-接口及其实现类\">Map 接口及其实现类<a title=\"#map-接口及其实现类\" href=\"#map-接口及其实现类\"></a></h2>\n<p>Map 是用来存储“键/值”对的对象。在 Map 中存储的<code>关键字和值都必须是对象</code>，并要求<code>关键字唯一</code>的，而值可以重复.<br>\nMap接口常用的实现类有 HashMap类、TreeMap类、Hashtable类和 LinkedHashMap类。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305162222926.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"基本操作-1\">基本操作<a title=\"#基本操作-1\" href=\"#基本操作-1\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public V put(K key, V value)</code></td>\n<td style=\"text-align:left\">向映射对象中添加一个“键/值”对。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public V get(Object key)</code></td>\n<td style=\"text-align:left\">返回指定键的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public V remove(Object key)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean containsKey(Object key)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean containsValue(Object value)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>default V replace(K key,V value)</code></td>\n<td style=\"text-align:left\">若指定的“键/值”对存在于映射中，用指定的“键/值&quot;对替换之。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>default void forEach(BiConsumer&lt;? super K,? super V)</code></td>\n<td style=\"text-align:left\">对映射中的每项执行一次动作，直到所有项处理完或发生异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int size()</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean isEmpty()</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"批量操作-1\">批量操作<a title=\"#批量操作-1\" href=\"#批量操作-1\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public void putAll(Map&lt;? extends K,? extends V&gt; map)</code></td>\n<td style=\"text-align:left\">将参数 map 中的所有“键/值&quot;对添加到映射中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public void clear()</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public Set&lt;K&gt;keySet()</code></td>\n<td style=\"text-align:left\">返回由键组成的 Set对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public Collection&lt;V&gt;values()</code></td>\n<td style=\"text-align:left\">返回由值组成的 Collection对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt;entrySet()</code></td>\n<td style=\"text-align:left\">返回包含 Map.Entry&lt;K,V&gt;的一个 Set对象</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"map-接口实现类\">Map 接口实现类<a title=\"#map-接口实现类\" href=\"#map-接口实现类\"></a></h3>\n<p>常用实现类有<code>HashMap、TreeMap和 Hashtable</code>类</p>\n<h4 id=\"hashmap-类\">HashMap 类<a title=\"#hashmap-类\" href=\"#hashmap-类\"></a></h4>\n<p>HashMap类以散列方法存放“键/值”对</p>\n<p><code>HashMap()</code> 创建一个空的映射对象，使用默认的装填因子(0.75)。<br>\n<code>HashMap(int initialCapacity)</code> 用指定初始容量和默认装填因子创建一个映射对象。<br>\n<code>HashMap(Map m)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt;  nameList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"string\">&quot;John&quot;</span>, <span class=\"string\">&quot;Amy&quot;</span>, <span class=\"string\">&quot;Tim&quot;</span>));</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; scoreList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"number\">60</span>, <span class=\"number\">53</span>, <span class=\"number\">88</span>, <span class=\"number\">99</span>));</span><br><span class=\"line\">        <span class=\"comment\">// Java的方法感觉比C++更好理解, 命名知其义, 注解也很全. 并且IDEA比VS智能多了</span></span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nameList.size(); i++) &#123;</span><br><span class=\"line\">            map.put(nameList.get(i), scoreList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.forEach((k, v) -&gt; &#123; System.out.printf(<span class=\"string\">&quot;%-10s%d\\n&quot;</span>, k, v);&#125;);</span><br><span class=\"line\">        <span class=\"comment\">//slacr     60</span></span><br><span class=\"line\">        <span class=\"comment\">//John      53</span></span><br><span class=\"line\">        <span class=\"comment\">//Tim       99</span></span><br><span class=\"line\">        <span class=\"comment\">//Amy       88</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"treemap-类\">TreeMap 类<a title=\"#treemap-类\" href=\"#treemap-类\"></a></h4>\n<p><code>TreeMap 类实现了SortedMap 接口</code>，保证Map 中的“键/值”对按关键字升序排序。</p>\n<p><code>TreeMap()</code><br>\n<code>TreeMap(Comparator c)</code><br>\n<code>TreeMap(Map m)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt;  nameList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"string\">&quot;John&quot;</span>, <span class=\"string\">&quot;Amy&quot;</span>, <span class=\"string\">&quot;Tim&quot;</span>));</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; scoreList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"number\">60</span>, <span class=\"number\">53</span>, <span class=\"number\">88</span>, <span class=\"number\">99</span>));</span><br><span class=\"line\">        TreeMap&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String o1, String o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> scoreList.get(nameList.indexOf(o2)) - scoreList.get(nameList.indexOf(o1));    <span class=\"comment\">// map先放入的后输出</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);     <span class=\"comment\">// 按成绩高低排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nameList.size(); i++) &#123;</span><br><span class=\"line\">            map.put(nameList.get(i), scoreList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.forEach(<span class=\"keyword\">new</span> <span class=\"title class_\">BiConsumer</span>&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(String k, Integer v)</span> &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;No.%-5d%-10s%d\\n&quot;</span>,i, k, v);</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//No.1    Tim       99</span></span><br><span class=\"line\">        <span class=\"comment\">//No.2    Amy       88</span></span><br><span class=\"line\">        <span class=\"comment\">//No.3    slacr     60</span></span><br><span class=\"line\">        <span class=\"comment\">//No.4    John      53</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hashtable-类和-enumeration-接口\">Hashtable 类和 Enumeration 接口<a title=\"#hashtable-类和-enumeration-接口\" href=\"#hashtable-类和-enumeration-接口\"></a></h4>\n<p>Hashtable类是 Java 早期版本提供的一个存放“键/值”对的实现类，实现了一种散列表，也属于集合框架。Hashtable类的方法都是同步的，因此它是线程安全的。<br>\n任何非null对象都可以作为散列表的关键字和值。但是要求作为关键字的对象必须实现 <code>hashCode()方法和equals()</code>方法，以使对象的比较成为可能。<br>\nHashtable类的 keys()方法和elements()方法的返回类型都是 <code>Enumeration</code> 接口类型的对象，通过该接口中hasMoreElements()方法和nextElement()方法可以对枚举对象元素迭代</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Hashtable&lt;Integer, String&gt; hashtable = <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>&lt;&gt;();</span><br><span class=\"line\">        hashtable.put(<span class=\"number\">1</span>, <span class=\"string\">&quot;王二&quot;</span>);</span><br><span class=\"line\">        hashtable.put(<span class=\"number\">2</span>, <span class=\"string\">&quot;陈清扬&quot;</span>);</span><br><span class=\"line\">        hashtable.put(<span class=\"number\">3</span>, <span class=\"string\">&quot;罗小四&quot;</span>);</span><br><span class=\"line\">        hashtable.put(<span class=\"number\">4</span>, <span class=\"string\">&quot;军代表&quot;</span>);</span><br><span class=\"line\">        hashtable.put(<span class=\"number\">5</span>, <span class=\"string\">&quot;敦敦伟大友谊&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> hashtable.get(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        Enumeration&lt;String&gt; words = hashtable.elements();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (words.hasMoreElements()) System.out.println(words.nextElement());</span><br><span class=\"line\">        <span class=\"comment\">//敦敦伟大友谊   map 先入后出</span></span><br><span class=\"line\">        <span class=\"comment\">//敦敦伟大友谊</span></span><br><span class=\"line\">        <span class=\"comment\">//军代表</span></span><br><span class=\"line\">        <span class=\"comment\">//罗小四</span></span><br><span class=\"line\">        <span class=\"comment\">//陈清扬</span></span><br><span class=\"line\">        <span class=\"comment\">//王二</span></span><br><span class=\"line\">        <span class=\"comment\">// map一些遍历</span></span><br><span class=\"line\">        hashtable.forEach((k, v) -&gt; System.out.println(k + <span class=\"string\">&quot;  &quot;</span> + v));    <span class=\"comment\">// 遍历键值对</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Integer k : hashtable.keySet()) System.out.print(k + <span class=\"string\">&quot;  &quot;</span>);  <span class=\"comment\">// keySet()返回key的set对象, 遍历键</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        hashtable.keySet().forEach(i-&gt; System.out.print(i+<span class=\"string\">&quot;  &quot;</span>));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Iterator&lt;Integer&gt; it = hashtable.keySet().iterator(); it.hasNext(); )</span><br><span class=\"line\">            System.out.print(it.next()+<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        hashtable.values().forEach(System.out::println);   <span class=\"comment\">// values() 返回 Collection 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        hashtable.entrySet().forEach((Map.Entry&lt;Integer, String&gt; entry) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(entry.getKey() + <span class=\"string\">&quot;  &quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// entrySet() 返回  Set&lt;Map.Entry&lt;K,V&gt;&gt;, 可以再用相当于将Map中每一个Entry条目再组合成一个Set, 可以按Set容器遍历</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"collections-类\">Collections 类<a title=\"#collections-类\" href=\"#collections-类\"></a></h2>\n<p><code>Collections类是java.util包中定义的工具类</code>，这个类提供了若干static方法实现集合对象的操作。这些操作大多对List操作，主要包括排序、重排、查找、求极值以及常规操作等。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>排序</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static&lt;T&gt;void sort(List&lt;T&gt;list)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static&lt;T&gt; void sort(List&lt;T&gt;list, Comparator&lt;? super T&gt;c)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>查找</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static&lt;T&gt; int binarySearch(List&lt;T&gt; list, T key)</code></td>\n<td style=\"text-align:left\">List需要sorted 如果 List包含要查找的元素，方法返回元素的下标，否则返回值为(-插入点-1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static &lt;T&gt;int binarySearch(List&lt;T&gt; list, T key, Comparator c)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>打乱元素次序</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static void shuffle(List&lt;?&gt; list)</code></td>\n<td style=\"text-align:left\">使用默认的随机数打乱 List中元素的次序。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static void shuffle(List&lt;?&gt; list, Random rnd)</code></td>\n<td style=\"text-align:left\">使用指定的Random 对象，打乱List 中元素的次序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>求极值</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static  &lt;T&gt;T max(Collection&lt;? extends T&gt;coll)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static &lt;T&gt;T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static &lt;T&gt;T min(Collection&lt;? extends T&gt;coll)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static &lt;T&gt;T min(Collection&lt;? extends T&gt;coll, Comparator&lt;? super T&gt;comp)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>其他常用</strong></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static void reverse(List&lt;?&gt;list)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static void fill(List&lt;? super T&gt;list,T obj)</code></td>\n<td style=\"text-align:left\">用指定的值覆盖List中原来的每个值，该方法主要用于对 List进行重新初始化。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static void copy(List&lt;? super T&gt; dest,List&lt;? extends T&gt; src)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static void swap(List&lt;?&gt;list, int i, int j)</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static void rotate(List&lt;?&gt; list, int distance)</code></td>\n<td style=\"text-align:left\">旋转列表，将 i 位置的元素移动到(i+distance)%list.size() 的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt;c, T ...elements)</code></td>\n<td style=\"text-align:left\">该方法用于将指定的元素添加到集合 c 中，可以指定单个元素或数组。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static int frequency(Collection&lt;?&gt;c, Object o)</code></td>\n<td style=\"text-align:left\">返回指定的元素o 在集合c 中出现的次数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean disjoint(Collection&lt;?&gt;cl, Collection&lt;?&gt;c2)</code></td>\n<td style=\"text-align:left\">判断两个集合是否不相交。如果两个集合不包含相同的元素，该方法返回 true。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; integerArrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>));</span><br><span class=\"line\">        Collections.sort(integerArrayList, Comparator.reverseOrder());</span><br><span class=\"line\">        System.out.println(integerArrayList);</span><br><span class=\"line\">        Collections.shuffle(integerArrayList);</span><br><span class=\"line\">        System.out.println(integerArrayList);</span><br><span class=\"line\">        Collections.reverse(integerArrayList);</span><br><span class=\"line\">        System.out.println(integerArrayList);</span><br><span class=\"line\">        <span class=\"comment\">//[7, 6, 5, 4, 3, 2, 1]</span></span><br><span class=\"line\">        <span class=\"comment\">//[5, 1, 7, 2, 4, 6, 3]</span></span><br><span class=\"line\">        <span class=\"comment\">//[3, 6, 4, 2, 7, 1, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            map.put(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"string\">&quot;John&quot;</span>, <span class=\"string\">&quot;Amy&quot;</span>, <span class=\"string\">&quot;Tim&quot;</span>)).get(i),</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"number\">60</span>, <span class=\"number\">53</span>, <span class=\"number\">88</span>, <span class=\"number\">99</span>)).get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Collections.max(map.entrySet(), (entry1, entry2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entry1.getValue() - entry2.getValue();</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        <span class=\"comment\">//Tim=99</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"stream-api\">Stream API<a title=\"#stream-api\" href=\"#stream-api\"></a></h2>\n<p>流 (stream) 就像一个管道，将数据从源传输到目的地。流可分为顺序流和并行流。<br>\n流初看起来像集合，但流并不是存储对象的数据结构，仅<code>用来移动数据</code>，因此不能像集合一样向流中添加元素<br>\n使用流的主要原因是它支持顺序和并行的聚集操作。例如，可以很容易地过滤、排序或转换流中的元素<br>\nStream接口是最常用的类型。 Stream 对象可用来传输任何类型的对象。还有一些特殊的 Stream,如 IntStream、LongStream、DoubleStream等。上述的 Stream 都派生自 BaseStream。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171150522.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Stream 的有些方法执行中间操作，有些方法执行终止操作。中间操作是将一个流转换成另一个流，sorted、filter和 map 方法执行中间操作。终止操作产生一个最终结果， count、forEach 方法执行终止操作。流操作是延迟的，在源上的计算只有当终止操作开始时才执行.</p>\n<h3 id=\"创建与获得流\">创建与获得流<a title=\"#创建与获得流\" href=\"#创建与获得流\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Stream.of() 静态方法创建一个顺序流</span></span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        String[] strings = &#123;<span class=\"string\">&quot;Victor&quot;</span>, <span class=\"string\">&quot;Deque&quot;</span>, <span class=\"string\">&quot;Set&quot;</span>, <span class=\"string\">&quot;Map&quot;</span>&#125;;</span><br><span class=\"line\">        Stream&lt;String&gt; stringStream = Arrays.stream(strings);  <span class=\"comment\">// Arrays stream()将数组转换为流对象</span></span><br><span class=\"line\">        <span class=\"comment\">//default java.util.stream.Stream&lt;E&gt; stream();</span></span><br><span class=\"line\">        <span class=\"comment\">//default java.util.stream.Stream&lt;E&gt; parallelStream(); Collection接口中返回流对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;? extends T&gt; s)</span></span><br><span class=\"line\">        Stream&lt;Double&gt; randoms = Stream.generate(Math::random);   <span class=\"comment\">// 无限流</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class=\"line\">        Stream&lt;BigInteger&gt; integerStream = Stream.iterate(BigInteger.ZERO, n-&gt;n.add(BigInteger.ONE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接与限制流\">连接与限制流<a title=\"#连接与限制流\" href=\"#连接与限制流\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Stream&lt;Integer&gt; s1 = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        Stream&lt;Integer&gt; s2 = Stream.of(<span class=\"number\">4</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        Stream&lt;Integer&gt; s3 = Stream.of(<span class=\"number\">6</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span><br><span class=\"line\">        <span class=\"comment\">// Stream.concat(Stream.concat(s1, s2), s3).sorted().forEach(System.out::print); // 123456</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);</span></span><br><span class=\"line\">        Stream.concat(Stream.concat(s1, s2), s3).sorted(Comparator.reverseOrder()).forEach(System.out::print); <span class=\"comment\">// 654321</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        Stream&lt;Double&gt; randoms = Stream.generate(() -&gt; Double.valueOf(String.format(<span class=\"string\">&quot;%.2f&quot;</span>, Math.random()))).limit(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// limit() 限制流长度, 截断流</span></span><br><span class=\"line\">        randoms.forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过滤流\">过滤流<a title=\"#过滤流\" href=\"#过滤流\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        stream = stream.filter(i -&gt; i&gt;<span class=\"number\">3</span>);</span><br><span class=\"line\">        stream.forEach(System.out::println); <span class=\"comment\">// 4 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Path</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;..&quot;</span>);</span><br><span class=\"line\">        Stream&lt;Path&gt; list = Files.walk(parent);</span><br><span class=\"line\">        list.filter((Path p) -&gt; p.toString().endsWith(<span class=\"string\">&quot;.java&quot;</span>)).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"流转换\">流转换<a title=\"#流转换\" href=\"#流转换\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Stream&lt;Character&gt; characterStream = Stream.of(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//   &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span></span><br><span class=\"line\">        Stream&lt;Integer&gt; integerStream = characterStream.map((character -&gt; &#123;<span class=\"keyword\">return</span> Integer.valueOf(character);&#125;));</span><br><span class=\"line\">        integerStream.forEach(System.out::println);  <span class=\"comment\">// 65 66 67</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"流规约\">流规约<a title=\"#流规约\" href=\"#流规约\"></a></h3>\n<p>经常需要从流中获得一个结果，如返回流中元素的数量。此时，可以使用流的 count()方法实现。这样的方法称为规约方法 (reduction),规约是终止操作。Stream接口提供了几个简单的规约方法，除count()方法外，还有max()和min()方法，它们分别返回流中的最大值和最小值。需要注意的是，这两个方法返回一个Optional<T>类型的值，它可能会封装返回值，也可能表示没有返回(当流为空时).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Stream&lt;Character&gt; characterStream = Stream.of(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//   &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span></span><br><span class=\"line\">        Stream&lt;Integer&gt; integerStream = characterStream.map((character -&gt; &#123;<span class=\"keyword\">return</span> Integer.valueOf(character);&#125;));</span><br><span class=\"line\">        <span class=\"comment\">// integerStream.forEach(System.out::println);  // 65 66 67</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//   Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);</span></span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(integerStream.max(Comparator.reverseOrder())); Optional[65]</span></span><br><span class=\"line\">        System.out.println(integerStream.max(Comparator.reverseOrder()).get()); <span class=\"comment\">// 65</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"收集结果\">收集结果<a title=\"#收集结果\" href=\"#收集结果\"></a></h3>\n<p>当处理完流后，可能需要查看结果或将结果收集到其他容器中。可以使用 iterator()方法，该方法可以生成一个能够用来访问元素的传统迭代器。<br>\n调用toArray()方法获得一个含有流中所有元素的数组。因为<code>不可能在运行时创建一个泛型数组，所以表达式 stream.toArray()返回一个 Object[]类型数组</code>。如果想获得相应类型数组，可以将类型传递给数组的构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Stream&lt;String&gt; stringStream = Stream.of(<span class=\"string\">&quot;gone&quot;</span>, <span class=\"string\">&quot;with&quot;</span>, <span class=\"string\">&quot;the&quot;</span>, <span class=\"string\">&quot;wind&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span></span><br><span class=\"line\">        String[] res = stringStream.toArray(String[]::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">        ArrayList&lt;String&gt; arrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(List.of(res));</span><br><span class=\"line\">        System.out.println(arrayList);</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;String&gt; stringStream1 = Stream.of(<span class=\"string\">&quot;gone&quot;</span>, <span class=\"string\">&quot;with&quot;</span>, <span class=\"string\">&quot;the&quot;</span>, <span class=\"string\">&quot;wind&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">LinkedList</span> <span class=\"variable\">linkedList</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;(stringStream1.toList());</span><br><span class=\"line\">        System.out.println(linkedList);</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;String&gt; stringStream2 = Stream.of(<span class=\"string\">&quot;gone&quot;</span>, <span class=\"string\">&quot;with&quot;</span>, <span class=\"string\">&quot;the&quot;</span>, <span class=\"string\">&quot;wind&quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; list = stringStream2.collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;String&gt; stringStream3 = Stream.of(<span class=\"string\">&quot;gone&quot;</span>, <span class=\"string\">&quot;with&quot;</span>, <span class=\"string\">&quot;the&quot;</span>, <span class=\"string\">&quot;wind&quot;</span>);</span><br><span class=\"line\">        Set&lt;String&gt; set = stringStream3.collect(Collectors.toSet());</span><br><span class=\"line\">        System.out.println(set);</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;String&gt; stringStream4 = Stream.of(<span class=\"string\">&quot;gone&quot;</span>, <span class=\"string\">&quot;with&quot;</span>, <span class=\"string\">&quot;the&quot;</span>, <span class=\"string\">&quot;wind&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TreeSet</span> <span class=\"variable\">treeSet</span> <span class=\"operator\">=</span> stringStream4.collect(Collectors.toCollection(TreeSet::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">        System.out.println(treeSet);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//[gone, with, the, wind]</span></span><br><span class=\"line\">        <span class=\"comment\">//[gone, with, the, wind]</span></span><br><span class=\"line\">        <span class=\"comment\">//[gone, with, the, wind]</span></span><br><span class=\"line\">        <span class=\"comment\">//[the, with, gone, wind]</span></span><br><span class=\"line\">        <span class=\"comment\">//[gone, the, wind, with]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本类型流\">基本类型流<a title=\"#基本类型流\" href=\"#基本类型流\"></a></h3>\n<p>对于基本类型，可以使用其包装类创建流，如 Stream<Integer>。为了直接将基本类型值存储到流中而不需要进行包装，Stream类库提供了<code>IntStream、LongStream DoubleStream</code>类型，对 short、char、byte、boolean类型使用 IntStream类型，对 float使用DoubleStream类型</p>\n<p>当拥有一个对象流时，可以使用 mapToInt()、mapToLong()或mapToDouble() 方法将其转换成基本类型流.<br>\n<code>Stream&lt;String&gt; words = Stream.of(&quot;this&quot;,&quot;is&quot;,&quot;a&quot;,&quot;java&quot;,&quot;string&quot;);</code><br>\n<code>IntStream lengths = words.mapToInt(String::length);</code></p>\n<p>要将一个基本类型流转换成一个对象流，可以使用 boxed()方法。<br>\n<code>Stream&lt;Integer&gt; integers = IntStream.range(0,100).boxed();</code><br>\n基本类型流还定义了许多方法</p>\n<p>Random 类中提供了 ints()、longs()、doubles() 方法，它们返回包含随机数的基本类型流.</p>\n<h3 id=\"并行流\">并行流<a title=\"#并行流\" href=\"#并行流\"></a></h3>\n<p>可以并行执行多个线程, 流使得并行计算变得容易。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">fibonacci</span><span class=\"params\">(<span class=\"type\">long</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fibonacci(n-<span class=\"number\">1</span>) + fibonacci(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; nums = Arrays.asList(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span> ,<span class=\"number\">40</span>, <span class=\"number\">41</span>, <span class=\"number\">42</span>, <span class=\"number\">43</span>);</span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\">        nums.parallelStream().map(i-&gt;fibonacci(i)).forEach(System.out::println);</span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;parallelStream period:  &quot;</span> + Duration.between(start, end).toMillis() + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        start = Instant.now();</span><br><span class=\"line\">        nums.stream().map(i-&gt;fibonacci(i)).forEach(System.out::println);</span><br><span class=\"line\">        end = Instant.now();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sequentialStream period:  &quot;</span> + Duration.between(start, end).toMillis() + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305171337039.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>从结果可以看到，使用并行流计算时间要比使用顺序流短。使用并行流时，输出也可能不是按顺序输出的。<br>\n然而，使用并行流并不是总能使程序运行得更快。对某些特定任务，在决定使用并行流之前应该测试并行流是否比顺序流更快。</p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>接口或者更普遍的抽象类, 不能直接实例化对象是应为其中的抽象方法需要实现, 有两种方法可以创建抽象类的对象, 第一种最常见的使用非抽象的子类上转型, 第二种用new初始化的时候给出匿名实现类(相当于给出抽象方法的实现).</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/10/[Java%E7%AC%94%E8%AE%B0]%E6%8E%A5%E5%8F%A3&Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://s1acr.github.io/2023/05/10/[Java%E7%AC%94%E8%AE%B0]%E6%8E%A5%E5%8F%A3&Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "[Java笔记]接口&Lambda表达式",
            "date_published": "2023-05-10T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>Java 笔记</p>\n</blockquote>\n<h2 id=\"接口\">接口<a title=\"#接口\" href=\"#接口\"></a></h2>\n<p>接口 (interface)定义了一种可以被类层次中任何类实现行为的协议，是<code>常量、抽象方法、默认方法和静态方法</code>的集合。接口可以用来实现多重继承。<br>\n接口被看作是一种特殊的类型。与常规类一样，每个接口都被编译为独立的字节码文件。使用接口与使用抽象类相似。接口可以作为引用变量的数据类型或类型转换的结果等。与抽象类一样，不能用 new运算符创建接口的实例.<br>\n接口中的抽象方法只有声明，没有实现。抽象方法也可以省略修饰符，省略修饰符编译器自动加上<br>\n<code>public abstract</code><br>\n接口通常表示某种能力，因此接口名后缀通常是 able</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceName</span> [<span class=\"keyword\">extends</span> <span class=\"title class_\">SuperInterfaces</span> ]&#123;</span><br><span class=\"line\"><span class=\"comment\">//1.常量的定义</span></span><br><span class=\"line\"><span class=\"comment\">//2.抽象方法的定义</span></span><br><span class=\"line\"><span class=\"comment\">//3.静态方法的定义</span></span><br><span class=\"line\"><span class=\"comment\">//4.默认方法的定义</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InterfaceList</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//类体定义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果实现接口的类不是 abstract类，则在类的定义部分必须实现接口中的所有抽象方法，即必须保证非 abstract类中不能存在 abstract方法。<br>\n接口方法的访问修饰符都是 public, 所以类在实现方法时，必须显式使用 public 修饰符，否则编译器警告缩小了访问控制范围.<br>\n定义在<code>接口中的变量</code>都自动加上<code>public、final、static</code>属性，因此它们都是常量，<br>\n常量的定义可以省略修饰符，下面三行代码效果相同.<br>\n<code>int STATUS = 100;</code><br>\n<code>public int STATUS = 100;</code><br>\n<code>public final static int STATUS = 100;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">capable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">thinkable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">desire</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">capable</span>, thinkable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String capability, desire;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am capable of &quot;</span> + capability);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">desire</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I wanna &quot;</span> + desire);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person (String capability, String desire) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.desire = desire;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.capability = capability;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">slacr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;writing Java&quot;</span>, <span class=\"string\">&quot;hava a rest&quot;</span>);</span><br><span class=\"line\">        slacr.work();</span><br><span class=\"line\">        slacr.desire();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认方法与接口继承\">默认方法与接口继承<a title=\"#默认方法与接口继承\" href=\"#默认方法与接口继承\"></a></h3>\n<p>与类的继承类似，子接口继承父接口中的<code>常量、抽象方法、默认方法</code>， 除了静态方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">int01</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">STATUS</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fn_1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;default method from int01&quot;</span>); <span class=\"comment\">// 默认方法, 可以被子接口和实现类继承， 接口中需要给出实现, 子类无需给出实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">int02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;default method from int02&quot;</span>); <span class=\"comment\">// 默认方法, 接口中需要给出实现, 子类无需给出实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">int03</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int01</span>, int02 &#123;  <span class=\"comment\">// 接口可以多继承, 类只能单继承</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">// 这里如果不覆盖默认方法会报错, 不能确定相同签名的默认方法, C++中就不会,</span></span><br><span class=\"line\">        int01.<span class=\"built_in\">super</span>.test();  <span class=\"comment\">// 委托一个父接口的默认方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">int04</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test in class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">int05</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int04</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">int02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fn5</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">// 同时实现一个接口和继承一个类, 类中有同名方法, 继承的优先级要比接口默认方法高,</span></span><br><span class=\"line\">        test();            <span class=\"comment\">// 优先调用继承来的方法.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Switch</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">int01</span>, int03, int02 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fn_1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;fn_1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Switch</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Switch</span>();</span><br><span class=\"line\">        System.out.println(s.STATUS);</span><br><span class=\"line\">        s.fn_1();</span><br><span class=\"line\">        s.test();</span><br><span class=\"line\">        <span class=\"comment\">// 0</span></span><br><span class=\"line\">        <span class=\"comment\">//fn_1</span></span><br><span class=\"line\">        <span class=\"comment\">//default method from int01</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>接口是特殊的抽象类, 接口只能继承接口, 类只能实现接口(某种程度上的继承).</p>\n<h3 id=\"接口类型使用\">接口类型使用<a title=\"#接口类型使用\" href=\"#接口类型使用\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test static interface method&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>,B &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span>, B, C&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();            <span class=\"comment\">// 上转型对象，和C++中的隐式类型转换差不多</span></span><br><span class=\"line\">        <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();</span><br><span class=\"line\">        <span class=\"type\">C</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();</span><br><span class=\"line\">        <span class=\"type\">D</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">D</span>();</span><br><span class=\"line\">        System.out.println(a.a);</span><br><span class=\"line\">        System.out.println(b.b);</span><br><span class=\"line\">        System.out.println(c.a + <span class=\"string\">&quot; &quot;</span>+ c.b + <span class=\"string\">&quot; &quot;</span> + c.c);</span><br><span class=\"line\">        System.out.println(d.a + <span class=\"string\">&quot; &quot;</span> + d.b + <span class=\"string\">&quot; &quot;</span> + d.c + <span class=\"string\">&quot; &quot;</span> + d.d);</span><br><span class=\"line\"></span><br><span class=\"line\">        A.test();   <span class=\"comment\">// 接口中静态方法和普通类中的差不多，只不过接口和抽象类不能实例化，只能类名调用</span></span><br><span class=\"line\">        <span class=\"comment\">//1</span></span><br><span class=\"line\">        <span class=\"comment\">//2</span></span><br><span class=\"line\">        <span class=\"comment\">//1 2 3</span></span><br><span class=\"line\">        <span class=\"comment\">//1 2 3 4</span></span><br><span class=\"line\">        <span class=\"comment\">//test static interface method</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"comparable接口\">Comparable接口<a title=\"#comparable接口\" href=\"#comparable接口\"></a></h3>\n<p>Java类库中也定义了许多接口，有些接口中没有定义任何方法，这些接口称为标识接口，如java.lang包中定义的 Cloneable接口、java.io包中的 Serializable接口。有些接口中定义了若干方法，如java.lang包中Comparable接口中定义的comapreTo()方法、AutoClosable接口定义的 close()方法、Runnable 接口中定义的 run()方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">Comparable</span>&lt;Circle&gt;&#123;   <span class=\"comment\">// 实现Comparable接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> r;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> area;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Circle</span> <span class=\"params\">(<span class=\"type\">double</span> r)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.r = r;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.area = Math.PI*r*r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(Circle c)</span> &#123;    <span class=\"comment\">// 实现compareTo方法, 使得两个对象能够比较</span></span><br><span class=\"line\">        <span class=\"comment\">// return this.area &gt; c.area ? 1 : (this.area == c.area ? 0 : -1 );</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Double.compare(<span class=\"built_in\">this</span>.area, c.area);</span><br><span class=\"line\">        <span class=\"comment\">// 或者使用Double类的compare方法比较浮点数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Circle</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Circle</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"type\">Circle</span> <span class=\"variable\">c11</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(c1.compareTo(c2));   <span class=\"comment\">// -1</span></span><br><span class=\"line\">        System.out.println(c2.compareTo(c1));   <span class=\"comment\">// 1</span></span><br><span class=\"line\">        System.out.println(c1.compareTo(c11));  <span class=\"comment\">// 0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JavaAPI中许多类实现了 Comparable<T>接口，如基本数据类型包装类 (Byte、Short、Integer、Long、Float、Double、Character、Boolean)。File类、String类、LocalDate 类、BigInteger类和 BigDecimal类也实现了 Comparable<T>接口，这些类的对象都可按自然顺序排序.</p>\n<h3 id=\"comparator-接口\">Comparator 接口<a title=\"#comparator-接口\" href=\"#comparator-接口\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> &#123;   <span class=\"comment\">// 实现Comparable接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> r;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> area;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Circle</span> <span class=\"params\">(<span class=\"type\">double</span> r)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.r = r;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.area = Math.PI*r*r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format( <span class=\"string\">&quot;%.2f&quot;</span>, <span class=\"built_in\">this</span>.area) + <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CircleComparator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparator</span>&lt;Circle&gt;&#123;   <span class=\"comment\">// 实现Comparator接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Circle l, Circle r)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(r.area - l.area);   <span class=\"comment\">// 按面积倒序排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Circle[] circles = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; circles.length; i++) &#123;</span><br><span class=\"line\">            circles[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// public static &lt;T&gt;void sort(T[] a, Comparator&lt;? super T&gt;c)</span></span><br><span class=\"line\">        Arrays.sort(circles, <span class=\"keyword\">new</span> <span class=\"title class_\">CircleComparator</span>());   <span class=\"comment\">// Arrays.sort() 传一个Comparator接口实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Circle circle : circles) &#123;</span><br><span class=\"line\">            System.out.print(circle);  <span class=\"comment\">// 50.27 28.27 12.57 3.14 0.00</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"lambda表达式\">Lambda表达式<a title=\"#lambda表达式\" href=\"#lambda表达式\"></a></h2>\n<p>Lambda表达式是Java SE 8 新增的一个语言特征。它将 Java的面向对象编程范式与函数式编程结合起来，可以增强Java在并发编程和事件驱动编程中的优势。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 老版本Java倒序排列字符串数组, 创建匿名接口实现类对象, 实现Comparator接口的compare方法</span></span><br><span class=\"line\">        String[] names = &#123;<span class=\"string\">&quot;andy&quot;</span>, <span class=\"string\">&quot;bible&quot;</span>, <span class=\"string\">&quot;candy&quot;</span>, <span class=\"string\">&quot;david&quot;</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(names, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String o1, String o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">            System.out.print(name + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">// 使用lambda表达式, js里面也有</span></span><br><span class=\"line\">        String[] names_2 = &#123;<span class=\"string\">&quot;andy&quot;</span>, <span class=\"string\">&quot;bible&quot;</span>, <span class=\"string\">&quot;candy&quot;</span>, <span class=\"string\">&quot;david&quot;</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(names_2, (String a, String b) -&gt; &#123;<span class=\"keyword\">return</span> b.compareTo(a);&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : names_2) &#123;</span><br><span class=\"line\">            System.out.print(name + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数式接口\">函数式接口<a title=\"#函数式接口\" href=\"#函数式接口\"></a></h3>\n<p><code>函数式接口 (function interface)是指仅包含一个抽象方法的接口，因此也称为单抽象方法 (single abstract method,SAM) 接口。每一个Lambda 表达式都对应一个函数式接口类型</code>。可以将 <code>Lambda 表达式看作实现函数式接口的类的一个实例</code>。默认方法不是抽象方法，所以在函数式接口中可以定义默认方法。<br>\n可以根据需要定义函数式接口，只要接口只包含一个抽象方法即可。在定义函数式接口时可以给接口添加<code>@FunctionalInterface</code>注解，如果接口定义多于一个的抽象方法，编译器会报错.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Converter</span>&lt;F, T&gt; &#123;     <span class=\"comment\">//函数式接口</span></span><br><span class=\"line\">    T <span class=\"title function_\">convert</span><span class=\"params\">(F from)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">convertInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用Lambda表达式创建函数式接口对象</span></span><br><span class=\"line\">        Converter&lt;String, Integer&gt; converter = (from -&gt;  Integer.valueOf(from)); <span class=\"comment\">// 省略&#123;&#125;与return</span></span><br><span class=\"line\">        <span class=\"comment\">// 等同于匿名接口实现类的对象</span></span><br><span class=\"line\">        Converter&lt;String, Integer&gt; converter1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Converter</span>&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Integer <span class=\"title function_\">convert</span><span class=\"params\">(String from)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Integer.valueOf(from);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">converted</span> <span class=\"operator\">=</span> converter.convert(<span class=\"string\">&quot;382938&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">converted1</span> <span class=\"operator\">=</span> converter1.convert(<span class=\"string\">&quot;21234321&quot;</span>);</span><br><span class=\"line\">        System.out.println(converted);</span><br><span class=\"line\">        System.out.println(converted1);</span><br><span class=\"line\">        converter.convertInfo();</span><br><span class=\"line\">        <span class=\"comment\">// don&#x27;t think that much</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Java API中有些接口就只含有一个抽象方法，如 Runnable 接口、AutoCloseable 接口、Comparable 接口和 Comparator 接口等。此外，java.util.function中包含几十个函数式接口。函数式接口之所以重要是因为可以使用 Lambda 表达式创建一个与匿名内部类等价的对象。</p>\n<h3 id=\"预定义的函数式接口\">预定义的函数式接口<a title=\"#预定义的函数式接口\" href=\"#预定义的函数式接口\"></a></h3>\n<p>在<code>java.util.function</code>包中定义了大量的函数式接口，它们使编写Lambda表达式变得容易。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305141637127.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        public interface Function&lt;T, R&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            R apply(T argument);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Function&lt;Integer, Double&gt; getPerimeter = (Integer r) -&gt; &#123;<span class=\"keyword\">return</span> <span class=\"number\">2</span>*Math.PI*r;&#125;;</span><br><span class=\"line\">        System.out.println(getPerimeter.apply(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        BiFunction&lt;Float, Float, Float&gt; calcArea = (w, l) -&gt; w*l;</span><br><span class=\"line\">        System.out.println(calcArea.apply(<span class=\"number\">3f</span>, <span class=\"number\">5f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// UnaryOperator, Function子接口; BinaryOperator, BiFunction子接口; 参数类型只有一个</span></span><br><span class=\"line\">        UnaryOperator&lt;Integer&gt; getfactorial = (Integer i) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">                res*=j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(getfactorial.apply(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        public interface Predicate&lt;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            boolean test(T t);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        Predicate&lt;String&gt; isAllDigital = (String s) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!Character.isDigit(s.charAt(i))) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(isAllDigital.test(<span class=\"string\">&quot;12345&quot;</span>) + <span class=\"string\">&quot; &quot;</span> + isAllDigital.test(<span class=\"string\">&quot;123ad22&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        public interface Supplier&lt;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            T get();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        Supplier&lt;Integer&gt; randomDigit = () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(randomDigit.get());</span><br><span class=\"line\">        <span class=\"comment\">//Java API 还提供了 Supplier 接口的各种变体，如 DoubleSupplier (返回 Double)、</span></span><br><span class=\"line\">        <span class=\"comment\">//IntSupplier以及LongSupplier等。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        public interface Consumer&lt;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            void accept(T t);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;<span class=\"type\">char</span>[]&gt; printcharArr = (chars -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">                System.out.print(chars[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">char</span>[] chars = (<span class=\"string\">&quot;goodbye world&quot;</span>).toCharArray();</span><br><span class=\"line\">        printcharArr.accept(chars);</span><br><span class=\"line\">        <span class=\"comment\">//Java API 还提供了 Consumer 接口的各种变体，如 DoubleConsumer (返回</span></span><br><span class=\"line\">        <span class=\"comment\">//Double)、IntConsumer 以及LongConsumer等</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法引用与构造方法引用\">方法引用与构造方法引用<a title=\"#方法引用与构造方法引用\" href=\"#方法引用与构造方法引用\"></a></h3>\n<p>Java中有许多方法带一个函数式接口对象作为参数。如果传递的表达式有实现的方法，可以使用一种特殊的语法，<code>方法引用 (method referencing)</code> 代替Lambda 表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; AL = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">        AL.add(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        AL.forEach(<span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Integer integer)</span> &#123;</span><br><span class=\"line\">                System.out.println(integer+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        AL.forEach( i -&gt; System.out.println(i+<span class=\"number\">2</span>));</span><br><span class=\"line\">        AL.forEach(System.out::println); <span class=\"comment\">// 方法引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// public static T[] sort(T[] array, Comparator&lt;? super T&gt; comparator)</span></span><br><span class=\"line\">        String arr[] = &#123;<span class=\"string\">&quot;Ali&quot;</span>, <span class=\"string\">&quot;Baidu&quot;</span>, <span class=\"string\">&quot;Tencent&quot;</span>, <span class=\"string\">&quot;ByteDance&quot;</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(arr, String::compareToIgnoreCase);  <span class=\"comment\">// 方法引用</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法引用是类名或对象引用，后跟<code>::</code> 然后是方法名.<br>\n双冒号(:)是Java SE8 引进的一种新运算符，可以引用静态方法、实例方法甚至构造方法。方法引用有以下三种使用方式：<br>\n对象::实例方法名<br>\n类名::静态方法名<br>\n类名::实例方法名</p>\n<p>使用第一种方式，在对象上调用实例方法，<code>将给定的参数传递给实例方法</code>，因此，<code>System.out::println 等同于 x-&gt;System.out.println(x)</code><br>\n使用第二种方式，用类名调用静态方法，<code>将给定的参数传递给静态方法</code>。例如，java.util.Objects类定义了 isNull()静态方法，调用 Objects.isNull(x)直接返回x=null 的值。使用 list.removeif(Objects::isNull)将从列表中删除所有的 null值。<br>\n使用第三种方式，用类名调用实例方法，<code>第一个参数作为方法的调用者，其他参数传递给方法</code>。例如， String::compareToIgnoreCase 等同于(x,y)-&gt;x.compareToIgnoreCase(y)</p>\n<p>构造方法引用中需要使用 new 运算符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用构造方法引用创建Person对象</span></span><br><span class=\"line\">        BiFunction&lt;String, Integer, Person&gt; personFactory = Person::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> personFactory.apply(<span class=\"string\">&quot;John Doe&quot;</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Name: &quot;</span> + person.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age: &quot;</span> + person.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以使用数组类型编写构造方法引用。例如， <code>int[]::new</code> 是一个含有一个参数的构造方法引用，该参数为数组长度。它等同于 Lambda 表达式 <code>n-&gt;new int[n]</code>。</p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/09/[Java%E7%AC%94%E8%AE%B0]%E5%B8%B8%E7%94%A8%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%86%85%E9%83%A8%E7%B1%BB%E6%9E%9A%E4%B8%BE%E6%B3%A8%E8%A7%A3/",
            "url": "https://s1acr.github.io/2023/05/09/[Java%E7%AC%94%E8%AE%B0]%E5%B8%B8%E7%94%A8%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%86%85%E9%83%A8%E7%B1%BB%E6%9E%9A%E4%B8%BE%E6%B3%A8%E8%A7%A3/",
            "title": "[Java笔记]常用核心类内部类枚举注解",
            "date_published": "2023-05-09T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>Java 笔记</p>\n</blockquote>\n<h2 id=\"object\">Object<a title=\"#object\" href=\"#object\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305092218740.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>toString()</code><br>\n调用对象的 toString()方法可以返回对象的字符串表示toCast. 该方法在Object类中的定义是返回包名.类名@一个十六进制整数. 如 Father@4f3f5b24. 输出函数传入类的实例默认调用. Java 类库中，有许多类覆盖了 toString()方法，输出时能够得到可理解的结果.</p>\n<p><code>equals()</code><br>\n比较两个对象是否相等, 比较的是对象的引用. 在Java类库中的许多类也覆盖了该方法，如String类。因此，对String对象使用equals()方法的比较是字符串的内容是否相等。<br>\n在子类中，使用签名equals(ClassName obj)覆盖 equals()方法是一个常见的错误，应该使用 equals (Object obj) 覆盖 equals()方法.</p>\n<p><code>hashCode()</code><br>\nhashCode()方法返回一个对象的哈希码 (hash code) 值，它是一个整数，主要用来比较对象的大小。在Object类中hashCode()方法的实现是返回对象在计算机内部存储的十进制内存地址.<br>\nhashCode()方法和 equals()方法必须是兼容的，如果你为一个类覆盖了equals()方法，则也需要覆盖hashCode()方法，以兼容equals()方法<br>\njava.util.Objects类的 hash()方法的参数是可变参数，该方法计算每个参数的哈希码，并将它们组合起来。这个方法是空指针安全的。<br>\n如果类包含数组类型的实例变量，比较它们的哈希码时，首先使用静态方法Arrays.hashCode()计算数组的每个元素哈希码组成的哈希码，然后将结果传给 Objects 的hash()方法.</p>\n<p><code>clone()</code><br>\n使用 Object类的 clone()方法可以克隆一个对象，即创建一个对象的副本。要使类的对象能够克隆，类必须实现Cloneable接口.<br>\n使用 Object类继承的 clone()方法克隆对象只是做了浅拷贝。它简单地从原对象中复制所有实例变量到目标对象中。如果实例变量是基本类型或不变对象(如String), 将没有问题；否则，原对象和克隆对象将共享可变的状态。</p>\n<p><code>finalize()</code><br>\n每个对象都有一个 finalize()方法。在对象被销毁之前，<code>垃圾回收器允许对象调用该方法进行清理工作，这个过程称为对象终结 (finalization)</code>。 格式为 <code>protected void finalize() throws Throwable</code></p>\n<h2 id=\"math\">Math<a title=\"#math\" href=\"#math\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305101332456.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"基本类型包装类\">基本类型包装类<a title=\"#基本类型包装类\" href=\"#基本类型包装类\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305101341697.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"character\">Character<a title=\"#character\" href=\"#character\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Character</span> <span class=\"variable\">c_1</span> <span class=\"operator\">=</span> (<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">        <span class=\"type\">Character</span> <span class=\"variable\">c_2</span> <span class=\"operator\">=</span> (<span class=\"string\">&#x27;$&#x27;</span>);</span><br><span class=\"line\">        <span class=\"type\">Character</span> <span class=\"variable\">c_3</span> <span class=\"operator\">=</span> (<span class=\"string\">&#x27;简&#x27;</span>);</span><br><span class=\"line\">        System.out.println(c_1.compareTo(<span class=\"string\">&#x27;D&#x27;</span>));  <span class=\"comment\">// -3</span></span><br><span class=\"line\">        System.out.println(c_2.charValue());       <span class=\"comment\">// $</span></span><br><span class=\"line\">        System.out.println(c_3.isLetter(<span class=\"string\">&#x27;简&#x27;</span>));  <span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用方法:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public char charValue() </code></td>\n<td style=\"text-align:left\">返回 Character 对象所包含的 char值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public int compareTo(Character anotherChar) </code></td>\n<td style=\"text-align:left\">比较两个字符对象。如果该字符对象与参数字符对象相等，返回0;若小于参数字符，返回值小于0;若大于参数字符，则返回值大于0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isDigit(char ch)</code></td>\n<td style=\"text-align:left\">返回参数字符是否是数字。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isLetter(char ch)</code></td>\n<td style=\"text-align:left\">返回参数字符是否是字母。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isLowerCase(char ch)</code></td>\n<td style=\"text-align:left\">返回参数字符是否是小写字母。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isUpperCase(char ch)</code></td>\n<td style=\"text-align:left\">返回参数字符是否是大写字母。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isWhiteSpace(char ch)</code></td>\n<td style=\"text-align:left\">返回参数字符是否是空白字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static char toLowerCase(char ch)</code></td>\n<td style=\"text-align:left\">将参数字符转换为小写字母返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static char toUpperCase(char ch)</code></td>\n<td style=\"text-align:left\">将参数字符转换为大写字母返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isJavaIdentifierStart(char ch) </code></td>\n<td style=\"text-align:left\">返回参数字符是否允许作为 Java标识符的开头字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean isJavaldentifierPart (char ch) </code></td>\n<td style=\"text-align:left\">返回参数字符是否允许作为 Java标识符的中间字符。</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"boolean\">Boolean<a title=\"#boolean\" href=\"#boolean\"></a></h3>\n<p>常用方法:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public Boolean(boolean value)</code></td>\n<td style=\"text-align:left\">用一个boolean型值创建一个Boolean对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public Boolean(String s)</code></td>\n<td style=\"text-align:left\">用一个字符串创建Boolean对象。如果字符串 s不为 null 且其值为 “true”(不区分大小写)就创建一个true值，否则创建一个 false值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public boolean booleanValue()</code></td>\n<td style=\"text-align:left\">返回该Boolean 对象所封装的 boolean值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static boolean parseBoolean(String s)</code></td>\n<td style=\"text-align:left\">将参数s解析为一个 boolean 值。如果参数不为 null 且等于 “true”(不区分大小写),则返回true, 否则返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static Boolean valueOf(boolean b)</code></td>\n<td style=\"text-align:left\">将参数b 的值转换为 Boolean 对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static Boolean valueOf(String s)</code></td>\n<td style=\"text-align:left\">将参数s 的值转换为 Boolean对象。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">Boolean</span> <span class=\"variable\">b_1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(b);               <span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"type\">Boolean</span> <span class=\"variable\">b_2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"string\">&quot;TruE&quot;</span>);      <span class=\"comment\">// true , 这两个方法已经不支持, 将要移除</span></span><br><span class=\"line\">        System.out.println(b_1);</span><br><span class=\"line\">        System.out.println(b_2);</span><br><span class=\"line\">        System.out.println(b_1.booleanValue());  <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(Boolean.parseBoolean(<span class=\"string\">&quot;True&quot;</span>));     <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(Boolean.valueOf(b).booleanValue());   <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(Boolean.valueOf(<span class=\"string\">&quot;OK&quot;</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值类对象\">数值类对象<a title=\"#数值类对象\" href=\"#数值类对象\"></a></h3>\n<p>常用方法:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public Integer(int value) </code></td>\n<td style=\"text-align:left\">使用 int类型的值创建包装类型 Integer对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public Integer(String s) </code></td>\n<td style=\"text-align:left\">使用字符串构造Integer对象，如果字符串不能转换成相应的数值，则抛出NumberFormatException异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static String toBinaryString(int i)</code></td>\n<td style=\"text-align:left\">返回整数i用字符串表示的二进制序列。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static String toHexString(int i) </code></td>\n<td style=\"text-align:left\">返回整数i用字符串表示的十六进制序列。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static String toOctalString(int i) </code></td>\n<td style=\"text-align:left\">返回整数 i用字符串表示的八进制序列。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static int highestOneBit(int i) </code></td>\n<td style=\"text-align:left\">返回整数i的二进制补码的最高位1所表示的十进制数，如7(111)的最高位的1表示的值为4。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static int lowestOneBit(int i)</code></td>\n<td style=\"text-align:left\">返回整数 i的二进制补码的最低位1所表示的十进制数，如10(1010)的最低位的1表示的值为2。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static int reverse(int i) </code></td>\n<td style=\"text-align:left\">返回将整数i的二进制序列反转后的整数值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static int signum(inti)</code></td>\n<td style=\"text-align:left\">返回整数i的符号。若 i大于0,返回1;若 i等于0,</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">返回0,若 i小于0则返回-1。</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><p>每种包装类型都覆盖了toString()方法和 equals()方法，因此使用 equals()方法比较包装类型的对象时是比较内容或所包装值.每种包装类型的对象中所包装的值是不可改变的，要改变对象中的值必须重新生成新的对象.</p>\n<p>每个数值包装类都定义了 <code>SIZE、BYTES、MAX_VALUE、MIN_VALUE </code>常量。<br>\nSIZE 表示每种类型的数据所占的位数<br>\nBYTES 表示数据所占的字节数<br>\nMAX_VALUE 表示对应基本类型数据的最大值.<br>\n对于Byte、Short、Integer和Long 来说，MIN_VALUE 表示类型的最小值。对 Float和 Double 来说，MIN_VALUE 最小正值。<br>\n除了上面的常量外，在 Float 和 Double 类中还分别定义了 POSITIVE_INFINITY、NEGATIVE INFINITY、NaN(not a number), 它们分别表示正、负无穷大和非数值。</p>\n<h3 id=\"自动装箱与自动拆箱\">自动装箱与自动拆箱<a title=\"#自动装箱与自动拆箱\" href=\"#自动装箱与自动拆箱\"></a></h3>\n<p>Java 5 版提供了一种新的功能，称为自动装箱和自动拆箱。自动装箱 (autoboxing) 是指基本类型的数据可以自动转换为包装类的实例，自动拆箱 (unboxing) 是指包装类的实例自动转换为基本类型的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">300</span>;   <span class=\"comment\">// auto boxing</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i_1</span> <span class=\"operator\">=</span> i;        <span class=\"comment\">// auto unboxing</span></span><br><span class=\"line\">        System.out.println(((Integer)i_1).toString()); <span class=\"comment\">// 强制转换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串与基本数据类型转化\">字符串与基本数据类型转化<a title=\"#字符串与基本数据类型转化\" href=\"#字符串与基本数据类型转化\"></a></h3>\n<p><code>public static Type parse&#123;Type&#125;(String s)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">        System.out.println(Integer.parseInt(s));  <span class=\"comment\">// 字符串转基本类型</span></span><br><span class=\"line\">        System.out.println(Double.parseDouble(s));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">        System.out.println(String.valueOf(i) <span class=\"keyword\">instanceof</span>  String); <span class=\"comment\">// 基本类型转字符串</span></span><br><span class=\"line\">        System.out.println(((Integer)i).toString());   <span class=\"comment\">// 或者通过包装类的toString()方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"biginteger-bigdecimal\">BigInteger BigDecimal<a title=\"#biginteger-bigdecimal\" href=\"#biginteger-bigdecimal\"></a></h2>\n<p>如果在计算中需要非常大的整数或非常高精度的浮点数，可以使用java.math 包中定义的BigInteger类和 BigDecimal类。这两个类都扩展了Number类并实现了Comparable 接口，它们的实例都是不可变的.</p>\n<p><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/math/BigInteger.html\" target=\"_blank\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/math/BigInteger.html</a></p>\n<h2 id=\"时间日期api\">时间日期API<a title=\"#时间日期api\" href=\"#时间日期api\"></a></h2>\n<p>java.time<br>\n<a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/time/package-summary.html\" target=\"_blank\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/time/package-summary.html</a></p>\n<h2 id=\"内部类\">内部类<a title=\"#内部类\" href=\"#内部类\"></a></h2>\n<p>Java 语言允许在一个类的内部定义另一个类(接口、枚举或注解),这种类称为内部类 (inner class)或嵌套类 (nested class)<br>\n使用内部类的优点：对只在一处使用的类进行分组；提高封装性；增强代码的可读性和可维护性。<br>\n有多种类型的内部类，大致可分为<code>成员内部类、局部内部类、匿名内部类和静态内部类</code>。</p>\n<h3 id=\"内部成员类\">内部成员类<a title=\"#内部成员类\" href=\"#内部成员类\"></a></h3>\n<p>成员内部类没有用 static修饰且定义在外层类的类体中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OuterClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span> &#123;   <span class=\"comment\">// 内部类相当于成员, 可以访问外部内所有成员</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">OuterClass</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>();</span><br><span class=\"line\">        OuterClass.<span class=\"type\">InnerClass</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> o.<span class=\"keyword\">new</span> <span class=\"title class_\">InnerClass</span>();   <span class=\"comment\">// 创建内部类</span></span><br><span class=\"line\"></span><br><span class=\"line\">        OuterClass.<span class=\"type\">InnerClass</span> <span class=\"variable\">ii</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>().<span class=\"keyword\">new</span> <span class=\"title class_\">InnerClass</span>();  <span class=\"comment\">// 或者</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(ii.add()); <span class=\"comment\">// 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用成员内部类时需要注意下面几个问题：</p>\n<ol>\n<li>成员内部类中不能定义 static变量和 static方法。</li>\n<li>成员内部类也可以使用 abstract和 final修饰，其含义与其他类一样。</li>\n<li>成员内部类还可以使用 private、public、protected或包可访问修饰符。</li>\n</ol>\n<h3 id=\"局部内部类\">局部内部类<a title=\"#局部内部类\" href=\"#局部内部类\"></a></h3>\n<p>可以在方法体或语句块内定义类。在方法体或语句块 (包括方法、构造方法、局部块、初始化块或静态初始化块)内部定义的类称为局部内部类 (local inner class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OuterClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeInner</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;local_variable&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">seekOuter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(x);</span><br><span class=\"line\">                System.out.println(s);</span><br><span class=\"line\">                System.out.println(p);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;       <span class=\"comment\">// 此局部类只在这个函数中有效</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">InnerClass</span>().seekOuter();       <span class=\"comment\">// 创建对象调用方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">OuterClass</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>();</span><br><span class=\"line\">        o.makeInner(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//1</span></span><br><span class=\"line\">        <span class=\"comment\">//local_variable</span></span><br><span class=\"line\">        <span class=\"comment\">//2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名内部类\">匿名内部类<a title=\"#匿名内部类\" href=\"#匿名内部类\"></a></h3>\n<p>定义类最终目的是创建一个类的实例，但如果某个类的实例只使用一次，可以将类的定义和实例的创建在一起完成，或者说在定义类的同时就创建一个实例。以这种方式定义的没有名字的类称为匿名内部类 (anonymous inner class)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;slacr&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> String <span class=\"title function_\">work</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OuterClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 匿名对象继承 Person, 初始化同时定义</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">hero</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> String <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"string\">&quot;punish evil-doers&quot;</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hero &quot;</span> + hero.name + <span class=\"string\">&quot;, I will &quot;</span> + hero.work());</span><br><span class=\"line\">        <span class=\"comment\">// Hero slacr, I will punish evil-doers</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>匿名内部类可以继承一个类或实现一个接口, 如果实现一个接口，该类是Object类的直接子类。匿名类继承一个类或<br>\n实现一个接口不需要使用 extends 或 implements 关键字。匿名内部类不能同时继承一个类和实现一个接口，也不能实现多个接口<br>\n匿名内部类的一个重要应用是编写 JavaFX 图形界面的事件处理程序。如为按钮对象button 注册事件处理器，就可以使用匿名内部类。</p>\n<h3 id=\"静态内部类\">静态内部类<a title=\"#静态内部类\" href=\"#静态内部类\"></a></h3>\n<p>静态内部类使用 static修饰，静态内部类也称嵌套类 (nested class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OuterClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">outer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>().getClass().getSimpleName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            outer();</span><br><span class=\"line\">            System.out.println(x);      <span class=\"comment\">// 可以访问外部静态成员方法和变量</span></span><br><span class=\"line\">            System.out.println(y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        OuterClass.<span class=\"type\">InnerClass</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OuterClass</span>.InnerClass();</span><br><span class=\"line\">        <span class=\"comment\">// 不需要外层实例就可以直接创建一个静态内部实例</span></span><br><span class=\"line\">        i.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举类型\">枚举类型<a title=\"#枚举类型\" href=\"#枚举类型\"></a></h2>\n<p>枚举类型是一种特殊的引用类型，它的声明和使用与类和接口有类似的地方。它可以作为顶层的类型声明，也可以像内部类一样在其他类的内部声明，但不能在方法内部声明枚举。</p>\n<p>任何枚举类型都隐含地继承了java.lang.Enum抽象类，Enum类又是Object类的子类，同时实现了 Comparable 接口和 Serializable接口。每个枚举类型都包含了若干方法，下面是一些常用的</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>public static E[] values()</code></td>\n<td style=\"text-align:left\">返回一个包含所有枚举常量的数组，这些枚举常量在数组中是按照它们的声明顺序存储的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public static E valueOf(String name)</code></td>\n<td style=\"text-align:left\">返回指定名字的枚举常量。如果这个名字与任何一个枚举常量的名字都不能精确匹配，将抛出 IlegalArgumentException 异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public final int compareTo(Eo)</code></td>\n<td style=\"text-align:left\">返回当前枚举对象与参数枚举对象的比较结果。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public final Class&lt;E&gt; getDeclaringClass()</code></td>\n<td style=\"text-align:left\">返回对应该枚举常量的枚举类型的类对象。两个枚举常量 el、e2, 当且仅当 el.getDeclaringClass() == e2.getDeclaringClass()时，这两个枚举常量类型相同。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public final String name()</code></td>\n<td style=\"text-align:left\">返回枚举常量名。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public final int ordinal()</code></td>\n<td style=\"text-align:left\">返回枚举常量的顺序值，该值是基于常量声明的顺序的，第一个常量的顺序值是0,第二个常量的顺序值为1,依次类推。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>public String toString()</code></td>\n<td style=\"text-align:left\">返回枚举常量名。</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Direction</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> Direction.W;</span><br><span class=\"line\">        System.out.println(left);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( Direction d : Direction.values()) &#123;    <span class=\"comment\">// values() 是一个包含枚举常量的数组</span></span><br><span class=\"line\">            System.out.println(d.name() + <span class=\"string\">&quot; &quot;</span> + d.ordinal());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// enum 配合 Switch</span></span><br><span class=\"line\">        <span class=\"type\">Direction</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> Direction.values()[(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">4</span>)];</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (d) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> E -&gt; System.out.println(<span class=\"string\">&quot;EAST&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> S -&gt; System.out.println(<span class=\"string\">&quot;SOUTH&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> W -&gt; System.out.println(<span class=\"string\">&quot;WEST&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> N -&gt; System.out.println(<span class=\"string\">&quot;NORTH&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; System.out.println(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">   R(<span class=\"string\">&quot;RED&quot;</span>, <span class=\"number\">1</span>), G(<span class=\"string\">&quot;GREEN&quot;</span>, <span class=\"number\">2</span>) , B(<span class=\"string\">&quot;BLUE&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> idx;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"title function_\">Color</span><span class=\"params\">(String name, <span class=\"type\">int</span> idx)</span> &#123; <span class=\"comment\">// 构造方法只能 private, 通过枚举具体的类型创建</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.idx = idx;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getName</span><span class=\"params\">(<span class=\"type\">int</span> idx)</span> &#123;  </span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Color c : Color.values())&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(c.idx ==idx ) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> c.name;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> idx + <span class=\"string\">&quot; &quot;</span> + name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Color</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Color.G;    <span class=\"comment\">// 自动调用构造</span></span><br><span class=\"line\">        System.out.println(c.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注解类型\">注解类型<a title=\"#注解类型\" href=\"#注解类型\"></a></h2>\n<p>注解类型 (annotation type) 是 Java 5 新增的功能。注解以结构化的方式为程序元素提供信息，这些信息能够被外部工具(编译器、解释器等)自动处理.<br>\n注解有许多用途，其中包括：</p>\n<ol>\n<li>为编译器提供信息。编译器可以使用注解检测错误或阻止编译警告。</li>\n<li>编译时或部署时处理。软件工具可以处理注解信息生成代码、 XML 文件等。</li>\n<li>运行时处理。有些注解在运行时可以被检查。<br>\n像使用类一样，要使用注解必须先定义注解类型(也可以使用语言本身提供的注解)</li>\n</ol>\n<p><code>注解 (annotation)和注解类型 (annotation type)</code>。注解类型是一种特殊的接口类型，注解是注解类型的一个实例。就像接口一样，注解类型也有名称和成员。注解中包含的信息采用“键/值”对的形式，可以有零或多个“键/值”对，并且每个键有一个特定类型。没有“键/值”对的注解类型称作<code>标记注解类(marker annotation type)</code>。如果注解只需要一个“键/值”对，则称为<code>单值注解类型</code>。</p>\n<h3 id=\"标准注解\">标准注解<a title=\"#标准注解\" href=\"#标准注解\"></a></h3>\n<p>Java语言规范中定义了3个注解类型，它们是供编译器使用的。这3个注解类型定义在java.lang包中，分别为<code>@Override、@Deprecated 和 @SuppressWarnings</code>。</p>\n<p><code>Override</code> :<br>\n是一个标记注解类型, 告诉编译器此方法要覆盖父类方法.</p>\n<p><code>Deprecate</code>:<br>\n是一个标记注解类型，可以应用于某个方法或某个类型，指明方法或类型已被弃用。标记已被弃用的方法或类型，是为了警告其代码用户，不应该使用或覆盖该方法，或不该使用或扩展该类型。一个方法或类型被标记弃用通常是因为有了更好的方法或类型。当前的软件版本中保留这个被弃用的方法或类型是为了向后兼容。</p>\n<p><code>SuppressWarnings</code>:<br>\n注解指示编译器阻止某些类型的警告，具体的警告类型可以用初始化该注解的字符串来定义。该注解可应用于类型、构造方法、方法、成员变量、参数以及局部变量。它的用法是传递一个 String数组，其中包含需要阻止的警告。</p>\n<p>常用有效参数:</p>\n<ul>\n<li><code>unchecked  </code>  未检查的转换警告。</li>\n<li><code>deprecation</code> 使用了不推荐使用方法的警告。</li>\n<li><code>serial     </code> 实现 Serializable 接口但没有定义 serialVersionUID 常量的警告。</li>\n<li><code>rawtypes   </code> 如果使用旧的语法创建泛型类对象时发出的警告。</li>\n<li><code>finally    </code>  任何 finally子句不能正常完成的警告。</li>\n<li><code>fallthrough</code>    switch块中某个 case 后没有 break 语句的警告。</li>\n</ul>\n<h3 id=\"标准元注解\">标准元注解<a title=\"#标准元注解\" href=\"#标准元注解\"></a></h3>\n<p>元注解 (meta annotation) 是对注解进行标注的注解。在java.lang.annotation包中定义Documented、Inherited、Retention 和 Target 四个元注解类型。</p>\n<ol>\n<li><code>Documented</code><br>\nDocumented是一种标记注解类型，用于对一个注解类型的声明进行标注，使该注解类型的实例包含在用javadoc 工具产生的文档中。</li>\n<li><code>Inherited</code><br>\n用 Inherited标注的注解类型的任何实例都会被继承。如果 Inherited标注一个类，那么注解将会被这个被标注类的所有子类继承。</li>\n<li><code>Retension</code><br>\nRetension 注解指明被标注的注解保留多长时间。 Retension 注解的值为 RetensionPolicy枚举的一个成员：</li>\n</ol>\n<ul>\n<li><code>SOURCE</code> 表示注解仅存于源文件中，注解将被编译器丢弃。</li>\n<li><code>CLASS</code> 表示注解将保存在类文件中，但不被JVM保存的注解，是默认值。</li>\n<li><code>RUNTIME</code> 表示要被JVM保存的注解，在运行时可以利用反射机制查询</li>\n</ul>\n<ol start=\"4\">\n<li><code>Target</code><br>\nTarget注解用来指明哪个(些)程序元素可以利用被标注的注解类型进行标注。 Target的值为java.lang.annotation.ElementType枚举的一个成员：</li>\n</ol>\n<ul>\n<li><code>ANNOTATION_TYPE</code>  可以对注解类型标注。</li>\n<li><code>CONSTRUCTOR</code>  可以对构造方法进行标注。</li>\n<li><code>FIELD</code> 可以对成员的声明进行标注。</li>\n<li><code>LOCAL_VARIABLE</code>  可以对局部变量进行标注。</li>\n<li><code>METHOD</code>  可以对方法进行标注。</li>\n<li><code>PACKAGE</code>  可以对包进行标注。</li>\n<li><code>PARAMETER</code>  可以对参数声明进行标注。</li>\n<li><code>TYPE</code>  可以对类型声明进行标注</li>\n</ul>\n<p>如Override 注解类型使用了 Target 注解标注，使得 Override 只适用于方法声明.<br>\nSuppressWarnings 注解类型的声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span> (value=&#123;TYPE,FIELD,METHOD,PARAMETER, CONSTRUCTOR,LOCAL_VARIABLE&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention(value=SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SuppressWarnings</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义注解\">定义注解<a title=\"#定义注解\" href=\"#定义注解\"></a></h3>\n<p>默认情况下，所有的注解类型都扩展了java.lang.annotation.Annotation接口。该接口定义一个返回Class对象的 annotationType()方法 <code>Class &lt;?extends Annotation&gt; annotationType()</code>, 该接口还定义了equals()方法、hashCode()方法和toString()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass1</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(value = &quot;Hello, World!&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass1</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass1</span>();</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> obj.getClass().getMethod(<span class=\"string\">&quot;myMethod&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> method.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> annotation.value();</span><br><span class=\"line\">        System.out.println(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在注解类型中声明的方法称为注解类型的元素，它的声明类似于接口中的方法声明，没有方法体，但有返回类型。元素的类型有一些限制，如只能是基本类型、String、枚举类型、其他注解类型等，并且元素不能声明任何参数。<br>\n实际上，注解类型的元素就像对象的域一样，所有应用该注解类型的程序元素都要对这些域实例化。这些域的值是在应用注解时由初始化器决定，或由元素的默认值决定。<br>\n在定义注解时可以使用 default 关键字为元素指定默认值。</p>\n<p>javaxjws 包中定义了一些用来创建 Web 服务的注解类型，在 javax.xml.ws包和 javax.xml.bind.annotation 包中也定义了许多注解类型。注解类型在 Java Web 开发和Java EE 开发中被广泛使用.</p>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n<li><a href=\"https://blog.csdn.net/qq_52348926/article/details/129478117#:~:text=hashCode%20%28%29%E6%96%B9%E6%B3%95%E7%94%A8%E4%BA%8E%E8%AE%A1%E7%AE%97%E5%93%88%E5%B8%8C%E7%A0%81%E5%80%BC%EF%BC%8C%E8%80%8Cequals%20%28%29%E6%96%B9%E6%B3%95%E7%94%A8%E4%BA%8E%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E7%AD%89%E6%80%A7%E3%80%82%20%E5%9C%A8Java%E4%B8%AD%EF%BC%8C%E5%A6%82%E6%9E%9C%20%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%93%88%E5%B8%8C%E7%A0%81%E5%80%BC%E7%9B%B8%E5%90%8C,%EF%BC%8C%20%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%84%8F%E5%91%B3%E7%9D%80%E5%AE%83%E4%BB%AC%E6%98%AF%E7%9B%B8%E7%AD%89%E7%9A%84%20%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%20%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%20%EF%BC%8C%E5%8D%B3%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%8F%AF%E8%83%BD%E7%94%9F%E6%88%90%E7%9B%B8%E5%90%8C%E7%9A%84%E5%93%88%E5%B8%8C%E7%A0%81%E5%80%BC%E3%80%82\" target=\"_blank\">Hash值的理解，Java中hashCode()和equals究竟有什么用？</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/09/[Java%E7%AC%94%E8%AE%B0]%E7%BB%A7%E6%89%BF&%E5%A4%9A%E6%80%81/",
            "url": "https://s1acr.github.io/2023/05/09/[Java%E7%AC%94%E8%AE%B0]%E7%BB%A7%E6%89%BF&%E5%A4%9A%E6%80%81/",
            "title": "[Java笔记]继承&多态",
            "date_published": "2023-05-09T00:00:00.000Z",
            "content_html": "<h2 id=\"继承\">继承<a title=\"#继承\" href=\"#继承\"></a></h2>\n<p>定义类时若缺省extends 关键字，则所定义的类为java.lang.Object类的直接子类.<br>\nJava 仅支持单重继承，即一个类至多只有一个直接父类。在Java 中可以通过接口实现其他语言中的多重继承。</p>\n<h3 id=\"覆盖(overriding)\">覆盖(overriding)<a title=\"#覆盖(overriding)\" href=\"#覆盖(overriding)\"></a></h3>\n<p><code>@Override</code> 注解表示其后的方法必须是覆盖父类的一个方法。如果具有该注解的方法没有覆盖父类的方法，编译器将报告一个错误。<br>\n父类中static方法可以被继承，但不能被覆盖。<br>\n要在子类中定义一个覆盖的方法，方法的参数和返回值类型都必须与父类中的方法相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Base() &#123;&#125;;</span><br><span class=\"line\">    Base(<span class=\"type\">int</span> pr_1) &#123;<span class=\"built_in\">this</span>.pr_1 =  pr_1;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from base&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Derived() &#123;&#125;;</span><br><span class=\"line\">    Derived(<span class=\"type\">int</span> pr_1) &#123;<span class=\"built_in\">this</span>.pr_1 = pr_1;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from derived&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Derived</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Derived</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        d.say();  <span class=\"comment\">// 2_from derived</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"super关键字\">super关键字<a title=\"#super关键字\" href=\"#super关键字\"></a></h3>\n<p>引用当前对象的父类对象.</p>\n<p>this()：调用本类中其他重载的构造函数（必须写在函数中的第一行）<br>\nsuper()：调用父类中的构造函数（必须写在函数中的第一行）<br>\n它们不能存在于同一个构造方法中</p>\n<p><a href=\"http://this.XXX\">this.XXX</a>()：调用在本类中重写的父类方法<br>\n<a href=\"http://super.XXX\">super.XXX</a>()：调用父类中的方法<br>\n它们可以存在于同一个构造方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Base() &#123;&#125;;</span><br><span class=\"line\">    Base(<span class=\"type\">int</span> pr_1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pr_1 =  pr_1;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Base constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from base&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> pr_1;</span><br><span class=\"line\">    Derived() &#123;&#125;;</span><br><span class=\"line\">    Derived(<span class=\"type\">int</span> pr_1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();        <span class=\"comment\">// 构造父类构造</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.pr_1 = <span class=\"number\">100</span>;   <span class=\"comment\">// 访问父类成员</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pr_1 = pr_1;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Derived constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(pr_1 + <span class=\"string\">&quot;_from derived&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">baseSay</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.say();   <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Derived</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Derived</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        d.baseSay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    Base constructor</span></span><br><span class=\"line\"><span class=\"comment\">//    Derived constructor</span></span><br><span class=\"line\"><span class=\"comment\">//    100_from base</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"访问修饰符\">访问修饰符<a title=\"#访问修饰符\" href=\"#访问修饰符\"></a></h2>\n<p>Java 类有 两种访问权限, public 和 缺省, public 权限可以供类外访问, 缺省只能包内访问.</p>\n<p>类的成员有四种访问权限  private 缺省 protected public.<br>\nprivate只能类内访问; 缺省本类和同一个包中的类可以访问; protected 可以被这个类本身、同一<br>\n个包中的类以及该类的子类访问; public 被任何类访问.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305092037566.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"抽象类(abstract-class)\">抽象类(abstract class)<a title=\"#抽象类(abstract-class)\" href=\"#抽象类(abstract-class)\"></a></h2>\n<p><code>抽象方法只有方法的声明，没有方法的实现</code>。<code>包含抽象方法的类必须定义为抽象类</code>，定义抽象类需要的类前加上abstract修饰符。<br>\n在抽象类中可以定义构造方法，这些构造方法可以在子类的构造方法中调用。尽管在抽象类中可以定义构造方法，但<code>抽象类不能被实例化</code>，即不能生成抽象类的对象。<br>\n在抽象类中可以定义非抽象的方法。可以创建抽象类的子类，抽象类的子类还可以是抽象类，只有非抽象的子类才能使用new创建该类的对象。<br>\n<code>抽象类的非抽象子类必须实现父类的抽象方法.</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(<span class=\"type\">int</span> age, String name)</span> &#123; <span class=\"built_in\">this</span>.name = name; <span class=\"built_in\">this</span>.age = age;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">intro</span><span class=\"params\">()</span>; <span class=\"comment\">// 抽象方法没有实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">Programmer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Programmer</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123; <span class=\"built_in\">super</span>(age, name);&#125; <span class=\"comment\">// 调用父类构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">intro</span><span class=\"params\">()</span> &#123;       <span class=\"comment\">// 实现父类抽象方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am a &quot;</span> + <span class=\"built_in\">this</span>.getClass().getSimpleName() + <span class=\"string\">&quot;, and my name is &quot;</span>+ name + <span class=\"string\">&quot;, &quot;</span> +  age + <span class=\"string\">&quot; years old.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Programmer</span> <span class=\"variable\">slacr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Programmer</span>(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"number\">19</span>);</span><br><span class=\"line\">      slacr.intro();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// I am a Programmer, and my name is slacr, 19 years old.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象转换\">对象转换<a title=\"#对象转换\" href=\"#对象转换\"></a></h2>\n<p>子类对象和父类对象在一定条件下也可以相互转换，这种类型转换一般称为对象转换或造型 (casting)。对象转换也有自动转换和强制转换之分.<br>\n子类对象可以作为父类对象使用. 和C++中一样. 这种转换称为向上转换 (up casting)。向上转换指的是在类的层次结构图中，位于下方的类(或接口)对象都可以自动转换为位于上方的类(或接口)对象.<br>\n也可以将一个父类对象转换成子类对象，这时需要使用强制类型转换。强制类型转换需要使用转换运算符&quot;()&quot;。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> salary;</span><br><span class=\"line\">    Father(<span class=\"type\">int</span> salary)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Father.parametric_constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Father() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Father.default_constructor&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.salary = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;This is the 996 foobar&quot;</span> + <span class=\"string\">&quot;, from which I could get &quot;</span> + salary + <span class=\"string\">&quot; a month.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> score;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Son.default_constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Son</span><span class=\"params\">(<span class=\"type\">int</span> score)</span> &#123;         <span class=\"comment\">// 子类没写super(), 会自动调用父类的无参构造</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Son.parametric_constructor&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doExam</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I got &quot;</span> + score + <span class=\"string\">&quot;, but I hate exam.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Father</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        <span class=\"type\">Son</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">        f.work();</span><br><span class=\"line\">        s.doExam();</span><br><span class=\"line\">        <span class=\"type\">Father</span> <span class=\"variable\">ff</span> <span class=\"operator\">=</span> s;    <span class=\"comment\">// 父类接受子类对象,  自动隐式类型转换</span></span><br><span class=\"line\">        ff.work();        <span class=\"comment\">// 在构造子类时调用的父类是无参构造, salary = 0;</span></span><br><span class=\"line\">        <span class=\"type\">Son</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> (Son)f;  <span class=\"comment\">// 父类强制显示转换为子类， 写法没问题， 但不能完成转换，异常</span></span><br><span class=\"line\">        ss.doExam();       <span class=\"comment\">// 无法调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305092159458.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"instanceof-运算符\">instanceof 运算符<a title=\"#instanceof-运算符\" href=\"#instanceof-运算符\"></a></h2>\n<p>测试一个实例是否是某种类型的实例.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Father</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Father</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"type\">Son</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    System.out.println( s <span class=\"keyword\">instanceof</span> Father );</span><br><span class=\"line\">    System.out.println( f <span class=\"keyword\">instanceof</span> Father );</span><br><span class=\"line\">    System.out.println(s <span class=\"keyword\">instanceof</span> Object);</span><br><span class=\"line\">    System.out.println(f <span class=\"keyword\">instanceof</span> Son);</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多态与动态绑定\">多态与动态绑定<a title=\"#多态与动态绑定\" href=\"#多态与动态绑定\"></a></h2>\n<p>多态 (polymorphism) 就是多种形式，是指Java 程序中一个类或多个类中可以定义多个同名方法，这多个同名方法完成的操作不同.<br>\nJava 语言支持两种类型的多态：<br>\n(1)静态多态：也叫<code>编译时多态</code>，是通过方法重载实现的。<br>\n(2)动态多态：也叫<code>运行时多态</code>，是通过方法覆盖实现的。</p>\n<p>将方法调用与方法体关联起来称方法绑定 (binding)。若在程序执行前进行绑定，叫前期绑定.若在程序运行时根据对象的类型进行绑定，则称后期绑定或动态绑定。Java 中除static方法和 final方法外都是后期绑定.</p>\n<p>对重载的方法，Java运行时系统根据传递给方法的参数个数和类型确定调用哪个方法，而对覆盖的方法，运行时系统根据实例类型决定调用哪个方法。对子类的一个实例，如果子类覆盖了父类的方法，运行时系统调用子类的方法，如果子类继承了父类的方法，则运行时系统调用父类的方法.</p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>final 修饰的 class不能被继承, 其中的方法隐含为final修饰 ; final修饰的方法不能被重写; final修饰的变量不可更改.</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/03/[Java%E7%AC%94%E8%AE%B0]%E7%B1%BB&%E5%AF%B9%E8%B1%A1/",
            "url": "https://s1acr.github.io/2023/05/03/[Java%E7%AC%94%E8%AE%B0]%E7%B1%BB&%E5%AF%B9%E8%B1%A1/",
            "title": "[Java笔记]类&对象",
            "date_published": "2023-05-03T00:00:00.000Z",
            "content_html": "<h2 id=\"类的定义\">类的定义<a title=\"#类的定义\" href=\"#类的定义\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>][<span class=\"keyword\">abstract</span> | <span class=\"keyword\">final</span>] <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> [<span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>] [<span class=\"keyword\">implements</span> <span class=\"title class_\">InterfaceNameList</span>]&#123; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class body...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类访问修饰符可以是public或缺省, 使用public, 则称之公共类, 公共类可以被任何包中的类使用, 若不加public修饰符, 只能被同一包中的其他类使用.</p>\n<p>一个project中只能有一个主类和主方法.<br>\n一个源文件中只能有一个public类, 其他类的个数不限.</p>\n<p>在练习的时候为了方便在一个project中放入多个主类, 我们可以为每次的代码单独建一个包, 一个包可以包含多个源文件, 包的名称不像类的名称严格限定必须和源文件中类名相同, 更改灵活. 这个包中可以写主类和主方法来测试各个类. 虽然在每个源文件中也可以写主方法那是因为主方法是静态的, 无需实例化在编译时就可以确定入口. <code>但这并不符合认知逻辑, 一个类应该只完成该类的功能, 主方法就应该放在完成程序执行功能的主类中</code>.</p>\n<h2 id=\"成员变量的定义\">成员变量的定义<a title=\"#成员变量的定义\" href=\"#成员变量的定义\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span> | <span class=\"keyword\">protected</span> | <span class=\"keyword\">private</span>] [<span class=\"keyword\">static</span>] [<span class=\"keyword\">final</span>] type variableName[=value];</span><br></pre></td></tr></table></figure>\n<p>用 public修饰的变量为公共变量，公共变量可以被任何方法访问；用protected修饰的变量称为保护变量，保护变量可以被同一个包中的类或子类访问；<code>没有使用访问修饰符，该变量只能被同一个包中的类访问</code>；用private修饰的变量称为私有变量，私有变量只能被同一个类的方法访问.</p>\n<p>如果变量用static修饰，则该变量称为静态变量，又称为类变量。没有用 static修饰的变量称为实例变量</p>\n<p>使用 final修饰的变量叫作最终变量，也称为标识符常量。常量可以在声明时赋初值, 也可以在后面赋初值，一旦为其赋值，就不能再改变了.</p>\n<h2 id=\"成员方法的定义\">成员方法的定义<a title=\"#成员方法的定义\" href=\"#成员方法的定义\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span> | <span class=\"keyword\">protected</span> | <span class=\"keyword\">private</span>]  [<span class=\"keyword\">static</span>] [<span class=\"keyword\">final</span> | <span class=\"keyword\">abstract</span>] returnType <span class=\"title function_\">methodName</span> <span class=\"params\">([paramList])</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// method body...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>private方法只能在同一个类中被调用，protected方法可以在同一个类、同一个包中的类以及子类中被调用，而用 public修饰的方法可以在任何类中调用。一个方法如果缺省访问修饰符，则称<code>包可访问的</code>，即可以被同一个类的方法访问和同一个包中的类访问.</p>\n<p>没有用 static修饰的方法称为实例方法，用 static修饰的方法称为静态方法。</p>\n<p>用 final修饰的方法称为最终方法，最终方法不能被覆盖。方法的覆盖与继承有关。用 abstract修饰的方法称为抽象方法。</p>\n<h2 id=\"单例模式\">单例模式<a title=\"#单例模式\" href=\"#单例模式\"></a></h2>\n<p>在Java类的设计中，有时希望一个类在任何时候只能有一个实例，这时可以将该类设计为单例模式(singleton)。要将一个类设计为单例模式，类的构造方法的访问修饰符应声明为private, 然后在类中定义一个static方法，在该方法中创建类的对象.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;           <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">I</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();     <span class=\"comment\">// 唯一的实列对象</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Singleton s = new Singleton();</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> Singleton.I;</span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> Singleton.I;         </span><br><span class=\"line\">        s1.print(<span class=\"string\">&quot;good&quot;</span>);</span><br><span class=\"line\">        s1.num++;</span><br><span class=\"line\">        s2.num++;</span><br><span class=\"line\">        System.out.println(s1.num);  <span class=\"comment\">// 2</span></span><br><span class=\"line\">        System.out.println(s1==s2);  <span class=\"comment\">// true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象初始化值\">对象初始化值<a title=\"#对象初始化值\" href=\"#对象初始化值\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305031943070.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ObjInit</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;    <span class=\"comment\">// 默认初始化值1</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = <span class=\"number\">2</span>;   <span class=\"comment\">// 初始化块初始化</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;x in initial block: &quot;</span> + x );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;    <span class=\"comment\">// 静态初始化块初始化静态变量</span></span><br><span class=\"line\">        y = <span class=\"number\">20</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;y in initial block: &quot;</span> + y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ObjInit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.y = <span class=\"number\">30</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;x in constructor: &quot;</span> + x );</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;y in constructor: &quot;</span> + y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjInit</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjInit</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;x after constructor: &quot;</span> + o.x);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;y after constructor: &quot;</span> + o.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305032008187.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>当一个类有多种初始化方法时，执行顺序是：<br>\n(1)用默认值给静态变量赋值，然后执行静态初始化块为static变量赋值。<br>\n(2)用默认值给实例变量赋值，然后执行初始化块为实例变量赋值。<br>\n(3)最后使用构造方法初始化静态变量或实例变量。</p>\n<h2 id=\"垃圾回收gc\">垃圾回收GC<a title=\"#垃圾回收gc\" href=\"#垃圾回收gc\"></a></h2>\n<p>在 Java程序中，允许创建尽可能多的对象，而不用担心销毁它们。当程序使用一个对象后，该对象不再被引用时， Java运行系统就在后台自动运行一个线程，终结 (finalized) 该对象并释放其所占的内存空间，这个过程称为垃圾回收 (garbage collection,GC)。<br>\n后台运行的线程称为垃圾回收器 (garbage collector)。垃圾回收器自动完成垃圾回收操作，因此，这个功能也称为自动垃圾回收。所以，在一般情况下，程序员不用关心对象不被清除而产生内存泄露问题。</p>\n<p>当一个对象不再被引用时，该对象才有可能被回收。一个对象可能有多个引用，只有在所有的引用都被删除，对象才有可能被回收。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123; <span class=\"built_in\">this</span>.num = num; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> t1;</span><br><span class=\"line\">        t2.num = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Java中没有默认的复制构造, 不像C++</span></span><br><span class=\"line\">        System.out.println(t1.num);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        t1 = t3;</span><br><span class=\"line\">        t2 = t3;</span><br><span class=\"line\">        System.gc();  <span class=\"comment\">// 启用垃圾回收器, 当不能保证立即回收</span></span><br><span class=\"line\"><span class=\"comment\">//        Runtime rt = Runtime.getRuntime();        // 同上</span></span><br><span class=\"line\"><span class=\"comment\">//        rt.gc();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果希望及时回收对象, 可以调用System类的gc方法或Runtime类的gc方法.</p>\n<h2 id=\"包(package)\">包(package)<a title=\"#包(package)\" href=\"#包(package)\"></a></h2>\n<p>Java 语言使用包来组织类库，包 (package) 实际是一组相关类或接口的集合。<br>\n包是Java语言最大的封装单位，定义了程序对类的访问权限。</p>\n<p>如果在定义类时没有指定类属于哪个包，则该类属于默认包 (default package), 即当前目录。默认包中的类只能被该包中的类访问。为了有效地管理类，通常在定义类时指定类属于哪个包，这可通过 package 语句实现.</p>\n<p>如果一个类属于某个包，可以用类的完全限定名 (fully qualified name)来表示, 防止类名重复.</p>\n<p>Java5 版中，允许使用 import static语句导入类中的常量和静态方法，再使用这些类中的常量或方法就不用加类名前缀了</p>\n<p>使用java.lang 包和默认包(当前目录)中的类不需要使用 import语句将其导入，编译器会自动导入该包中的类.</p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>把能够返回成员变量值的方法称为访问方法 (accessor method), 把能够修改成员变量值的方法称为修改方法 (mutator method)。 访问方法名一般为 getxx(), 因此访问方法也称 getter方法。修改方法名一般为 setxx(), 修改方法也称setter方法</li>\n<li>函数执行时会创建一个活动记录(activation record), 它包括方法的参数、方法中声明的局部变量. 将其存储在栈中.</li>\n<li>一旦定义了有参构造, 编译器就不再提供默认构造. 习惯写上默认构造.</li>\n<li>this关键字可以调用该类的另一个构造方法 <code>this(value)</code>. 如果在构造方法中调用另一个构造方法，则 this语句必须是第一条语句.</li>\n<li>Java 语言规定，this只能用在非 static方法(实例方法和构造方法)中，不能用在 static方法中。实际上，在对象调用一个非 static方法时，向方法传递了一个引用，这个引用就是对象本身，在方法体中用 this表示。</li>\n<li>静态成员能直接通过类名调用<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">rnum</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">100</span> + <span class=\"number\">1</span>); <span class=\"comment\">// [1, 100]</span></span><br><span class=\"line\">     System.out.println(rnum);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>Java的作用域通过块(block)限定.</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/24/[Java%E7%AC%94%E8%AE%B0]%E5%9F%BA%E7%A1%80/",
            "url": "https://s1acr.github.io/2023/04/24/[Java%E7%AC%94%E8%AE%B0]%E5%9F%BA%E7%A1%80/",
            "title": "[Java笔记]基础",
            "date_published": "2023-04-24T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>Java笔记</p>\n</blockquote>\n<h2 id=\"java起源\">Java起源<a title=\"#java起源\" href=\"#java起源\"></a></h2>\n<p>Java语言最初是由美国<code>Sun Microsystems</code>公司的<code>James Gosling</code>等人开发的一种面向对象程序设计语言。Java的起源可以追溯到20世纪90年代初.Java语言于<code>1995年5月23日</code>正式发布。Java语言具有面向对象、平台独立、安全性以及可以开发一种称为Applet程序的特点.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304241931138.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Java是简单的 (simple)、面向对象的 (object oriented)、分布式的 (distributed)、解释型的 (interpreted)、健壮的 (robust)、安全的 (secure)、体系结构中立的(architecture neutral)、可移植的 (portable)、高性能的(high performance)、 多线程的 (multithreaded) 和动态的 (dynamic)。</p>\n<h2 id=\"java平台和开发环境\">Java平台和开发环境<a title=\"#java平台和开发环境\" href=\"#java平台和开发环境\"></a></h2>\n<p>Java平台有三大版本，分别代表Java 的三个应用领域</p>\n<ul>\n<li>Java标准版 (Java Standard Edition,<code>Java SE</code>): 用来开发客户端的应用程序，应用程序可以独立运行或作为 Applet在 Web 浏览器中运行</li>\n<li>Java企业版 (Java Enterprise Edition,<code>Java EE</code>): 用来开发服务器端的应用程序。例如，Java Servlet和JSP(JavaServer Pages), 以及 JSF(JavaServer Faces)。</li>\n<li>Java 微型版 (Java Micro Edition,<code>Java ME</code>): 用来开发移动设备(如手机)上运行的应用程序。</li>\n</ul>\n<h3 id=\"jdk/jre/jvm\">JDK/JRE/JVM<a title=\"#jdk/jre/jvm\" href=\"#jdk/jre/jvm\"></a></h3>\n<p><code>JVM</code> Java Virtual Machine,JVM, 一种运行字节码的应用程序.<br>\n两个发行包:<br>\n<code>JRE</code> Java Runtime Environment, 包括 JVM 和核心类库，最适合用来运行字节码。如果只需运行 Java 程序，就只需安装JRE。<br>\n<code>JDK</code> Java Development Toolkit, 它包括 JRE, 外加一个编译器和其他工具。它是编译和运行 Java程序的必备软件</p>\n<h2 id=\"字节码与平台独立\">字节码与平台独立<a title=\"#字节码与平台独立\" href=\"#字节码与平台独立\"></a></h2>\n<p>在Java编程中，源代码被编译成字节码 (bytecode)。字节码不是本地机代码，所以它不能直接运行。字节码只能在 Java 虚拟机上运行。 JVM 是一种解释字节码的本机应用程序。JVM 在众多平台上都可用，从而使 Java 成为一种跨平台的语言，进而实现“编写一次，到处运行”。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304241959293.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"cmd编译运行\">CMD编译运行<a title=\"#cmd编译运行\" href=\"#cmd编译运行\"></a></h2>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac &lt;filename.java&gt;</span><br><span class=\"line\">java &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java标识符和关键字\">Java标识符和关键字<a title=\"#java标识符和关键字\" href=\"#java标识符和关键字\"></a></h2>\n<h3 id=\"java标识符定义\">Java标识符定义<a title=\"#java标识符定义\" href=\"#java标识符定义\"></a></h3>\n<ol>\n<li>包名、类名、方法名、参数名、变量名等，这些符号被称为标识符。</li>\n<li>标识符可以由字母、数字、下划线_ 和 美元符号 $ 组成</li>\n<li>标识符不能以数字开头，不能是java中的关键字。</li>\n<li>首字符之后可以是字母（A­Z 或者 a­z）、下划线_ 、美元符号 $ 或数字的任何字符。</li>\n<li>Java 区分大小写.</li>\n<li>不可以使用关键字和保留字作为标识符，但标识符中能包含关键字和保留字。</li>\n<li>标识符不能包含空格。</li>\n</ol>\n<p>这里的<code>字母指的是 Unicode 编码字符集</code>, 可以表示世界各国的语言符号.</p>\n<h3 id=\"java标识符规则\">Java标识符规则<a title=\"#java标识符规则\" href=\"#java标识符规则\"></a></h3>\n<ol>\n<li>包名所有字母必须小写。例如：cn.com.test</li>\n<li>类名和接口名每个单词的首字母都要大写。例如：ArrayList</li>\n<li>常量名所有的字母都大写，单词之间用下划线连接。例如：DAY_OF_MONTH 变量名和方法名的第一个单词首字母小写，从第二个单词开始，每个单词首字母大写。例如：lineName、getLingNumber</li>\n<li>在程序中，应该尽量使用有意义的英文单词来定义标识符，使得程序便于阅读。</li>\n</ol>\n<h3 id=\"关键字\">关键字<a title=\"#关键字\" href=\"#关键字\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">数据类型</td>\n<td style=\"text-align:left\">boolean、int、long、short、byte、float、double、char、class、interface、enum、void</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">流程控制</td>\n<td style=\"text-align:left\">if、else、do、while、for、switch、case、default、break、continue、return</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">异常处理</td>\n<td style=\"text-align:left\">try、catch、finally、throw、throws</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">修饰符</td>\n<td style=\"text-align:left\">public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">类与类之间关系</td>\n<td style=\"text-align:left\">extends、implements</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">建立实例及引用实例</td>\n<td style=\"text-align:left\">this、supper、instanceof、new</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">导包</td>\n<td style=\"text-align:left\">package、import</td>\n</tr>\n</tbody>\n</table></div></div><p><code>保留字</code><br>\nJava版本尚未使用，但以后版本可能会作为关键字使用。</p>\n<p><code>goto、const、byValue、cast、future、 generic、 inner、 operator、 outer、 rest、 var</code></p>\n<blockquote>\n<p>注意：java中true、false、friendly和null不属于关键字，也不是保留字，它们只是显式常量值，但是你在程序中不能使用它们作为标识符。<br>\njava关键字和保留字都是小写。即null是关键字，NULL不是关键字；TRUE、FALSE也不是关键字。<br>\nsizeof 是 C/C++ 中的方法，Java 中并没有这个方法，也没有该关键字 或 保留字</p>\n</blockquote>\n<h2 id=\"数据类型\">数据类型<a title=\"#数据类型\" href=\"#数据类型\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305031330387.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>java中没有无符号数</p>\n<h2 id=\"字面值和常量\">字面值和常量<a title=\"#字面值和常量\" href=\"#字面值和常量\"></a></h2>\n<p>字面值/字面量(literals)是某种类型值的表示形式.<br>\n常量(constant)是在程序运行过程中，其值不能被改变的量。常量实际上是一个由 final 关键字修饰的变量，一旦为其赋值，其值在程序运行中就不能被改变.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">iterals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">dec</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">bin</span> <span class=\"operator\">=</span> <span class=\"number\">0b0110</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">oct</span> <span class=\"operator\">=</span> <span class=\"number\">021</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">hex</span> <span class=\"operator\">=</span> <span class=\"number\">0x31</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(dec); <span class=\"comment\">// 10</span></span><br><span class=\"line\">        System.out.println(bin); <span class=\"comment\">// 6</span></span><br><span class=\"line\">        System.out.println(oct); <span class=\"comment\">// 17</span></span><br><span class=\"line\">        System.out.println(hex); <span class=\"comment\">// 49</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\141&#x27;</span>;</span><br><span class=\"line\">        System.out.println(c);          <span class=\"comment\">// a , \\三个八进制数表示字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">1234_1234_5678.1234F</span>;    <span class=\"comment\">// Java7开始数值型字面量可以用下划线分组</span></span><br><span class=\"line\">        System.out.println(f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算符优先级\">运算符优先级<a title=\"#运算符优先级\" href=\"#运算符优先级\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305031420574.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"字符串拼接\">字符串拼接<a title=\"#字符串拼接\" href=\"#字符串拼接\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"number\">9</span> + <span class=\"number\">10</span> + <span class=\"string\">&quot;---&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 拼接字符串从左往右 19---</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;==&quot;</span> + <span class=\"string\">&#x27;k&#x27;</span> + <span class=\"literal\">false</span>); </span><br><span class=\"line\">     <span class=\"comment\">// ==kfalse</span></span><br><span class=\"line\">     <span class=\"comment\">// 注意和只有和字符串拼接才会隐式转换为字符串输出, 如果一个数字和字符拼接会转换成ASCII码的加法, &#x27;0&#x27;对应ASCII码48</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>\n<p>与 C/C++语言不同， Java的布尔型数据不能与其他任何数据类型相互转换，即 false 和 true不对应于0和非0的整数值。</p>\n</li>\n<li>\n<p>java的源文件名要和类名一样</p>\n</li>\n<li>\n<p>逻辑运算符的操作数只能是boolean, &amp;&amp; 与 &amp; 的区别, 前者属于短路运算符.</p>\n</li>\n<li>\n<p><code>&gt;&gt;&gt;</code> 无符号右移.</p>\n</li>\n<li>\n<p><code>println()</code>输出结果后自动换行<br>\n<code>print() </code>输出结果不换行<br>\n<code>printf()</code>和C一样, 按照格式字符串输出<br>\n<code>next()</code> 遇到回车才停止</p>\n</li>\n<li>\n<p>自动类型提升</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">byte</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">   <span class=\"type\">byte</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">   <span class=\"type\">byte</span> <span class=\"variable\">bs</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)(b1 + b2);</span><br><span class=\"line\">   <span class=\"comment\">// byte short char 在使用的时候会被先转换为int 使用(type)(statement)完成强制转换</span></span><br><span class=\"line\">   System.out.println(bs); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>java中的switch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;please input the order of game you wanna play/n&quot;</span>);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;1. DOTA, 2. LOL, 3. DNF, 4.AC/n&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">byte</span> game;</span><br><span class=\"line\">     game = sc.nextByte();</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (game) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 这里Switch括号内的待匹配值为byte short int char</span></span><br><span class=\"line\">         <span class=\"comment\">// JDK5 以后可以是枚举, JDK7 以后可以是String</span></span><br><span class=\"line\">         <span class=\"comment\">// case值不能重复 只能是字面量</span></span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;DOTA running&quot;</span>);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;LOL launching&quot;</span>);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;DNF loading&quot;</span>);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;AC is nice&quot;</span>);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;game is boring&quot;</span>);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// JDK 12 switch case 新写法 -&gt; &#123;&#125; 省略:和break</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>,<span class=\"number\">2</span> -&gt; System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 多个case可以逗号分隔写在一起</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span> -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">33</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span> -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">char</span> <span class=\"title function_\">NumToRome</span><span class=\"params\">(<span class=\"type\">char</span> n)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// Ⅰ－1、Ⅱ－2、Ⅲ－3、Ⅳ－4、Ⅴ－5、Ⅵ－6、Ⅶ－7、Ⅷ－8、Ⅸ－9       </span></span><br><span class=\"line\">       n = <span class=\"keyword\">switch</span> (n)&#123;  <span class=\"comment\">// JDK 12 后的新特性, 可以用变量接受switch的值</span></span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅰ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅱ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅲ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅳ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅴ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅵ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;7&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅶ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;8&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅷ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">&#x27;9&#x27;</span> -&gt; <span class=\"string\">&#x27;Ⅸ&#x27;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Java中的break和continue可以加一个标签以调出多层循环, 像C中goto那样. 但不能跳转到不相关的标签块.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\">    there:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i*<span class=\"number\">10</span> + j) == <span class=\"number\">50</span>) <span class=\"keyword\">continue</span> there;</span><br><span class=\"line\">           arr[i][j] = i*<span class=\"number\">10</span> + j;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%d\\t&quot;</span>, arr[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>java中没有sizeof运算符, C/C++中 sizeof 最初设计来是为了兼容不同设备的, 但java因为有JVM解决了这个问题, 所以不需要sizeof运算符.</p>\n</li>\n<li>\n<p>java中浮点运算结果可能溢出, 但不会溢出导致异常, 下溢结果为0, 上溢结果为Infinity 或 -Infinity, 出现没有意义的结果显示NaN</p>\n</li>\n<li>\n<p>main方法中的参数 <code>String[] args</code> 原先是用来接收键盘参数的, 现在已经不用, 可以在IDE中配置configuration</p>\n</li>\n<li>\n<p>指定环境变量时需要指定到程序所在目录; windows在指定文件夹打开cmd可以直接在路径栏输入cmd回车.</p>\n</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n<li><a href=\"https://blog.csdn.net/yh991314/article/details/108521095#:~:text=Java%E6%A0%87%E8%AF%86%E7%AC%A6%E5%AE%9A%E4%B9%89.%201%E3%80%81%E5%8C%85%E5%90%8D%E3%80%81%E7%B1%BB%E5%90%8D%E3%80%81%E6%96%B9%E6%B3%95%E5%90%8D%E3%80%81%E5%8F%82%E6%95%B0%E5%90%8D%E3%80%81%E5%8F%98%E9%87%8F%E5%90%8D%E7%AD%89%EF%BC%8C%E8%BF%99%E4%BA%9B%E7%AC%A6%E5%8F%B7%E8%A2%AB%E7%A7%B0%E4%B8%BA%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%82.%202%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6%E5%8F%AF%E4%BB%A5%E7%94%B1%E5%AD%97%E6%AF%8D%E3%80%81%E6%95%B0%E5%AD%97%E3%80%81%E4%B8%8B%E5%88%92%E7%BA%BF_%20%E5%92%8C%20%E7%BE%8E%E5%85%83%E7%AC%A6%E5%8F%B7%20%24%20%E7%BB%84%E6%88%90.%203%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8D%E8%83%BD%E4%BB%A5%E6%95%B0%E5%AD%97%E5%BC%80%E5%A4%B4%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%98%AFjava%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%82.,%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%EF%BC%8C%E5%9B%A0%E6%AD%A4%20myvar%20%E5%92%8C%20MyVar%20%E6%98%AF%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%82.%206%E3%80%81%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E4%BF%9D%E7%95%99%E5%AD%97%E4%BD%9C%E4%B8%BA%E6%A0%87%E8%AF%86%E7%AC%A6%EF%BC%8C%E4%BD%86%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%AD%E8%83%BD%E5%8C%85%E5%90%AB%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E4%BF%9D%E7%95%99%E5%AD%97%E3%80%82.%207%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8D%E8%83%BD%E5%8C%85%E5%90%AB%E7%A9%BA%E6%A0%BC%E3%80%82.%20%E4%BE%8B%E5%A6%82%EF%BC%9A.\" target=\"_blank\">Java标识符和关键字(超详细）</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/2099088#:~:text=Java%E6%A0%87%E8%AF%86%E7%AC%A6%E7%94%B1%E6%95%B0%E5%AD%97%EF%BC%8C%E5%AD%97%E6%AF%8D%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%EF%BC%88_%EF%BC%89%EF%BC%8C%E7%BE%8E%E5%85%83%E7%AC%A6%E5%8F%B7%EF%BC%88%24%EF%BC%89%E7%BB%84%E6%88%90%E3%80%82,%E6%AD%A4%E5%A4%84%E7%9A%84%E5%AD%97%E6%AF%8D%E5%B9%B6%E4%B8%8D%E5%B1%80%E9%99%90%E4%BA%8E26%E4%B8%AA%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%EF%BC%8C%E8%80%8C%E4%B8%94%E5%8F%AF%E4%BB%A5%E5%8C%85%E5%90%AB%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E3%80%81%E6%97%A5%E6%96%87%E5%AD%97%E7%AC%A6%E7%AD%89%E3%80%82%20Java%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81Unicode6.2.0%E5%AD%97%E7%AC%A6%E9%9B%86%EF%BC%8C%E5%9B%A0%E6%AD%A4Java%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8Unicode6.0.0%E6%89%80%E8%83%BD%E8%A1%A8%E7%A4%BA%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%97%E7%AC%A6%E3%80%82\" target=\"_blank\">JAVA合法标识符</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/24/[Java%E7%AC%94%E8%AE%B0]%E6%95%B0%E7%BB%84&%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://s1acr.github.io/2023/04/24/[Java%E7%AC%94%E8%AE%B0]%E6%95%B0%E7%BB%84&%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "[Java笔记]数组&字符串",
            "date_published": "2023-04-24T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>Java笔记</p>\n</blockquote>\n<h2 id=\"数组\">数组<a title=\"#数组\" href=\"#数组\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 声明数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr_1;</span><br><span class=\"line\">        String arr_2[];   <span class=\"comment\">// 两种形式</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建数组</span></span><br><span class=\"line\">        arr_1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        arr_2 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"comment\">// Java数组大小可以在运行时指定, C/C++不允许, 因为声明的时候仅要求确定引用(数组名);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 数组初始化器</span></span><br><span class=\"line\">        <span class=\"type\">double</span>[] arr_3 = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[]&#123;<span class=\"number\">1.0</span>, <span class=\"number\">2.1</span>, <span class=\"number\">3.2</span>, <span class=\"number\">4.3</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">double</span>[] arr_s = &#123;<span class=\"number\">1.0</span>, <span class=\"number\">4.0</span>&#125;;        <span class=\"comment\">// 简写</span></span><br><span class=\"line\">        <span class=\"comment\">// 声明数组的同时也可以对数组元素初始化, 也称静态初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 增强的for循环, 标识符获取每次循环的值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">double</span> v : arr_3) &#123;</span><br><span class=\"line\">            System.out.print(v + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 数组复制, 调用System.arraycopy()方法</span></span><br><span class=\"line\">        <span class=\"type\">double</span>[] arr_4 = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">        System.arraycopy(arr_3,<span class=\"number\">0</span>,arr_4, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">double</span> v : arr_4) &#123;</span><br><span class=\"line\">            System.out.print(v + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可变参数(variable-argument)\">可变参数(variable argument)<a title=\"#可变参数(variable-argument)\" href=\"#可变参数(variable-argument)\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数参数表的最后一个参数为 ... arr, 有点像 js 里面的 数组 解构符</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">getAVG</span><span class=\"params\">(String sign, <span class=\"type\">double</span> ... params)</span> &#123;</span><br><span class=\"line\">        System.out.println(sign);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">avg</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; params.length; i++) &#123;</span><br><span class=\"line\">            avg += params[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> avg / params.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(getAVG(<span class=\"string\">&quot;slacr_&quot;</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">5.0</span>));</span><br><span class=\"line\">        System.out.println(getAVG(<span class=\"string\">&quot;re&quot;</span>, <span class=\"number\">2.0</span>, <span class=\"number\">8.0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"arrays-类\">Arrays 类<a title=\"#arrays-类\" href=\"#arrays-类\"></a></h2>\n<p>Arrays 的 sort()方法可以对数组元素排序。使用该方法的排序是稳定的 (stable), 即相等的元素在排序结果中不会改变顺序。对于基本数据类型，按数据的升序排序。对于对象数组的排序要求数组元素的类必须实现 Comparable 接口，若要改变排序顺序，还可以指定一个比较器对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Arrays.sort()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        String[] arr_s = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Haskell&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>, <span class=\"string\">&quot;Scala&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String arr : arr_s) &#123;</span><br><span class=\"line\">            System.out.print(arr + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        </span><br><span class=\"line\">        Arrays.sort(arr_s);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String arr : arr_s) &#123;</span><br><span class=\"line\">            System.out.print(arr + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Arrays.binarySearch()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        Arrays.sort(arr);           <span class=\"comment\">// 先排序</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> Arrays.binarySearch(arr, <span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(res);   <span class=\"comment\">// 找到返回下标</span></span><br><span class=\"line\">        res = Arrays.binarySearch(arr, <span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(res);   <span class=\"comment\">// 找不到返回 - 应该插入的位置 - 1， -6</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr_c = Arrays.copyOf(arr, <span class=\"number\">6</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr_c.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr_c[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();  <span class=\"comment\">// 1 2 3 0 0 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr_cor = Arrays.copyOfRange(arr_c, <span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr_cor.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr_cor[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();  <span class=\"comment\">// 2 3 0 0 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fill() equals()</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        Arrays.fill(arr, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();  <span class=\"comment\">//  0 0 1 1 1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr_2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr_2.length; i++) &#123;</span><br><span class=\"line\">            Arrays.fill(arr_2, i, i+<span class=\"number\">1</span>, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Arrays.equals(arr, arr_2)) System.out.println(<span class=\"string\">&quot;equal&quot;</span>);  <span class=\"comment\">// equal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多维数组\">多维数组<a title=\"#多维数组\" href=\"#多维数组\"></a></h2>\n<p>在Java中，二维数组是数组的数组<br>\n在创建二维数组时，也可以先为第一维分配空间，然后再为第二维分配空间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] arr_1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][];</span><br><span class=\"line\">        arr_1[<span class=\"number\">0</span>]= <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        arr_1[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr_1.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr_1[i].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(arr_1[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"矩阵乘法\">矩阵乘法<a title=\"#矩阵乘法\" href=\"#矩阵乘法\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] m;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Matrix</span><span class=\"params\">(<span class=\"type\">int</span> m[][])</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.m = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Matrix <span class=\"title function_\">multiply</span><span class=\"params\">(Matrix M)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m.length][M.m[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; res.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; res[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; m[<span class=\"number\">0</span>].length; k++) &#123;</span><br><span class=\"line\">                    res[i][j] = res[i][j] + m[i][k] * M.m[k][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Matrix</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; m[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)    System.out.printf(<span class=\"string\">&quot;┏     &quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == m[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>)   System.out.printf(<span class=\"string\">&quot;     ┓&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>  System.out.printf(<span class=\"string\">&quot;     &quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; m[i].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( j == <span class=\"number\">0</span>)  System.out.printf(<span class=\"string\">&quot;┃%-5d&quot;</span>, m[i][j]);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( j == m[i].length - <span class=\"number\">1</span>) System.out.printf(<span class=\"string\">&quot;%-5d┃&quot;</span>, m[i][j]);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> System.out.printf(<span class=\"string\">&quot;%-5d&quot;</span>, m[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i == m.length - <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; m[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)    System.out.printf(<span class=\"string\">&quot;┗     &quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == m[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>)   System.out.printf(<span class=\"string\">&quot;     ┛&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>  System.out.printf(<span class=\"string\">&quot;     &quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ========================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] m_1 = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">                &#123;-<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] m_2 = &#123;&#123;<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"type\">Matrix</span> <span class=\"variable\">M_1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Matrix</span>(m_1);</span><br><span class=\"line\">        M_1.show();</span><br><span class=\"line\">        <span class=\"type\">Matrix</span> <span class=\"variable\">M_2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Matrix</span>(m_2);</span><br><span class=\"line\">        M_2.show();</span><br><span class=\"line\">        <span class=\"type\">Matrix</span> <span class=\"variable\">M_3</span> <span class=\"operator\">=</span> M_1.multiply(M_2);</span><br><span class=\"line\">        M_3.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091124076.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"字符串\">字符串<a title=\"#字符串\" href=\"#字符串\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 字面量 创建字符串</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;PHP is the best language all of the world!&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str_1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;A cup of Java&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] b = str.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str_2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(b, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        System.out.println(str_2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一些方法:<br>\n<code>public String(StringBuffer buffer)</code><br>\n<code>public String(StringBuilder buffer)</code><br>\n<code>public String substring(int beginIndex, int endIndex)</code><br>\n<code>public String toUpperCase()</code><br>\n<code>public String toLowerCase()</code><br>\n<code>public String trim()</code><br>\n<code>public boolean isEmpty()</code><br>\n<code>public String concat(String str)</code><br>\n<code>public String replace(char oldChar, char newChar)</code><br>\n<code>public char charAt(int index)</code><br>\n<code>public static String valueOf(double d)</code> 将参数转字符串<br>\n…<br>\n查找<br>\n<code>public int indexOf(int ch)</code><br>\n<code>public int indexOf(int ch, int fromIndex)</code><br>\n<code>public int indexOf(String str)</code><br>\n<code>public int indexOf(String str, int fromIndex)</code><br>\n<code>public int lastIndexOf(int ch)</code><br>\n<code>public int lastIndexOf(int ch, int endIndex)</code><br>\n<code>public int lastIndexOf(String str)</code><br>\n<code>public int lastIndexOf(String str, int endIndex)</code><br>\n…<br>\n字符串转数组<br>\n<code>public char[] toCharArray()</code><br>\n<code>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code><br>\n<code>public byte[] getBytes()</code><br>\n<code>public byte[] getBytes(String charsetName)</code><br>\n…<br>\n字符串比较<br>\n<code>public boolean equals(String anotherString)</code><br>\n<code>public boolean equalsIgnoreCase(String anotherString)</code><br>\n<code>public int compareTo(String another)  比较Unicode值</code><br>\n<code>public int compareToIgnoreCase(String anotherString)</code><br>\n<code>public boolean startsWith(String prefix)</code><br>\n<code>public boolean endsWith(String suffix)</code><br>\n<code>public boolean contains(String str)</code><br>\n字符串拆分与组合<br>\n<code>public String[] split(String regex)</code><br>\n<code>public boolean matches(String regex)</code><br>\n<code>public static String join(CharSequence delimiter, CharSequence ...elements)</code></p>\n<h2 id=\"命令行参数\">命令行参数<a title=\"#命令行参数\" href=\"#命令行参数\"></a></h2>\n<p><code>public static void main(String []args)&#123;&#125;</code><br>\n<code>public static void main(String ...args)&#123;&#125;</code><br>\n用CMD运行的时候指定, 或者在IDEA中可以,</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091231052.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091232246.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Apply应用后在运行就可以了.</p>\n<h2 id=\"格式输出\">格式输出<a title=\"#格式输出\" href=\"#格式输出\"></a></h2>\n<p><code>public PrintStream printf(String format, Object ...args)</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091235922.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>“%s&quot;格式符也可以用在任何类型的数据上。对于”%s&quot;格式符号，如果参数值为 null,结果输出 null; 如果参数实现了 Formatter 接口，结果是调用 args.formatTo()的结果，否则结果是调用 args.toString()的结果</p>\n<p><code>public static String format(String format, Object ...args)</code><br>\n<code>public static String format(Locale l, String format, Object ...args)</code><br>\n这两个方法的功能是按照参数指定的格式，将args格式化成字符串返回。此外，在java.io.PrintStream类、java.io.PrintWriter类以及 java.util.Formatter类中都提供了相应的format()方法。它们的不同之处是方法的返回值不同。在各自类中的 format()方法返回各自类的一个对象.</p>\n<h2 id=\"stringbuilder-和-stringbuffer\">StringBuilder 和 StringBuffer<a title=\"#stringbuilder-和-stringbuffer\" href=\"#stringbuilder-和-stringbuffer\"></a></h2>\n<p>StringBuilder类和 StringBuffer类都表示可变字符串，即这两个类的对象内容是可以修改的。一般来说，只要使用字符串的地方，都可以使用 StringBuilder/StringBuffer类，它们比 String类更灵活。</p>\n<h3 id=\"stringbuilder\">StringBuilder<a title=\"#stringbuilder\" href=\"#stringbuilder\"></a></h3>\n<p><code>public StringBuilder()</code><br>\n创建一个没有字符的字符串缓冲区，初始容量为16个字符。此时length()方法的值为0,而capacity()方法的值为16<br>\n<code>public StringBuilder(int capacity)</code><br>\n<code>public StringBuilder(String str)</code><br>\n利用一个已存在的字符串对象 str创建一个字符串缓冲区对象，另外再分配16个字符的缓冲区</p>\n<p>StringBuilder类除定义了 <code>length()、charAt()、indexOf()、getChars()</code>等方法外，还提供<br>\n了下列常用方法<br>\n<code>public int capacity()</code><br>\n<code>public void setCharAt(int index,char ch)</code><br>\n<code>public StringBuilder append(String str)</code><br>\n<code>public StringBuilder insert(int offset, String str)</code><br>\n<code>public StringBuilder deleteCharAt(int index)</code><br>\n<code>public StringBuilder delete(int start, int end)</code><br>\n<code>public StringBuilder replace(int start, int end, String str)</code><br>\n<code>public StringBuilder reverse()</code><br>\n<code>public String substring(int start)</code><br>\n<code>public String substring(int start, int end)</code><br>\n<code>public void setLength(int newLength)</code><br>\n更多见文档 <a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/lang/StringBuilder.html\" target=\"_blank\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/lang/StringBuilder.html</a></p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>Java中String对象是不可变的字符串, 方法不能改变对象本身, 只返回新的字符串.</li>\n<li>在 Java语言中不支持运算符重载，但有一个特例，即&quot;+“运算符(包括+=)是唯一重载的运算符。该运算符除用于计算两个数之和外，还用于连接两个字符串。当用”+&quot;运算符连接的两个操作数其中有一个是 String类型时，该运算即为字符串连接运算.</li>\n<li>StringBuffer类的实例是线程安全的，而StringBuilder类的实例不是线程安全的。如果不需要线程同步，建议使用 StringBuilder类</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《Java程序设计(第3版)》 IBSN 9787302485520</li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/index.html\" target=\"_blank\">Java API 文档</a></li>\n</ol>\n",
            "tags": []
        }
    ]
}