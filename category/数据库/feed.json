{
    "version": "https://jsonfeed.org/version/1",
    "title": "slacr_'s blog • All posts by \"数据库\" category",
    "description": "slacr_ blog self blog website record coding githubpages",
    "home_page_url": "https://s1acr.github.io",
    "items": [
        {
            "id": "https://s1acr.github.io/2023/06/03/[%E6%95%B0%E6%8D%AE%E5%BA%93]%E8%AE%BE%E8%AE%A1/",
            "url": "https://s1acr.github.io/2023/06/03/[%E6%95%B0%E6%8D%AE%E5%BA%93]%E8%AE%BE%E8%AE%A1/",
            "title": "[数据库]设计",
            "date_published": "2023-06-03T00:00:00.000Z",
            "content_html": "<h2 id=\"关系数据理论\">关系数据理论<a title=\"#关系数据理论\" href=\"#关系数据理论\"></a></h2>\n<div class=\"φbu φbx\">\n<details>\n<summary><strong><code>问题提出</code></strong></summary>\n<ul>\n<li>一个<code>关系模式</code>应当是一个 5 元组 R(U,D,DOM,F)</li>\n<li>当且仅当 U 上的一个关系 r 满足 F 时，r 称为关系模式 R&lt;U,F&gt;的一个关系。</li>\n<li>作为一个二维表，关系要符合一个最基本的条件：<code>每一个分量必须是不可分的数据项</code>。满足了这个条件的关系模式就属于<code>第一范式(1NF)</code>。</li>\n<details>\n<summary><strong><code>数据依赖</code></strong></summary>\n<ul>\n<li><code>数据依赖是一个关系内部属性与属性之间的一种约束关系</code>。这种约束关系是通过属性间值的相等与否体现出来的数据间相关联系。它是现实世界属性间相互联系的抽象，是数据内在的性质，是语义的体现。</li>\n<li>有许多种类型的数据依赖，其中最重要的是<code>函数依赖(Functional Dependency,FD)</code>和<code>多值依赖(Multi-Valued Dependency,MVD)</code>。</li>\n<details>\n<summary><strong><code>函数依赖</code></strong></summary>\n<ul>\n<li>函数依赖类似于数学中的函数 y=f(x),自变量 x 确定之后，相应的函数值 y 也就唯一地确定了.</li>\n<li>类似的有 Sname=f(Sno),Sdept=f(Sno),即 Sno 函数决定 Sname,Sno 函数决定 Sdept,或者说 Sname 和 Sdept 函数依赖于 Sno,记作<code>Sno→Sname,Sno→Sdept</code>。</li>\n<li>如 F={Sno→Sdept,Sdept→Mname,(Sno,Cno)→Grade}<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306031717559.png\" alt=\"\" loading=\"lazy\"></li>\n<li>这仅仅符合第一范式的关系模式存在以下问题: 数据冗余, 更新异常(update anomalies), 插入异常(insertion anomalies), 删除异常(deletion anomalies)</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>规范化</code></strong></summary>\n<ul>\n<li>按属性间依赖情况来区分关系规范化程度为第一范式、第二范式、第三范式和第四范式等；然后将具有不合适性质的关系转换为更合适的形式。</li>\n<details>\n<summary><strong><code>函数依赖</code></strong></summary>\n<ul>\n<li>设 R(U)是属性集 U 上的关系模式，X,Y 是 U 的子集。若对于 R(U)的任意一个可能的关系 r,r 中不可能存在两个元组在 X 上的属性值相等，而在 Y 上的属性值不等，则称 X 函数确定 Y 或 Y 函数依赖于 X,记作 X→Y。</li>\n<li>函数依赖和别的数据依赖一样是语义范畴的概念，只能根据语义来确定一个函数依赖。</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032030242.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>码</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032045940.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>范式(normal form)</code></strong></summary>\n<ul>\n<li><code>关系数据库中的关系</code>是要满足一定要求的，<code>满足不同程度要求的为不同范式</code>。满足最低要求的叫第一范式，简称1NF;在第一范式中满足进一步要求的为第二范式，其余以此类推。</li>\n<li>有关范式理论的研究主要是<code>E.E.Codd</code>做的工作。1971—1972年Codd系统地提出了1NF、2NF、3NF的概念，讨论了规范化的问题。1974年，Codd和Boyce共同提出了一个新范式，即BCNF。1976年Fagin提出了4NF。后来又有研究人员提出了5NF。</li>\n<li>范式这个概念理解成<code>符合某一种级别的关系模式的集合</code>，即R为第几范式就可以写成R∈xNF。</li>\n<li>一个低一级范式的关系模式通过<code>模式分解(schema decomposition)</code>可以转换为若干个高一级范式的关系模式的集合，这种过程就叫<code>规范化(normalization)</code>。</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032051634.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>2NF</code></strong></summary>\n<ul>\n<li>若R∈1NF,且<code>每一个非主属性完全函数依赖于任何一个候选码</code>，则R∈2NF。</li>\n<li>一个关系模式R不属于2NF,就会产生以下几个问题：插入异常, 删除异常, 修改复杂, 存储冗余度大.</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032058126.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>3NF</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032102759.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li>{就是说再满足2NF的基础上不能存在传递依赖, 比如某一关系的属性组A-B-C, A-&gt;B, B-&gt;C, 则A-传递-&gt;C, 解决方法就是拆成两个关系 A-B, B-C就满足了3NF}</li>\n</details>\n</li>\n<details>\n<summary><strong><code>BCNF</code></strong></summary>\n<ul>\n<li><code>BCNF(Boyce Codd Normal Form)</code>是由Boyce与Codd提出的，比上述的3NF又进了一步，通常认为BCNF是修正的第三范式，有时也称为扩充的第三范式。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032117733.png\" alt=\"\" loading=\"lazy\"></li>\n<li>3NF和BCNF是在函数依赖的条件下对模式分解所能达到的分离程度的测度。一个模式中的关系模式如果都属于BCNF,那么在函数依赖范畴内它已实现了彻底的分离，已消除了插入和删除的异常。3NF的“不彻底”性表现在可能存在主属性对码的部分依赖和传递依赖。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>多值依赖</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032154605.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li>{也就是说, 若B多值依赖于A , A-&gt;-&gt;B, 那么给定一个A=a, 就能确定一组B的值 {b1, b2…}, 并且这组值的确定仅仅跟A有关, 与其他属性无关}</li>\n<details>\n<summary><strong><code>多值依赖的性质</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032150562.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>4NF</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032152134.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li>4NF就是限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>5NF</code></strong></summary>\n<ul>\n<li>数据依赖中除函数依赖和多值依赖之外，还有其他数据依赖。例如有一种连接依赖。函数依赖是多值依赖的一种特殊情况，而多值依赖实际上又是连接依赖的一种特殊情况。但连接依赖不像函数依赖和多值依赖可由语义直接导出，而是在关系的连接运算时才反映出来。存在连接依赖的关系模式仍可能遇到数据冗余及插入、修改、删除异常等问题。如果消除了属于4NF的关系模式中存在的连接依赖，则可以进一步达到5NF的关系模式。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>规范化思想</code></strong></summary>\n<ul>\n<li>规范化的基本思想是逐步消除数据依赖中不合适的部分，使模式中的各关系模式达到某种程度的&quot;分离&quot;, 即“一事一地”的模式设计原则。让一个关系描述一个概念、一个实体或者实体间的一种联系。若多于一个概念就把它“分离”出去。因此所谓规范化实质上是<code>概念的单一化</code>。</li>\n<li>关系模式的规范化过程是通过对关系模式的分解来实现的，即<code>把低一级的关系模式分解为若干个高一级的关系模式</code>。这种分解不是唯一的。</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032202011.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306032125773.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><h2 id=\"数据库设计\">数据库设计<a title=\"#数据库设计\" href=\"#数据库设计\"></a></h2>\n<div class=\"φbu φbx\">\n<details>\n<summary><strong><code>基础</code></strong></summary>\n<ul>\n<li>数据库设计是指对于一个给定的应用环境，构造(设计)优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作要求。</li>\n<li>“三分技术，七分管理，十二分基础数据” 是数据库设计的特点之一。</li>\n<li>数据库设计应该和应用系统设计相结合。整个设计过程中要把数据库结构设计和对数据的处理设计密切结合起来。这是数据库设计的特点之二。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041436902.png\" alt=\"\" loading=\"lazy\"></li>\n<li>各种数据库设计方法。例如，新奥尔良(New Orleans)方法、基于E-R模型的设计方法、3NF(第三范式)的设计方法、面向对象的数据库设计方法、统一建模语言(Unified Model Language,UML)方法等。</li>\n<details>\n<summary><strong><code>数据库设计基本步骤</code></strong></summary>\n<ul>\n<li><code>需求分析</code></li>\n<li><code>概念结构设计</code></li>\n<li><code>逻辑结构设计</code></li>\n<li><code>物理结构设计</code></li>\n<li><code>数据库实施</code></li>\n<details>\n<summary><code>数据库运行和维护</code></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041439359.png\" alt=\"\" loading=\"lazy\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041442128.png\" alt=\"\" loading=\"lazy\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041444951.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>需求分析</code></strong></summary>\n<ul>\n<li>需求分析的任务是通过详细调查现实世界要处理的对象(组织、部门、企业等),充分了解原系统(手工系统或计算机系统)的工作概况，明确用户的各种需求，然后在此基础上确定新系统的功能。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041449872.png\" alt=\"\" loading=\"lazy\"></li>\n<details>\n<summary><strong><code>数据字典</code></strong></summary>\n<ul>\n<li>数据字典是进行详细的数据收集和数据分析所获得的主要成果。它是关于数据库中数据的描述，即元数据，而不是数据本身。数据字典是在需求分析阶段建立，在数据库设计过程中不断修改、充实、完善的。</li>\n<li>数据字典通常包括<code>数据项、数据结构、数据流、数据存储和处理过程</code>几部分。其中数据项是数据的最小组成单位，若干个数据项可以组成一个数据结构。数据字典通过对数据项和数据结构的定义来描述数据流、数据存储的逻辑内容。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>概念结构设计</code></strong></summary>\n<ul>\n<li>将需求分析得到的<code>用户需求抽象为信息结构</code>(即概念模型)的过程就是概念结构设计。</li>\n<details>\n<summary><strong><code>E-R模型</code></strong></summary>\n<ul>\n<li>P.P.S.Chen提出的E-R模型是用E-R图来描述现实世界的概念模型.</li>\n<li><strong><code>实体之间的联系</code></strong></li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041458331.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041501108.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li>N个实体型之间的联系度为N,也称为N元联系。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>E-R图</code></strong></summary>\n<ul>\n<li>E-R图提供了表示实体型、属性和联系的方法。</li>\n<li>实体型用矩形表示，矩形框内写明实体名。</li>\n<li>属性用椭圆形表示，并用无向边将其与相应的实体型连接起来。</li>\n<li>联系用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体型连接起来，同时在无向边旁标上联系的类型(1:1、1:n或m:n)。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041506766.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>扩展的E-R模型</code></strong></summary>\n<ul>\n<details>\n<summary><strong><code>ISA联系</code></strong></summary>\n<ul>\n<li>遇到某些实体型是某个实体型的子类型。例如，研究生和本科生是学生的子类型，学生是父类型。这种父类-子类联系称为ISA联系，表示“is a”的语义. ISA联系用三角形来表示。</li>\n<li>ISA联系一个重要的性质是子类继承了父类的所有属性，描述了对一个实体型中实体的一种分类方法.</li>\n<details>\n<summary><code>分类属性</code></summary>\n<ul>\n<li>根据分类属性的值把父实体型中的实体分派到子实体型中<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041513447.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n<details>\n<summary><code>不相交约束与可重叠约束</code></summary>\n<ul>\n<li>不相交约束描述父类中的一个实体不能同时属于多个子类中的实体集，即一个父类中的实体最多属于一个子类实体集，用ISA联系三角形符号内加一个叉号“X”来表示。如果父类中的一个实体能同时属于多个子类中的实体集，则称为可重叠约束，子类符号中没有叉号表示是可重叠的。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041521971.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n<details>\n<summary><code>Part-of联系 </code></summary>\n<ul>\n<li>Part-of联系即部分联系，它表明某个实体型是另外一个实体型的一部分。例如汽车和轮子两个实体型，轮子实体是汽车实体的一部分，即Part-of汽车实体。Part-of联系可以分为两种情况，一种是整体实体如果被破坏，部分实体仍然可以独立存在，称为<code>非独占</code>的Part-of联系. 非独占的Part-of联系可以通过基数约束来表达。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041526631.png\" alt=\"\" loading=\"lazy\"><br>\n汽车队轮子的基数约束是0…1,这样的约束表示非强制参与联系, 轮子对汽车的约束 4…4, 强制参与联系.</li>\n</details>\n</li>\n<li>与非独占联系相反，还有一种Part-of联系是<code>独占</code>联系。即整体实体如果被破坏，部分实体不能存在，在E-R图中用<code>弱实体类型和识别联系</code>来表示独占联系。如果<code>一个实体型的存在依赖于其他实体型的存在</code>，则<code>这个实体型叫做弱实体型</code>，否则叫做<code>强实体型</code>。</li>\n<li>在E-R图中用双矩形表示弱实体型，用双菱形表示识别联系。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041532199.png\" alt=\"\" loading=\"lazy\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>E-R图的集成</code></strong></summary>\n<ul>\n<li>经常采用的策略是自顶向下地进行需求分析，然后再自底向上地设计概念结构。即首先设计各子系统的分E-R图，然后将它们集成起来，得到全局E-R图。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202306041541081.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>逻辑结构设计</code></strong></summary>\n<ul>\n<li>概念结构是独立于任何一种数据模型的信息结构，逻辑结构设计的任务就是把概念结构设计阶段设计好的基本E-R图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构。</li>\n<li>一般一个实体型转换为一个关系模式</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>物理结构设计</code></strong></summary>\n<ul>\n<li>为一个给定的逻辑数据模型选取一个最适合应用要求的物理结构的过程.</li>\n<li><strong><code>关系模式存取方法选择</code></strong></li>\n<li>存取方法是快速存取数据库中数据的技术。数据库管理系统一般提供多种存取方法。常用的存取方法为<code>索引方法和聚簇(clustering)方法</code>。B+树索引和hash索引是数据库中经典的存取方法，使用最普遍。</li>\n</details>\n</li>\n</ul>\n</div><hr>\n<p><strong>参考</strong></p>\n<ol>\n<li>数据库系统概论/王珊 第五版</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/22/[%E6%95%B0%E6%8D%AE%E5%BA%93]%E5%9F%BA%E7%A1%80/",
            "url": "https://s1acr.github.io/2023/05/22/[%E6%95%B0%E6%8D%AE%E5%BA%93]%E5%9F%BA%E7%A1%80/",
            "title": "[数据库]基础",
            "date_published": "2023-05-22T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>数据库系统概论, 复习用, 大都是概念性的东西</p>\n</blockquote>\n<h2 id=\"基本概念\">基本概念<a title=\"#基本概念\" href=\"#基本概念\"></a></h2>\n<div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据(data)</code></strong></summary>\n<ul>\n<li>描述事物的符号</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据库(DataBase,DB)</code></strong></summary>\n<ul>\n<li>长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度(redundancy)、较高的数据独立性(data independency)和易扩展性(scalability),并可为各种用户共享</li>\n<li>具有<code>永久存储、有组织和可共享</code>三个基本特点。</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据库管理系统(DataBase Management System,DBMS)</code></strong></summary>\n<ul>\n<li>位于用户与操作系统之间的一层数据管理软件。主要功能: 数据定义功能; 数据组织、存储和管理; 数据操纵功能; 数据库的事务管理和运行管理; 数据库的建立和维护功能.</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据库系统(DataBase System,DBS)</code></strong></summary>\n<ul>\n<li>由数据库、数据库管理系统(及其应用开发工具)、应用程序和数据库管理员(DataBase Administrator,DBA)组成的存储、管理、处理和维护数据的系统。</li>\n<details>\n<summary>数据库管理系统提供以下几方面的数据控制功能: <code>数据的安全性(security)保护; 数据的完整性(integrity)检查; 并发(concurrency)控制; 数据库恢复(recovery)</code></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305221750500.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305221752843.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据模型(data model)</code></strong></summary>\n<ul>\n<li>对现实世界数据特征的抽象. 把现实世界中具体的人、物、活动、概念用数据模型这个工具来抽象、表示和处理。</li>\n<li>数据模型是数据库系统的核心和基础. 各种机器上实现的数据库管理系统软件都是基于某种数据模型或者说是支持某种数据模型的。</li>\n<li>根据模型应用的不同目的，可以将这些模型划分为两大类，它们分别属于两个不同的层次。第一类是<code>概念模型</code>，第二类是<code>逻辑模型和物理模型</code>。</li>\n<details>\n<summary><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305222137417.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></summary>\n<ul>\n<details>\n<summary><strong><code>概念模型(conceptual model)</code></strong></summary>\n<ul>\n<li>也称信息模型，它是按用户的观点来对数据和信息建模，主要用于数据库设计。</li>\n<li><strong><code>实体(entity)</code></strong> 客观存在并可相互区别的事物称为实体。</li>\n<li><strong><code>属性(attribute)</code></strong> 实体所具有的某一特性称为属性.</li>\n<li><strong><code>码(key)</code></strong> 唯一标识实体的属性集称为码</li>\n<li><strong><code>实体型(entity type)</code></strong> 用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。例如，学生(学号，姓名，性别，出生年月，所在院系，入学时间)就是一个实体型。{就像类的声明}。</li>\n<li><strong><code>实体集(entity set)</code></strong> 同一类型实体的集合称为实体集。例如，全体学生就是一个实体集。{相当于一组同类的对象的集合}</li>\n<li><strong><code>联系(relationship)</code></strong> 组成实体的各属性之间的联系</li>\n<li><strong><code>实体-联系方法(Entity-Relationship approach)</code></strong>  P.P.S.Chen 于 1976 年提出, 用 E-R 图(E-R diagram)来描述现实世界的概念模型，E-R 方法也称为<code>E-R模型</code>。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>逻辑模型</code></strong></summary>\n<ul>\n<li>按计算机系统的观点对数据建模，主要用于数据库管理系统的实现。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>物理模型</code></strong></summary>\n<ul>\n<li>是对数据最底层的抽象，它描述数据在系统内部的表示方式和存取方法，或在磁盘或磁带上的存储方式和存取方法，是面向计算机系统的。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>数据模型的组成要素</code></strong></summary>\n<ul>\n<li>数据模型是严格定义的一组<code>概念的集合</code>。这些概念精确地描述了系统的<code>静态特性、动态特性和完整性约束条件(integrity constraints)</code>。因此数据模型通常由<code>数据结构、数据操作和数据的完整性约束</code>条件三部分组成。</li>\n<li><strong><code>数据结构</code></strong> 数据结构描述数据库的组成对象以及对象之间的联系</li>\n<li><strong><code>数据操作</code></strong> 指对数据库中各种对象(型)的实例(值)允许执行的操作的集合，包括操作及有关的操作规则。</li>\n<li><strong><code>数据的完整性约束条件</code></strong> 数据的完整性约束条件是一组完整性规则.</li>\n</details>\n</li>\n<details>\n<summary><strong><code>常用的数据模型</code></strong></summary>\n<ul>\n<li><strong><code>面向对象数据模型(object oriented data model)</code></strong></li>\n<li><strong><code>对象关系数据模型(object relational data model)</code></strong></li>\n<li><strong><code>半结构化数据模型(semistructure data model)</code></strong></li>\n<details>\n<summary><strong><code>层次模型(hierarchical model)</code></strong></summary>\n<ul>\n<li>层次模型用<code>树形结构</code>来表示各类实体以及实体间的联系. 结构简单, 查询效率高. {就比如说我这个目录树}</li>\n</details>\n</li>\n<details>\n<summary><strong><code>网状模型(network model)</code></strong></summary>\n<ul>\n<li>存取效率较高。 DDL、DML 复杂，并且要嵌入某一种高级语言(如 COBOL、C)中。用户不容易掌握，不容易使用。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>关系模型(relational model)</code></strong></summary>\n<ul>\n<details>\n<summary><strong><code>关系模型的数据结构</code></strong></summary>\n<ul>\n<li>关系模型要求关系必须是规范化的，即要求关系必须满足一定的规范条件，这些规范条件中最基本的一条就是，关系的每一个分量必须是一个不可分的数据项.</li>\n<li><strong><code>关系(relation)</code></strong> 一个关系对应通常说的一张表.</li>\n<li><strong><code>元组(tuple)</code></strong> 表中的一行即为一个元组。</li>\n<li><strong><code>属性(attribute)</code></strong> 表中的一列即为一个属性</li>\n<li><strong><code>码(key)</code></strong> 就是键, 唯一标识一个元组.</li>\n<li><strong><code>域(domain)</code></strong> 一组具有相同数据类型的值的集合。属性的取值范围来自某个域.</li>\n<li><strong><code>分量</code></strong> 元组中的一个属性值。</li>\n<li><strong><code>关系模式</code></strong> 对关系的描述，一般表示为关系名(属性 1,属性 2,…,属性 n)<br>\n{和实体型同理, 语言就是用一个词解释另一个词, 组成有向的网状结构, 虽然含义大致一样, 但还是能觉察到其在整个语言体系中的位置不同, 能感觉到存在差别. 关系模式是用来描述数据库的关系的组织形式, 实体型用来描述一组元组对应实例对象的共同特征}</li>\n</details>\n</li>\n<details>\n<summary><strong><code>关系模型的数据操纵与完整性约束</code></strong></summary>\n<ul>\n<li>关系模型的数据操纵主要包括查询、插入、删除和更新数据。这些操作必须满足关系的完整性约束条件。关系的<code>完整性约束条件</code>包括三大类：<code>实体完整性、参照完整性和用户定义的完整性</code>。</li>\n<details>\n<summary><strong><code>关系模型的优缺点</code></strong></summary>\n<ul>\n<li>建立在严格的数学概念的基础上</li>\n<li>关系模型的概念单一。无论实体还是实体之间的联系都用关系来表示。对数据的检索和更新结果也是关系(即表)。所以其数据结构简单、清晰，用户易懂易用。</li>\n<li>存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据库系统的(模式结构)</code></strong></summary>\n<ul>\n<li>{这里的’模式’是既是名词也是形容词,修饰’结构’, 或者说’模’是形容词, 数据库系统的结构可以有很多种不同角度的分法.}</li>\n<li>模式(schema)是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。模式的一个具体值称为模式的一个实例(instance)。同一个模式可以有很多实例。</li>\n<details>\n<summary>虽然实际的数据库管理系统产品种类很多，它们支持不同的数据模型，使用不同的数据库语言，建立在不同的操作系统之上，数据的存储结构也各不相同，但它们在体系结构上通常都具有相同的特征，即采用<code>三级模式结构</code>(早期微机上的小型数据库系统除外)并提供<code>两级映像功能</code>。</summary>\n<ul>\n<details>\n<summary><strong><code>三级模式结构</code></strong><br>\n数据库系统是由<code>外模式、模式和内模式</code>三级构成<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305231429927.png\" alt=\"\" loading=\"lazy\"></summary>\n<ul>\n<li><strong><code>外模式(external schema)</code></strong><br>\n外模式也称子模式(subschema)或用户模式，它是数据库用户(包括应用程序员和最终用户)能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。外模式通常是模式的子集。</li>\n<li><strong><code>模式(schema)</code></strong><br>\n模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。它是数据库系统模式结构的中间层，既不涉及数据的物理存储细节和硬件环境，又与具体的应用程序、所使用的应用开发工具及高级程序设计语言无关。模式实际上是数据库数据在逻辑级上的视图。</li>\n<li><strong><code>内模式(internal schema)</code></strong><br>\n内模式也称存储模式(storage schema),一个数据库只有一个内模式。它是<code>数据物理结构和存储方式的描述</code>，是数据在数据库内部的组织方式.</li>\n</details>\n</li>\n<details>\n<summary><strong><code>二级映像功能</code></strong></summary>\n<ul>\n<li><strong><code>外模式/模式映像</code></strong><br>\n模式描述的是数据的全局逻辑结构，外模式描述的是数据的局部逻辑结构。对应于同一个模式可以有任意多个外模式。对于每一个外模式，数据库系统都有一个外模式/模式映像，它定义了该外模式与模式之间的对应关系。这些映像定义通常包含在各自外模式的描述中。<br>\n当模式改变时(例如增加新的关系、新的属性、改变属性的数据类型等),由数据库管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称<code>数据的逻辑独立性</code>。</li>\n<li><strong><code>模式/内模式映像</code></strong><br>\n数据库中只有一个模式，也只有一个内模式，所以模式/内模式映像是唯一的，它定义了数据全局逻辑结构与存储结构之间的对应关系。当数据库的存储结构改变时(例如选用了另一种存储结构),由数据库管理员对模式/内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称<code>数据的物理独立性</code>。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据库系统的组成</code></strong></summary>\n<ul>\n<li>硬件平台及数据库 \\ 软件 \\ 人员<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305231444714.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n</ul>\n</div><h2 id=\"关系数据库\">关系数据库<a title=\"#关系数据库\" href=\"#关系数据库\"></a></h2>\n<p>关系数据库系统是支持关系模型的数据库系统.</p>\n<div class=\"φbu φbx\">\n<details>\n<summary><strong><code>关系数据结构及形式化定义</code></strong></summary>\n<ul>\n<li>关系模型的数据结构非常简单，只包含单一的数据结构——关系。在用户看来，关系模型中数据的逻辑结构是一张扁平的二维表。</li>\n<li><strong><code>域(domain)</code></strong> 组具有相同数据类型的值的集合。</li>\n<details>\n<summary><strong><code>笛卡儿积(cartesian product)</code></strong></summary>\n<ul>\n<li>给定一组域 D1,D2,…,Dn,允许其中某些域是相同的，D1,D2,…,Dn,的笛卡儿积为: - <img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305231520184.png\" alt=\"\" loading=\"lazy\"></li>\n<li>每一个元素(d1,d2,…,dn)叫作一个 n 元组(n-tuple),或简称元组(tuple)。元素中的每一个值 d,叫做一个分量(component)。一个域允许的不同取值个数称为这个域的基数(cardinal number)。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>关系(relation)</code></strong></summary>\n<ul>\n<li>笛卡尔积的子集</li>\n<li>关系也是一张二维表，表的每行对应一个元组，表的每列对应一个域。由于域可以相同，为了加以区分，必须对每列起一个名字，称为属性(attribute)。n 目关系必有 n 个属性。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>候选码(candidate key)</code></strong></summary>\n<ul>\n<li>某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码 (candidate key)。 - 若一个关系有多个候选码，则<code>选定其中一个为主码(primary key)</code>。</li>\n<li><code>候选码的诸属性称为主属性(prime attribute)</code>。不包含在任何候选码中的属性称为非主属性(non-prime attribute)或非码属性(non-key attribute)。</li>\n<li>在最简单的情况下，候选码只包含一个属性。在最极端的情况下，关系模式的所有属性是这个关系模式的候选码，称为全码(all-key)。</li>\n</details>\n</li>\n<li>关系可以有三种类型：<code>基本关系(通常又称为基本表或基表)、查询表和视图表</code>。</li>\n<li>基本表是实际存在的表，它是实际存储数据的逻辑表示；查询表是查询结果对应的表；视图表是由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据。</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>关系模式</code></strong></summary>\n<ul>\n<li>关系模式是型，关系是值。关系模式是对关系的描述</li>\n<li>关系是元组的集合，因此关系模式必须指出这个元组集合的结构，即它由哪些属性构成，这些属性来自哪些域，以及属性与域之间的映像关系。</li>\n<li>关系的描述称为<code>关系模式(relation schema)</code>。它可以形式化地表示为<br>\n<code>R(U,D,DOM,F)</code><br>\nR 为关系名，U 为组成该关系的属性名集合，D 为 U 中属性所来自的域，DOM 为属性向域的映像集合，F 为属性间数据的依赖关系集合。</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>关系数据库</code></strong></summary>\n<ul>\n<li>关系数据库的型也称为关系数据库模式，是对关系数据库的描述。</li>\n<li>关系数据库的值是这些关系模式在某一时刻对应的关系的集合，通常就称为关系数据库。</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>关系操作</code></strong></summary>\n<ul>\n<li>常用的关系操作包括查询(query)操作和插入(insert)、删除(delete)、修改(update)操作两大部分。</li>\n<li>查询操作又可以分为选择(select)、投影(project)、连接(join)、除(divide)、并(union)、差(except)、交(intersection)、笛卡儿积等。其中选择、投影、并、差、笛卡儿积是 5 种基本操作，其他操作可以用基本操作来定义和导出</li>\n<li>关系操作的特点是集合操作方式，即操作的对象和结果都是集合.</li>\n<details>\n<summary><strong><code>关系数据语言的分类</code></strong></summary>\n<ul>\n<details>\n<summary><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305231552868.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></summary>\n<ul>\n<li>早期的关系操作能力通常用代数方式或逻辑方式来表示，分别称为<code>关系代数(relationalalgebra)和关系演算(relational calculus)</code>。关系代数用对关系的运算来表达查询要求，关系演算则用谓词来表达查询要求。关系演算又可按谓词变元的基本对象是元组变量还是域变量分为元组关系演算和域关系演算。一个关系数据语言能够表示关系代数可以表示的查询，称为具有完备的表达能力，简称关系完备性。已经证明关系代数、元组关系演算和域关系演算三种语言在表达能力上是等价的，都具有完备的表达能力。</li>\n<li>关系代数、元组关系演算和域关系演算均是抽象的查询语言，这些抽象的语言与具体的关系数据库管理系统中实现的实际语言并不完全一样。但它们能用作评估实际系统中查询语言能力的标准或基础。</li>\n<li>结构化查询语言(Sructured QueryLanguage,SQL)。SQL 不仅具有丰富的查询功能，而且具有数据定义和数据控制功能，是集查询、数据定义语言、数据操纵语言和数据控制语言(Data Control Language,DCL)于一体的关系数据语言。它充分体现了关系数据语言的特点和优点，是关系数据库的标准语言。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>关系的完整性</code></strong></summary>\n<ul>\n<details>\n<summary>关系模型中有三类完整性约束：<code>实体完整性(entity integrity)、参照完整性(referential integrity)和用户定义的完整性(user-defined integrity)</code></summary>\n<ul>\n<details>\n<summary><strong><code>实体完整性规则</code></strong></summary>\n<ul>\n<li>若属性(指一个或一组属性)A 是基本关系 R 的主属性，则 A 不能取空值(null value). {即主码非空}</li>\n</details>\n</li>\n<details>\n<summary><strong><code>参照完整性规则</code></strong></summary>\n<ul>\n<li>若属性(或属性组)F 是基本关系 R 的外码，它与基本关系 S 的主码 Ks 相对应(基本关系 R 和 S 不一定是不同的关系),则对于 R 中每个元组在 F 上的值必须： 或者取空值(F 的每个属性值均为空值); 或者等于 S 中某个元组的主码值。</li>\n<li><code>外码</code><br>\n设 F 是基本关系 R 的一个或一组属性，但不是关系 R 的码，Ks,是基本关系 S 的主码。如果 F 与 Ks,相对应，则称 F 是 R 的外码(foreign key),并称基本关系 R 为参照关系(referencing relation),基本关系 S 为被参照关系(referenced relation)或目标关系(target relation)。关系 R 和 S 不一定是不同的关系。 { 多个表联结后的表除了主码以外引用其他表的主码都是外码, 包括自联结 }<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241353492.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n<li><strong><code>用户定义的完整性</code></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实体完整性和参照完整性是关系模型必须满足的完整性约束条件，被称作是关系的两个不变性，应该由关系系统自动支持。用户定义的完整性是应用领域需要遵循的约束条件，体现了具体领域中的语义约束。</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>关系代数</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241359953.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241405541.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li>并、差、笛卡儿积、选择和投影这 5 种运算为基本的运算。其他三种运算，即交、连接和除，均可以用这 5 种基本运算来表达。这些运算经有限次复合后形成的表达式称为关系代数表达式。</li>\n<details>\n<summary><strong><code>基本概念</code></strong></summary>\n<ul>\n<li>(1)设关系模式为 R(A1,A2,…,An),它的一个关系设为 R。t∈R 表示 t 是 R 的一个元组。t[Ai]则表示元组 t 中相应于属性 Ai 的一个分量。<br>\n(2)若 A={Ai1,Ai2,…,Aik}, 其中 Ai1,Ai2,…,Aik 是 A1,A2,…,An,中的一部分，则 A 称为属性列或属性组。t[A]=(t[Ai1],t[Ai2],…,t[Aik])表示元组 t 在属性列 A 上诸分量的集合,<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.858ex\" height=\"3.009ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -1150.1 800 1295.7\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">\\overline{A}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-AF\" d=\"M69 544V590H430V544H69Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"24\" y=\"0\"></use>\n<g transform=\"translate(0,533)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-AF\" x=\"-70\" y=\"0\"></use>\n<g transform=\"translate(209.06654848801062,0) scale(0.940075563880908,1)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-AF\"></use>\n</g>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-AF\" x=\"630\" y=\"0\"></use>\n</g>\n</g>\n</svg>则表示{A1,A2,…,An}中去掉{Ai1,Ai2,…,Aik}后剩余的属性组。<br>\n(3)R 为 n 目关系，S 为 m 目关系.<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.813ex\" height=\"2.343ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -719.6 780.8 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">t_r</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-72\" x=\"511\" y=\"-213\"></use>\n</g>\n</svg>∈R,<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.843ex\" height=\"2.343ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -719.6 793.5 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">t_s</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-73\" x=\"511\" y=\"-213\"></use>\n</g>\n</svg>∈S,<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.656ex\" height=\"3.843ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -1365.4 1574.2 1654.5\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">\\overset{\\LARGE{\\frown}}{t_{r}t_{s}}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2322\" d=\"M55 141Q55 149 72 174T125 234T209 303T329 360T478 388H526Q649 383 765 319Q814 291 858 250T923 179T944 141Q944 133 938 128T924 122Q914 124 912 125T902 139Q766 328 500 328Q415 328 342 308T225 258T150 199T102 148T84 124Q81 122 75 122Q55 127 55 141Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-72\" x=\"511\" y=\"-213\"></use>\n<g transform=\"translate(780,0)\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-73\" x=\"511\" y=\"-213\"></use>\n</g>\n <use transform=\"scale(1.223)\" xlink:href=\"#E1-MJMAIN-2322\" x=\"143\" y=\"555\"></use>\n</g>\n</svg>称为元组的连接(concatenation)或元组的串接。它是一个 n+m 列的元组，前 n 个分量为 R 中的一个 n 元组，后 m 个分量为 S 中的一个 m 元组。<br>\n(4)给定一个关系 R(X,Z),X 和 Z 为属性组。当 t[X]=x 时，x 在 R 中的象集(images set)定义为<br>\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25.339ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 10909.7 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">Z_x={t[Z]|t∈R,t[X]=x}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-5A\" d=\"M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-52\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-58\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-5A\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-78\" x=\"966\" y=\"-213\"></use>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"1466\" y=\"0\"></use>\n<g transform=\"translate(2522,0)\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-5B\" x=\"361\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-5A\" x=\"640\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-5D\" x=\"1363\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-7C\" x=\"1642\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1920\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2208\" x=\"2559\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-52\" x=\"3505\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"4264\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"4709\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-5B\" x=\"5071\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-58\" x=\"5349\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-5D\" x=\"6202\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"6758\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-78\" x=\"7814\" y=\"0\"></use>\n</g>\n</g>\n</svg> 它表示 R 中属性组 X 上值为 x 的诸元组在 Z 上分量的集合。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>选择(selection)</code></strong></summary>\n<ul>\n<li>选择又称为限制(restriction)。它是在关系 R 中选择满足给定条件的诸元组，记作<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241513093.png\" alt=\"\" loading=\"lazy\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241514270.png\" alt=\"\" loading=\"lazy\"><br>\nF 表示选择条件.</li>\n</details>\n</li>\n<details>\n<summary><strong><code>投影(projection)</code></strong></summary>\n<ul>\n<li>关系 R 上的投影是从 R 中选择出若干属性列组成新的关系。记作<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241515155.png\" alt=\"\" loading=\"lazy\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241516419.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>连接(join)</code></strong></summary>\n<ul>\n<details>\n<summary>连接也称为 θ 连接。它是从两个关系的笛卡儿积中选取属性间满足一定条件的元组。记作:<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241517365.png\" alt=\"\" loading=\"lazy\"><br>\nA 和 B 分别为 R 和 S 上列数相等且可比的属性组，θ 是比较运算符。连接运算从 R 和 S 的笛卡儿积 R×S 中选取 R 关系在 A 属性组上的值与 S 关系在 B 属性组上的值满足比较关系 θ 的元组。<br>\n连接运算中有两种最为重要也最为常用的连接，一种是等值连接(equijoin),另一种是自然连接(naturaljoin)。</summary>\n<ul>\n<li><strong><code>等值连接</code></strong><br>\nθ 为“=”的连接运算称为等值连接。它是从关系<code>R与S的广义笛卡儿积中选取A、B属性值相等的那些元组</code>，即等值连接为<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241521721.png\" alt=\"\" loading=\"lazy\"></li>\n<li><strong><code>自然连接</code></strong><br>\n自然连接是一种特殊的等值连接。它要求两个关系中进行比较的分量必须是同名的属性组，并且在结果中把重复的属性列去掉。即若 R 和 S 中具有相同的属性组 B,U 为 R 和 S 的全体属性集合，则自然连接可记作<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241523117.png\" alt=\"\" loading=\"lazy\"><br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241529903.png\" alt=\"\" loading=\"lazy\"><br>\n关系 R 中某些元组有可能在 S 中不存在公共属性上值相等的元组，从而造成 R 中这些元组在操作时被舍弃了，同样，S 中某些元组也可能被舍弃。这些被舍弃的元组称为悬浮元组(dangling tuple).<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241532130.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>除运算(division)</code></strong></summary>\n<ul>\n<li>设关系 R 除以关系 S 的结果为关系 T,则 T 包含所有在 R 但不在 S 中的属性及其值，且 T 的元组与 S 的元组的所有组合都在 R 中。<br>\n给定关系 R(X,Y)和 S(Y,Z),其中 X、Y、Z 为属性组。R 中的 Y 与 S 中的 Y 可以有不同的属性名，但必须出自相同的域集。<br>\nR 与 S 的除运算得到一个新的关系 P(X),P 是 R 中满足下列条件的元组在 X 属性列上的投影：元组在 X 上分量值 x 的象集 Y,包含 S 在 Y 上投影的集合。记作<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241615869.png\" alt=\"\" loading=\"lazy\"><br>\nYx 为 x 在 R 中的象集，<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.865ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 3816.8 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">x=t_{r}[x]</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-78\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-78\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"850\" y=\"0\"></use>\n<g transform=\"translate(1906,0)\">\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-72\" x=\"511\" y=\"-213\"></use>\n</g>\n <use xlink:href=\"#E1-MJMAIN-5B\" x=\"2687\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-78\" x=\"2965\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-5D\" x=\"3538\" y=\"0\"></use>\n</g>\n</svg>。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241750240.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>关系演算</code></strong></summary>\n<ul>\n<li>关系演算是以数理逻辑中的谓词演算为基础的。按谓词变元的不同，关系演算可分为<code>元组关系演算和域关系演算</code>。</li>\n<details>\n<summary><code>元组关系演算语言ALPHA</code></summary>\n<ul>\n<li>元组关系演算以元组变量作为谓词变元的基本对象。<br>\nALPHA 语言主要有 GET、PUT、HOLD、UPDATE、DELETE、DROP 6 条语句，语句的基本格式为<br>\n操作语句 工作空间名 (表达式):操作条件<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241805617.png\" alt=\"\" loading=\"lazy\"><br>\n在元组关系演算系统中，称{t | φ(t)}为元组演算表达式。表示了使 φ(t)为真的元组集合。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305241801921.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n<details>\n<summary><code>域关系演算语言QBE</code></summary>\n<ul>\n<li>域关系演算以元组变量的分量(即域变量)作为谓词变元的基本对象. QBE 是 Query By Example(即通过例子进行查询)的简称，它最突出的特点是操作方式。它是一种高度非过程化的基于屏幕表格的查询语言，用户通过终端屏幕编辑程序，以填写表格的方式构造查询要求，而查询结果也是以表格形式显示.</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><h2 id=\"关系数据库标准语言-sql\">关系数据库标准语言 SQL<a title=\"#关系数据库标准语言-sql\" href=\"#关系数据库标准语言-sql\"></a></h2>\n<div class=\"φbu φbx\">\n<details>\n<summary><strong><code>SQL</code></strong></summary>\n<ul>\n<li>结构化查询语言(Structured Query Language,SQL)是关系数据库的标准语言，也是一个通用的、功能极强的关系数据库语言。其功能不仅仅是查询，而是包括数据库模式创建、数据库数据的插入与修改、数据库安全性完整性定义与控制等一系列功能。</li>\n<li>SQL 是在 1974 年由 Boyce 和 Chamberlin 提出的，最初叫 Sequel,并在 IBM 公司研制的关系数据库管理系统原型 System R 上实现。</li>\n<li>SQL 集<code>数据查询(data query)、数据操纵(data manipulation)、数据定义(data definition)和数据控制(data control)</code>功能于一体.</li>\n<li>支持 SQL 的关系数据库管理系统同样支持关系数据库三级模式结构其中外模式包括若干视图(view)和部分基本表(base table),数据库模式包括若干基本表，内模式包括若干存储文件(stored file)。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305251104637.png\" alt=\"\" loading=\"lazy\"></li>\n<details>\n<summary><strong><code>SQL 特点</code></strong></summary>\n<ul>\n<details>\n<summary><code>综合统一</code></summary>\n<ul>\n<li>非关系模型(层次模型、网状模型)的数据语言一般都分为：<br>\n(1)模式数据定义语言(Schema Data Definition Language,模式 DDL)。<br>\n(2)外模式数据定义语言(Subschema Data Definition Language,外模式 DDL 或子模式 DDL)。<br>\n(3)数据存储有关的描述语言(Data Storage Description Language, DSDL)。<br>\n(4)数据操纵语言(Data Manipulation Language,DML)。<br>\n它们分别用于定义模式、外模式、内模式和进行数据的存取与处置。当用户数据库投入运行后，如果需要修改模式，必须停止现有数据库的运行，转储数据，修改模式并编译后再重装数据库.</li>\n<li>SQL 集数据定义语言、数据操纵语言、数据控制语言的功能于一体，语言风格统一，可以独立完成数据库生命周期中的全部活动.<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305251103391.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n<details>\n<summary><code>高度非过程化</code></summary>\n<ul>\n<li>非关系数据模型的数据操纵语言是“面向过程”的语言，用“过程化”语言完成某项请求必须指定存取路径。而用 SQL 进行数据操作时，只要提出“做什么&quot;,而无须指明“怎么做&quot;,因此无须了解存取路径。<code>存取路径的选择以及SQL的操作过程由系统自动完成</code>。这不但大大减轻了用户负担，而且有利于提高数据独立性。</li>\n</details>\n</li>\n<li><code>面向集合的操作方式</code></li>\n<details>\n<summary><code>以同一种语法结构提供多种使用方式</code></summary>\n<ul>\n<li>SQL 既是独立的语言，又是嵌入式语言。作为独立的语言，它能够独立地用于联机交互的使用方式，用户可以在终端键盘上直接键入 SQL 命令对数据库进行操作；作为嵌入式语言，SQL 语句能够嵌入到高级语言(例如 C、C++、Java)程序中，供程序员设计程序时使用。而在两种不同的使用方式下，SQL 的语法结构基本上是一致的。</li>\n</details>\n</li>\n<li><code>语言简洁，易学易用</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据定义</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305251116883.png\" alt=\"\" loading=\"lazy\"><br>\n一个关系数据库管理系统的实例(instance)中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。</li>\n<details>\n<summary><strong><code>模式</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA<span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span><span class=\"keyword\">AUTHORIZATION</span><span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- CREATE SCHEMA&quot;S-T&quot;AUTHORIZATION WANG;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> SCHEMA<span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span><span class=\"keyword\">AUTHORIZATION</span><span class=\"operator\">&lt;</span>用户名<span class=\"operator\">&gt;</span>[<span class=\"operator\">&lt;</span>表定义子句<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>视图定义子句<span class=\"operator\">&lt;</span>授权定义子句<span class=\"operator\">&gt;</span>];</span><br><span class=\"line\"><span class=\"comment\">--   CREATE SCHEMA TEST AUTHORIZATION ZHANG      -- 创建模式同时创建表</span></span><br><span class=\"line\"><span class=\"comment\">--   CREATE TABLE TABI(COL1 SMALLINT,</span></span><br><span class=\"line\"><span class=\"comment\">--                     COL2 INT,</span></span><br><span class=\"line\"><span class=\"comment\">--                     COL3 CHAR(20),</span></span><br><span class=\"line\"><span class=\"comment\">--                     COL4 NUMERIC(10.3).</span></span><br><span class=\"line\"><span class=\"comment\">--                     COL5 DECIMAL(5,2)</span></span><br><span class=\"line\"><span class=\"comment\">--                     );</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> SCHEMA<span class=\"operator\">&lt;</span>模式名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>CASCADE<span class=\"operator\">|</span>RESTRICT<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\nCASCADE(级联),表示在删除模式的同时把该模式中所有的数据库对象全部删除；选择了 RESTRICT(限制),表示如果该模式中已经定义了下属的数据库对象(如表、视图等),则拒绝该删除语句的执行。只有当该模式中没有任何下属的对象时才能执行 DROP SCHEMA 语句。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>表</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>(<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[列级完整性约束条件]</span><br><span class=\"line\">                  [,<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[列级完整性约束条件]]</span><br><span class=\"line\">                  ...</span><br><span class=\"line\">                  [,<span class=\"operator\">&lt;</span>表级完整性约束条件<span class=\"operator\">&gt;</span>]);</span><br><span class=\"line\"><span class=\"comment\">-- CREATE TABLE&quot;S-T&quot;.Student(…); /*Student所属的模式是S-T*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">ADD</span> [<span class=\"keyword\">COLUMN</span>]<span class=\"operator\">&lt;</span>新列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>[完整性约束]]</span><br><span class=\"line\">[<span class=\"keyword\">ADD</span><span class=\"operator\">&lt;</span>表级完整性约束<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span>[<span class=\"keyword\">COLUMN</span>]<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[CASCADE<span class=\"operator\">|</span> RESTRICT]]</span><br><span class=\"line\">[<span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span><span class=\"operator\">&lt;</span>完整性约束名<span class=\"operator\">&gt;</span>[RESTRICT<span class=\"operator\">|</span>CASCADE ]]</span><br><span class=\"line\">[<span class=\"keyword\">ALTER</span> <span class=\"keyword\">COLUMN</span><span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span>];</span><br><span class=\"line\"><span class=\"comment\">-- DROP CONSTRAINT子句用于删除指定的完整性约束条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>[RESTRICT<span class=\"operator\">|</span>CASCADE];</span><br><span class=\"line\"><span class=\"comment\">-- 若选择RESTRICT,则该表的删除是有限制条件的。欲删除的基本表不能被其他表的约束所引用(如CHECK,FOREIGN KEY等约束),不能有视图，不能有触发器(trigger),不能有存储过程或函数等。如果存在这些依赖该表的对象，则此表不能被删除。</span></span><br><span class=\"line\"><span class=\"comment\">--若选择CASCADE,则该表的删除没有限制条件。在删除基本表的同时，相关的依赖对象，例如视图，都将被一起删除。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>当用户创建基本表(其他数据库对象也一样)时若没有指定模式，系统根据搜索路径(search path)来确定该对象所属的模式。搜索路径包含一组模式列表，关系数据库管理系统会使用模式列表中第一个存在的模式作为数据库对象的模式名。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>数据类型</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281054270.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>数据字典</code></strong></summary>\n<ul>\n<li>数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息，包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。关系数据库管理系统在执行 SQL 的数据定义语句时，实际上就是在更新数据字典表中的相应信息。</li>\n<li>{数据库存储用户数据, 数据字典存储定义数据库的数据}</li>\n</details>\n</li>\n<details>\n<summary><strong><code>索引</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span>][CLUSTER] INDEX<span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>(<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[<span class=\"operator\">&lt;</span>次序<span class=\"operator\">&gt;</span>],<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[<span class=\"operator\">&lt;</span>次序<span class=\"operator\">&gt;</span>]]…);</span><br><span class=\"line\"><span class=\"comment\">-- UNIQUE 表明此索引的每一个索引值只对应唯一的数据记录。CLUSTER 表示要建立的索引是聚簇索引。</span></span><br><span class=\"line\"><span class=\"comment\">-- 用&lt;次序&gt;指定索引值的排列次序，可选 ASC(升序)或 DESC(降序),默认值为 ASC。</span></span><br><span class=\"line\"><span class=\"comment\">-- CREATE UNIQUE INDEX SCno ON SC(Sno ASC,Cno DESC);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> INDEX<span class=\"operator\">&lt;</span>旧索引名<span class=\"operator\">&gt;</span> RENAME <span class=\"keyword\">TO</span> <span class=\"operator\">&lt;</span>新索引名<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX<span class=\"operator\">&lt;</span>索引名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>建立索引是加快查询速度的有效手段。能快速定位到需要查询的内容。</li>\n<li>数据库索引有多种类型，常见索引包括<code>顺序文件上的索引、B+树索引、散列(hash)索引、位图索引</code>等。</li>\n<li>索引虽然能够加速数据库查询，但需要占用一定的存储空间，当基本表更新时，索引要进行相应的维护，这些都会增加数据库的负担，因此要根据实际应用的需要有选择地创建索引。目前SQL标准中没有涉及索引，但商用关系数据库管理系统一般都支持索引机制，只是不同的关系数据库管理系统支持的索引类型不尽相同。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据查询</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SELECT语句的一般格式：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span><span class=\"operator\">/</span><span class=\"keyword\">DISTINCT</span>]<span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>[别名][,<span class=\"operator\">&lt;</span>目标列表达式<span class=\"operator\">&gt;</span>[别名]]…</span><br><span class=\"line\"><span class=\"keyword\">FROM</span><span class=\"operator\">&lt;</span>表名或视图名<span class=\"operator\">&gt;</span>[别名][,<span class=\"operator\">&lt;</span>表名或视图名<span class=\"operator\">&gt;</span>[别名]]…<span class=\"operator\">|</span>(<span class=\"operator\">&lt;</span><span class=\"keyword\">SELECT</span>语句<span class=\"operator\">&gt;</span>)[<span class=\"keyword\">AS</span>]<span class=\"operator\">&lt;</span>别名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span><span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span><span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">HAVING</span><span class=\"operator\">&lt;</span>条件表达式<span class=\"operator\">&gt;</span>]]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span><span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>[<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>]];</span><br></pre></td></tr></table></figure>\n<ul>\n<details>\n<summary>more</summary>\n<ul>\n<li><a href=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281552919.png\" target=\"_blank\"></a></li>\n</details>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>单表查询</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Cno,Ccredit</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Course</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Cname <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;DB\\_Des_gn%&#x27;</span> <span class=\"keyword\">ESCAPE</span><span class=\"string\">&#x27;\\&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- ESCAPE&#x27;\\&#x27;表示&#x27;\\&#x27;为换码字符。这样匹配串中紧跟在\\后面的字符“_”不再具有通配符的含义，转义为普通的“_”字符。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span><span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Sdept,Sage <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 用ORDER BY子句对查询结果按照一个或多个属性列的升序(ASC)或降序(DESC)排列，默认值为升序。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 聚集函数</span></span><br><span class=\"line\"><span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>)                       <span class=\"comment\">-- 统计元组个数</span></span><br><span class=\"line\"><span class=\"built_in\">COUNT</span>([DISTINCTIALL]<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>)     <span class=\"comment\">-- 统计一列中值的个数</span></span><br><span class=\"line\"><span class=\"built_in\">SUM</span>([<span class=\"keyword\">DISTINCT</span>]<span class=\"keyword\">ALL</span>)<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"><span class=\"built_in\">AVG</span>([<span class=\"keyword\">DISTINCT</span>]<span class=\"keyword\">ALL</span>)<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"><span class=\"built_in\">MAX</span>([<span class=\"keyword\">DISTINCT</span><span class=\"operator\">|</span><span class=\"keyword\">ALL</span>]<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"><span class=\"built_in\">MIN</span>([<span class=\"keyword\">DISTINCT</span>]<span class=\"keyword\">ALL</span>)<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- GROUP BY 分组</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Sno</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>)<span class=\"operator\">&gt;</span><span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281425755.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>连接查询</code></strong></summary>\n<ul>\n<details>\n<summary><strong><code>等值与非等值连接查询</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 连接查询的WHERE子句中用来连接两个表的条件称为连接条件或连接谓词</span></span><br><span class=\"line\">[<span class=\"operator\">&lt;</span>表名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>.]<span class=\"operator\">&lt;</span>列名<span class=\"number\">1</span><span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>比较运算符<span class=\"operator\">&gt;</span>[<span class=\"operator\">&lt;</span>表名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>.]<span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"operator\">&lt;</span>表名<span class=\"number\">1</span><span class=\"operator\">&gt;</span>.]<span class=\"operator\">&lt;</span>列名I<span class=\"operator\">&gt;</span><span class=\"keyword\">BETWEEN</span> [<span class=\"operator\">&lt;</span>表名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>.]<span class=\"operator\">&lt;</span>列名<span class=\"number\">2</span><span class=\"operator\">&gt;</span><span class=\"keyword\">AND</span> [<span class=\"operator\">&lt;</span>表名<span class=\"number\">2</span><span class=\"operator\">&gt;</span>.]<span class=\"operator\">&lt;</span>列名<span class=\"number\">3</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"comment\">-- 当连接运算符为=时，称为等值连接。使用其他运算符称为非等值连接。</span></span><br><span class=\"line\"><span class=\"comment\">-- 连接谓词中的列名称为连接字段。连接条件中的各连接字段类型必须是可比的，但名字不必相同。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Student.<span class=\"operator\">*</span>,SC.<span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student,SC</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Student.Sno<span class=\"operator\">=</span>SC.Sno;</span><br></pre></td></tr></table></figure>\n</li>\n<li>若在等值连接中把目标列中重复的属性列去掉则为<code>自然连接</code>。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>自身连接</code></strong></summary>\n<ul>\n<li>连接操作不仅可以在两个表之间进行，也可以是一个表与其自己进行连接，称为表的自身连接。</li>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> FIRST.Cno,SECOND.Cpno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Course <span class=\"keyword\">AS</span> <span class=\"keyword\">FIRST</span>,Course <span class=\"keyword\">AS</span> <span class=\"keyword\">SECOND</span>  <span class=\"comment\">-- AS 可无， 为表取别名以区分</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> FIRST.Cpno <span class=\"operator\">=</span> SECOND.Cno;</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>外连接</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student <span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> SC <span class=\"keyword\">ON</span> (Student.Sno<span class=\"operator\">=</span>SC.Sno);</span><br><span class=\"line\"><span class=\"comment\">-- 左外连接列出左边关系(如本例Student)中所有的元组，右外连接列出右边关系中所有的元组。</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>多表连接</code></strong></summary>\n<ul>\n<li>两个以上的表进行连接<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Student.Sno,Sname,Cname,Grade</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student,SC,Course</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Student.Sno<span class=\"operator\">=</span>SC.Sno <span class=\"keyword\">AND</span> SC.Cno<span class=\"operator\">=</span>Course.Cno;</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>集合查询</code></strong></summary>\n<ul>\n<li>SELECT 语句的查询结果是元组的集合，所以多个 SELECT 语句的结果可进行集合操作。集合操作主要包括<code>并操作UNION、交操作INTERSECT和差操作EXCEPT</code>。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept<span class=\"operator\">=</span><span class=\"string\">&#x27;CS&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sage<span class=\"operator\">&lt;=</span><span class=\"number\">19</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>基于派生表的查询</code></strong></summary>\n<ul>\n<li>子查询不仅可以出现在 WHERE 子句中，还可以出现在 FROM 子句中，这时子查询生成的临时<code>派生表(derived table)成为主查询的查询对象</code><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno,Cno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC,(<span class=\"keyword\">SELECT</span> Sno,<span class=\"built_in\">Avg</span>(Grade) <span class=\"keyword\">FROM</span> SC <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Sno)</span><br><span class=\"line\">        <span class=\"keyword\">AS</span> Avg_sc(avg_sno,avg_grade)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SC.Sno<span class=\"operator\">=</span>Avg_sc.avg_sno <span class=\"keyword\">and</span> SC.Grade<span class=\"operator\">&gt;=</span>Avg_sc.avg_grade;      </span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>嵌套查询</code></strong></summary>\n<ul>\n<li>一个 SELECT-FROM-WHERE 语句称为一个查询块。将一个查询块嵌套在另一个查询块的 WHERE 子句或 HAVING 短语的条件中的查询称为嵌 套查询(nested query)。上层的查询块称为外层查询或父查询，下层查询块称为内层查询或子查询。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sname</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sno <span class=\"keyword\">IN</span></span><br><span class=\"line\">          (<span class=\"keyword\">SELECT</span> Sno</span><br><span class=\"line\">          <span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\">          <span class=\"keyword\">WHERE</span> Cno<span class=\"operator\">=</span><span class=\"string\">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<details>\n<summary><strong><code>带有IN谓词的子查询</code></strong></summary>\n<ul>\n<li>在嵌套查询中，<code>子查询的结果往往是一个集合</code>，所以谓词 IN 是嵌套查询中最经常使用的谓词。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno,Sname,Sdept</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept <span class=\"keyword\">IN</span></span><br><span class=\"line\">            (<span class=\"keyword\">SELECT</span> Sdept</span><br><span class=\"line\">            <span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\">            <span class=\"keyword\">WHERE</span> Sname<span class=\"operator\">=</span><span class=\"string\">&#x27;刘晨&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 子查询的查询条件不依赖于父查询，称为不相关子查询。</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>带有比较运算符的子查询</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno,Cno</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC x</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Grade<span class=\"operator\">&gt;=</span>(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(Grade)</span><br><span class=\"line\">              <span class=\"keyword\">FROM</span> SC y</span><br><span class=\"line\">              <span class=\"keyword\">WHERE</span> y.Sno<span class=\"operator\">=</span>x.Sno);</span><br><span class=\"line\"><span class=\"comment\">-- 如果子查询的查询条件依赖于父查询，这类子查询称为相关子查询(correlated subquery),整个查询语句称为相关嵌套查询(correlated nested query)语句。</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>带有ANY(SOME)或ALL谓词的子查询 </code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sname,Sage</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sage<span class=\"operator\">&lt;</span><span class=\"keyword\">ANY</span> (<span class=\"keyword\">SELECT</span> Sage</span><br><span class=\"line\">                <span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\">                <span class=\"keyword\">WHERE</span> Sdept<span class=\"operator\">=</span><span class=\"string\">&#x27;CS&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">AND</span> Sdept<span class=\"operator\">&lt;&gt;</span><span class=\"string\">&#x27;CS&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281530805.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>带有EXISTS谓词的子查询</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Sname</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">      (<span class=\"keyword\">SELECT</span><span class=\"operator\">*</span></span><br><span class=\"line\">      <span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\">      <span class=\"keyword\">WHERE</span> Sno<span class=\"operator\">=</span>StudentSnO <span class=\"keyword\">AND</span> Cno<span class=\"operator\">=</span><span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Sname</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span></span><br><span class=\"line\">          (<span class=\"keyword\">SELECT</span><span class=\"operator\">*</span></span><br><span class=\"line\">          <span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\">          <span class=\"keyword\">WHERE</span> Sno<span class=\"operator\">=</span>Student.Sno <span class=\"keyword\">AND</span> Cno<span class=\"operator\">=</span><span class=\"string\">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>一些带 EXISTS 或 NOT EXISTS 谓词的子查询不能被其他形式的子查询等价替换，但所有带 IN 谓词、比较运算符、ANY 和 ALL 谓词的子查询都能用带 EXISTS 谓词的子查询等价替换。</li>\n<li>SQL 中没有全称量词(for all),但是可以把带有全称量词的谓词转换为等价的带有存在量词的谓词：<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281538725.png\" alt=\"\" loading=\"lazy\"></li>\n<li>SQL 语言中没有蕴涵(implication)逻辑运算，但是可以利用谓词演算将一个逻辑蕴涵的谓词等价转换为<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281539746.png\" alt=\"\" loading=\"lazy\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据更新</code></strong></summary>\n<ul>\n<details>\n<summary><strong><code>插入数据</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入一个元组，</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">INTO</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>[(<span class=\"operator\">&lt;</span>属性列<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>属性列<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]…)]</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"operator\">&lt;</span>常量<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>常量<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]…);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">INTO</span> Student (Sno,Sname,Ssex,Sdept,Sage)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;201215128&#x27;</span>,<span class=\"string\">&#x27;陈冬&#x27;</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;IS&#x27;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入子查询结果</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">INTO</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>[(<span class=\"operator\">&lt;</span>属性列<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>属性列<span class=\"number\">2</span><span class=\"operator\">&gt;</span>…])</span><br><span class=\"line\">子查询；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">INTO</span> Dept_age(Sdept,Avg_age)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Sdept,<span class=\"built_in\">AVG</span>(Sage)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Sdept;</span><br><span class=\"line\"><span class=\"comment\">-- 把另一个表中查询结果插入本表</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>修改数据</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span><span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;=</span><span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span><span class=\"operator\">-</span><span class=\"operator\">&lt;</span>表达式<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span><span class=\"operator\">&lt;</span>条件<span class=\"operator\">&gt;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> SC</span><br><span class=\"line\"><span class=\"keyword\">SET</span> Grade<span class=\"operator\">=</span><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sno <span class=\"keyword\">IN</span></span><br><span class=\"line\">          (<span class=\"keyword\">SELECT</span> Sno</span><br><span class=\"line\">          <span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\">          <span class=\"keyword\">WHERE</span> Sdept<span class=\"operator\">=</span><span class=\"string\">&#x27;CS&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>删除数据</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span><span class=\"operator\">&lt;</span>条件<span class=\"operator\">&gt;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sno<span class=\"operator\">=</span><span class=\"string\">&#x27;201215128&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">-- DELETE语句的功能是从指定表中删除满足WHERE子句条件的所有元组。如果省略WHERE子句则表示删除表中全部元组，但表的定义仍在字典中。</span></span><br><span class=\"line\"><span class=\"comment\">-- 也就是说，DELETE语句删除的是表中的数据，而不是关于表的定义。</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>空值处理</code></strong></summary>\n<ul>\n<li>判断一个属性的值是否为空值，用<code>IS NULL</code>或<code>IS NOT NULL</code>来表示。</li>\n<li>属性定义(或者域定义)中有<code>NOT NULL</code>约束条件的不能取空值，加了<code>UNIQUE</code>限制的属性不能取空值，码属性不能取空值。</li>\n<li>空值与另一个值(包括另一个空值)的算术运算的结果为空值，空值与另一个值(包括另一个空值)的比较运算的结果为 <code>UNKNOWN</code>。</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>视图</code></strong></summary>\n<ul>\n<details>\n<summary><strong><code>创建视图</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span><span class=\"operator\">&lt;</span>视图名<span class=\"operator\">&gt;</span>[(<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>列名<span class=\"operator\">&gt;</span>]…)]</span><br><span class=\"line\"><span class=\"keyword\">AS</span><span class=\"operator\">&lt;</span>子查询<span class=\"operator\">&gt;</span></span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION];</span><br><span class=\"line\"><span class=\"comment\">-- WITH CHECK OPTION表示对视图进行UPDATE、INSERT和DELETE操作时要</span></span><br><span class=\"line\"><span class=\"comment\">-- 保证更新、插入或删除的行满足视图定义中的谓词条件(即子查询中的条件表达式)。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> IS_Student</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno.Sname,Sage</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Student</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Sdept<span class=\"operator\">=</span><span class=\"string\">&#x27;IS&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> OPTION;</span><br><span class=\"line\"><span class=\"comment\">-- 由于在定义IS_Student视图时加上了WITH CHECK OPTION子句，以后对该视图进行插入、修改和删除操作时，关系数据库管理系统会自动加上Sdept=&#x27;IS&#x27;的条件。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 明确定义组成视图的各个属性列名</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> S_G(Sno,Gavg)</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Sno,<span class=\"built_in\">AVG</span>(Grade)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Sno;</span><br><span class=\"line\"><span class=\"comment\">-- 带有聚集函数和GROUP BY子句的查询来定义视图，这种视图称为分组视图。</span></span><br></pre></td></tr></table></figure>\n若一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但保留了主码，则称这类视图为<code>行列子集视图</code>。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>删除视图</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span><span class=\"operator\">&lt;</span>视图名<span class=\"operator\">&gt;</span>[CASCADE];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> IS_S1 CASCADE; <span class=\"comment\">/*删除了视图IS_S1和由它导出的所有视图*/</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>查询视图</code></strong></summary>\n<ul>\n<li>像对基本表一样</li>\n<li>关系数据库管理系统执行对视图的查询时，首先进行有效性检查，检查查询中涉及的表、视图等是否存在。如果存在，则从数据字典中取出视图的定义，把<code>定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询</code>。这一转换过程称为<code>视图消解(view resolution)</code>。</li>\n<li>目前多数关系数据库系统对行列子集视图的查询均能进行正确转换。但对非行列子集视图的查询就不一定能做转换了，因此这类查询应该直接对基本表进行。</li>\n<li>定义视图并查询视图与基于派生表的查询是有区别的。视图一旦定义，其定义将永久保存在数据字典中，之后的所有查询都可以直接引用该视图。而派生表只是在语句执行时临时定义，语句执行后该定义即被删除。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>更新视图</code></strong></summary>\n<ul>\n<li>更新视图是指通过视图来插入(INSERT)、删除(DELETE)和修改(UPDATE)数据。由于视图是不实际存储数据的虚表，因此对视图的更新最终要转换为对基本表的更新。像查询视图那样，<code>对视图的更新操作也是通过视图消解，转换为对基本表的更新操作</code>。</li>\n<li>为防止用户通过视图对数据进行增加、删除、修改时，有意无意地对不属于视图范围内的基本表数据进行操作，可在定义视图时加上<code>WITH CHECK OPTION子句。这样在视图上增、删、改数据时，关系数据库管理系统会检查视图定义中的条件，若不满足条件则拒绝执行该操作</code>。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>视图的作用</code></strong></summary>\n<ul>\n<li><code>简化用户的操作</code></li>\n<li><code>使用户能以多种角度看待同一数据</code></li>\n<details>\n<summary><code>对重构数据库提供了一定程度的逻辑独立性</code></summary>\n<ul>\n<li>{重构数据库的时候可以更改模式-外模式映射,即数据库到视图的映射使得用户的外模式保持不变}</li>\n</details>\n</li>\n<li><code>对机密数据提供安全保护</code></li>\n<li><code>更清晰地表达查询</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><h2 id=\"数据库安全性\">数据库安全性<a title=\"#数据库安全性\" href=\"#数据库安全性\"></a></h2>\n<div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据库安全性概述</code></strong></summary>\n<ul>\n<li>数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。</li>\n<details>\n<summary><strong><code>数据库的不安全因素</code></strong></summary>\n<ul>\n<li>非授权用户对数据库的恶意存取和破坏</li>\n<li>数据库中重要或敏感的数据被泄露</li>\n<details>\n<summary><strong><code>安全环境的脆弱性</code></strong></summary>\n<ul>\n<li>数据库的安全性与计算机系统的安全性，包括计算机硬件、操作系统、网络系统等的安全性是紧密联系的。操作系统安全的脆弱，网络协议安全保障的不足等都会造成数据库安全性的破坏。</li>\n</details>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>安全标准简介</code></strong></summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281715103.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<li>计算机以及信息安全技术方面有一系列的安全标准，最有影响的当推<code>TCSEC和CC</code>这两个标准。</li>\n<li><code>TCSEC</code>是指<code>1985年美国国防部(Department of Defense,DoD)</code>正式颁布的《DoD 可信计算机系统评估准则》(<code>Trusted Computer System Evaluation Criteria,TCSEC或DoD85</code>)。</li>\n<li>在 TCSEC 推出后的 10 年里，不同的国家都开始启动开发建立在 TCSEC 概念上的评估准则，如欧洲的信息技术安全评估准则(Information Technology Security Evaluation Criteria,ITSEC)、加拿大的可信计算机产品评估准则(Canadian Trusted Computer Product Evaluation Criteria,CTCPEC)、美国的信息技术安全联邦标准(Federal Criteria,FC)草案等。这些准则比 TCSEC 更加灵活，适应了 IT 技术的发展。</li>\n<li>为满足全球 IT 市场上互认标准化安全评估结果的需要，<code>CTCPEC、FC、TCSEC和 ITSEC</code>的发起组织于 1993 年起开始联合行动，解决原标准中概念和技术上的差异，将各 自独立的准则集合成一组单一的、能被广泛使用的 IT 安全准则，这一行动被称为<code>通用准则(Common Criteria,CC)</code>项目。项目发起组织的代表建立了专门的委员会来开发通用准则，历经多次讨论和修订，CCV2.1 版于 1999 年被 ISO 采用为国际标准，2001 年被我国采用为国家标准。</li>\n<li>目前<code>CC已经基本取代了TCSEC</code>,成为评估信息产品安全性的主要标准。</li>\n<details>\n<summary><strong><code>TCSEC</code></strong></summary>\n<ul>\n<li>TCSEC 又称桔皮书。1991 年 4 月，美国国家计算机安全中心(National Computer Security Center,NCSC)颁布了《可信计算机系统评估准则关于可信数据库系统的解释》(<code>TCSEC/Trusted Database Interpretation,TCSEC/TDI</code>,即紫皮书),将 TCSEC 扩展到数据库管理系统。<code>TCSEC/TDI中定义了数据库管理系统的设计与实现中需满足和用以进行安全性级别评估的标准</code>，从 4 个方面来描述安全性级别划分的指标，即安全策略、责任、保证和文档。每个方面又细分为若干项。</li>\n<li>根据计算机系统对各项指标的支持情况，TCSEC/TDI 将系统划分为 4 组(division)7 个等级，依次是 D、C(Cl,C2)、B(B1,B2,B3)、A(A1),按系统可靠或可信程度逐渐增高</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281718364.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>CC</code></strong></summary>\n<ul>\n<li>CC 是在上述各评估准则及具体实践的基础上通过相互总结和互补发展而来的。和早期的评估准则相比，CC 具有结构开放、表达方式通用等特点。CC 提出了目前国际上公认的表述信息技术安全性的结构，即把对信息产品的安全要求分为安全功能要求和安全保证要求。安全功能要求用以规范产品和系统的安全行为，安全保证要求解决如何正确有效地实施这些功能。安全功能要求和安全保证要求都以&quot;类-子类-组件&quot;的结构表述，组件是安全要求的最小构件块。</li>\n<li>CC 的文本由三部分组成</li>\n<li>第一部分是简介和一般模型，介绍 CC 中的有关术语、基本概念和一般模型以及与评估有关的一些框架。</li>\n<li>第二部分是安全功能要求，列出了一系列类、子类和组件。由 11 大类、66 个子类和 135 个组件构成。</li>\n<li>第三部分是安全保证要求，列出了一系列保证类、子类和组件，包括 7 大类、26 个子类和 74 个组件。根据系统对安全保证要求的支持情况提出了评估保证级(Evaluation Assurance Level,EAL),从 EAL1 至 EAL7 共分为 7 级，按保证程度逐渐增高。</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281725563.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>数据库安全性控制</code></strong></summary>\n<ul>\n<details>\n<summary>包括<code>用户身份鉴别、多层存取控制、审计、视图和数据加密</code>等安全技术。</summary>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305281826458.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n<details>\n<summary><strong><code>用户身份鉴别</code></strong></summary>\n<ul>\n<li>用户身份鉴别是数据库管理系统提供的最外层安全保护措施。每个用户在系统中都有一个用户标识。每个用户标识由用户名(user name)和用户标识号(UID)两部分组成。UID 在系统的整个生命周期内是唯一的。系统内部记录着所有合法用户的标识，系统鉴别是指由系统提供一定的方式让用户标识自己的名字或身份。每次用户要求进入系统时，由系统进行核对，通过鉴定后才提供使用数据库管理系统的权限。</li>\n<li>常用的用户身份鉴别方法: 静态口令鉴别; 动态口令鉴别; 生物特征鉴别; 智能卡鉴别</li>\n</details>\n</li>\n<details>\n<summary><strong><code>存取控制</code></strong></summary>\n<ul>\n<li>确保只授权给有资格的用户访问数据库的权限，同时令所有未被授权的人员无法接近数据，这主要通过数据库系统的存取控制机制实现。</li>\n<li>存取控制机制主要包括<code>定义用户权限</code>和<code>合法权限检查</code>两部分。定义用户权限和合法权限检查机制一起组成了数据库管理系统的存取控制子系统。</li>\n<li>C2 级的数据库管理系统支持<code>自主存取控制</code>(Discretionary Access Control,DAC),B1 级的数据库管理系统支持<code>强制存取控制</code>(Mandatory Access Control, MAC)。</li>\n<details>\n<summary><code>自主存取控制方法DAC</code></summary>\n<ul>\n<li>用户对于不同的数据库对象有不同的存取权限，不同的用户对同一对象也有不同的权限，而且用户还可将其拥有的存取权限转授给其他用户。因此自主存取控制非常灵活。</li>\n<li>大型数据库管理系统都支持自主存取控制，SQL 标准也对自主存取控制提供支持，这主要通过 SQL 的<code>GRANT语句和REVOKE语句</code>来实现。</li>\n<li>用户权限是由两个要素组成的：数据库对象和操作类型。定义一个用户的存取权限就是要定义这个用户可以在哪些数据库对象上进行哪些类型的操作。在数据库系统中，<code>定义存取权限称为授权(authorization)</code>。</li>\n<li>在非关系系统中，用户只能对数据进行操作，存取控制的数据库对象也仅限于数据本身。在关系数据库系统中，存取控制的对象不仅有数据本身(基本表中的数据、属性列上的数据),还有数据库模式(包括数据库、基本表、视图和索引的创建等)</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305282034799.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<details>\n<summary><code>授权：授予与收回</code></summary>\n<ul>\n<li><code>GRANT</code><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span><span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">ON</span><span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>对象名<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>对象名<span class=\"operator\">&gt;</span>]</span><br><span class=\"line\"><span class=\"keyword\">TO</span><span class=\"operator\">&lt;</span>用户<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>用户<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> OPTION];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student, Course</span><br><span class=\"line\"><span class=\"keyword\">TO</span> U2,U3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">UPDATE</span>(Sno),<span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">TO</span> U4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">UPDATE</span>(Sno),<span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">TO</span> U4;</span><br></pre></td></tr></table></figure>\n</li>\n<li><code>REVOKE</code><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span><span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">ON</span><span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>对象名<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>对象名<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">FROM</span><span class=\"operator\">&lt;</span>用户<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>用户<span class=\"operator\">&gt;</span>]…[CASCADE <span class=\"operator\">|</span> RESTRICT];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> SC</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> U5 CASCADE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">UPDATE</span>(Sno)</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> U4;</span><br><span class=\"line\"><span class=\"comment\">-- CASCADE级联收回本权限的同时必须先收回此权限所有者授予的其他用户权限， 否则报错；RESTRICT自动执行级联操作.</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><code>创建数据库模式的权限</code></summary>\n<ul>\n<li>GRANT 和 REVOKE 语句向用户授予或收回对数据的操作权限。<code>对创建数据库模式一类的数据库对象的授权则由数据库管理员在创建用户时实现</code>。</li>\n</details>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"operator\">&lt;</span>usermame<span class=\"operator\">&gt;</span>[<span class=\"keyword\">WITH</span>][DBA<span class=\"operator\">|</span>RESOURCE<span class=\"operator\">|</span><span class=\"keyword\">CONNECT</span>];</span><br></pre></td></tr></table></figure>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305282056243.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n<details>\n<summary><code>数据库角色</code></summary>\n<ul>\n<li><code>数据库角色是被命名的一组与数据库操作相关的权限，角色是权限的集合</code>。因此，可以为一组具有相同权限的用户创建一个角色，使用角色来管理数据库权限可以简化授权的过程。在 SQL 中首先用 CREATE ROLE 语句创建角色，然后用 GRANT 语句给角色授权，用 REVOKE 语句收回授予角色的权限。</li>\n</details>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 角色的创建</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE<span class=\"operator\">&lt;</span>角色名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ROLE R1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 给角色授权</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span><span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">ON</span><span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span>对象名</span><br><span class=\"line\"><span class=\"keyword\">TO</span><span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">SELECT</span>,<span class=\"keyword\">UPDATE</span>,<span class=\"keyword\">INSERT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">TO</span> RI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将一个角色授予其他的角色或用户</span></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span><span class=\"operator\">&lt;</span>角色<span class=\"number\">1</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>角色<span class=\"number\">2</span><span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">TO</span><span class=\"operator\">&lt;</span>角色<span class=\"number\">3</span><span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>用户<span class=\"number\">1</span><span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> ADMIN OPTION]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> RI</span><br><span class=\"line\"><span class=\"keyword\">TO</span> 王平，张明，赵玲</span><br><span class=\"line\"><span class=\"comment\">-- 把角色授予某用户，或授予另一个角色。这样，一个角色(例如角色3)所拥</span></span><br><span class=\"line\"><span class=\"comment\">-- 有的权限就是授予它的全部角色(例如角色1和角色2)所包含的权限的总和。</span></span><br><span class=\"line\"><span class=\"comment\">-- 授予者或者是角色的创建者，或者拥有在这个角色上的ADMIN OPTION。</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果指定了WITH ADMIN OPTION子句，则获得某种权限的角色或用户还可以把这</span></span><br><span class=\"line\"><span class=\"comment\">-- 种权限再授予其他的角色。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 角色权限的收回</span></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span><span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>[,<span class=\"operator\">&lt;</span>权限<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"><span class=\"keyword\">ON</span><span class=\"operator\">&lt;</span>对象类型<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>对象名<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span><span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>[<span class=\"operator\">&lt;</span>角色<span class=\"operator\">&gt;</span>]…</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> <span class=\"keyword\">SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> R1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> R1</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 王平；</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<details>\n<summary><code>强制存取控制方法MAC</code></summary>\n<ul>\n<li>每一个数据库对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。强制存取控制因此相对比较严格。</li>\n<li>所谓强制存取控制是指系统为保证更高程度的安全性，按照 TDI/TCSEC 标准中安全策略的要求所采取的强制存取检查手段。它不是用户能直接感知或进行控制的。强制存取控制适用于那些对数据有严格而固定密级分类的部门，例如军事部门或政府部门。</li>\n<li>在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类。</li>\n<li>主体是系统中的活动实体，既包括数据库管理系统所管理的实际用户，也包括代表用户的各进程。客体是系统中的被动实体，是受主体操纵的，包括文件、基本表、索引、视图等。对于主体和客体，数据库管理系统为它们每个实例(值)指派一个敏感度标记(label)。</li>\n<li>敏感度标记被分成若干级别，例如<code>绝密(Top Secret,TS)、机密(Secret,S)、可信(Confidential,C)、公开(Public,P)</code>等。密级的次序是<code>TS&gt;=S&gt;=C&gt;=P</code>。主体的敏感度标记称为<code>许可证级别(clearance level)</code>,客体的敏感度标记称为<code>密级(classification level)</code>。强制存取控制机制就是通过<code>对比主体的敏感度标记和客体的敏感度标记</code>，最终确定主体是否能够存取客体。</li>\n<details>\n<summary><code>客体的存取规则</code></summary>\n<ul>\n<li>(1)仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体。</li>\n<li>(2)仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体。</li>\n<li>强制存取控制是对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体，只有符合密级标记要求的用户才可以操纵数据，从而提供了更高级别的安全性。较高安全性级别提供的安全保护要包含较低级别的所有保护，因此在实现强制存取控制时要首先实现自主存取控制(DAC),即自主存取控制与强制存取控制共同构成数据库管理系统的安全机制</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305282140556.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<details>\n<summary><strong><code>视图机制</code></strong></summary>\n<ul>\n<li>还可以为不同的用户定义不同的视图，把数据对象限制在一定的范围内。通过视图机制把要保密的数据对无权存取的用户隐藏起来，从而自动对数据提供一定程度的安全保护。视图机制间接地实现支持存取谓词的用户权限定义。</li>\n</details>\n</li>\n<details>\n<summary><strong><code>审计</code></strong></summary>\n<ul>\n<li>如按照 TDITCSEC 标准中安全策略的要求，审计(audit)功能就是数据库管理系统达到 C2 以上安全级别必不可少的一项指标。</li>\n<li>审计功能把用户对数据库的所有操作自动记录下来放入审计日志(audit log)中。审计员可以利用审计日志监控数据库中的各种行为，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容等。还可以通过对审计日志分析，对潜在的威胁提前采取措施加以防范。</li>\n<li>可审计事件有服务器事件、系统权限、语句事件及模式对象事件，还包括用户鉴别、自主访问控制和强制访问控事件。换句话说，它能对普通和特权用户行为、各种表操作、身份鉴别、自主和强制访问控制等操作进行审计。它既能审计成功操作，也能审计失败操作</li>\n<li>数据库安全审计系统提供了一种事后检查的安全机制。</li>\n<li><code>AUDIT</code> 语句和 <code>NOAUDI</code>T 语句<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 对指定操作开启审计</span></span><br><span class=\"line\">AUDIT <span class=\"keyword\">ALTER</span>, <span class=\"keyword\">UPDATE</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> SC;</span><br><span class=\"line\"><span class=\"comment\">-- 关闭审计</span></span><br><span class=\"line\">NOAUDIT <span class=\"keyword\">ALTER</span>,<span class=\"keyword\">UPDATE</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> SC;</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>数据加密</code></strong></summary>\n<ul>\n<details>\n<summary>加密的基本思想是根据一定的算法将原始数据——明文(plain text)变换为不可直接识别的格式——密文(cipher text),从而使得不知道解密算法的人无法获知数据的内容。数据加密主要包括<code>存储加密和传输加密</code>。</summary>\n<ul>\n<li><code>存储加密</code><br>\n对于存储加密，一般提供透明和非透明两种存储加密方式。透明存储加密是内核级加密保护方式，对用户完全透明；非透明存储加密则是通过多个加密函数实现的。<br>\n透明存储加密是数据在写到磁盘时对数据进行加密，授权用户读取数据时再对其进行解密。由于数据加密对用户透明，数据库的应用程序不需要做任何修改，只需在创建表语句中说明需加密的字段即可。数据库管理系统将自动对数据进行加、解密工作。基于数据库内核的数据存储加密、解密方法性能较好，安全完备性较高。</li>\n<li><code>传输加密</code><br>\n常用的传输加密方式如<code>链路加密</code>和<code>端到端加密</code>。其中，链路加密对传输数据在链路层进行加密，它的传输信息由报头和报文两部分组成，前者是路由选择信息，而后者是传送的数据信息。这种方式对报文和报头均加密。<br>\n相对地，端到端加密对传输数据在发送端加密，接收端解密。它只加密报文，不加密报头。与链路加密相比，它只在发送端和接收端需要密码设备，而中间节点不需要密码设备，因此它所需密码设备数量相对较少。但这种方式不加密报头，从而容易被非法监听者发现并从中获取敏感信息。</li>\n<details>\n<summary><code>SSL</code></summary>\n<ul>\n<li>一种基于基于安全套接层协议(Security Socket Layer,SSL)的数据库管理系统可信传输方案。它采用的是一种端到端的传输加密方式。在这个方案中，通信双方协商建立可信连接，一次会话采用一个密钥，传输数据在发送端加密，接收端解密，有效降低了重放攻击和恶意篡改的风险。此外，出于易用性考虑，这个方案的通信加密还对应用程序透明。它的实现思路包含以下三点。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305282202365.png\" alt=\"\" loading=\"lazy\"></li>\n<li><code>(1)确认通信双方端点的可靠性</code><br>\n数据库管理系统采用基于数字证书的服务器和客户端认证方式实现通信双方的可靠性确认。用户和服务器各自持有由知名数字证书认证书认证(Certificate Authority,CA)或企业内建 CA 颁发的数字证书，双方在进行通信时均首先向对方提供己方证书，然后使用<br>\n本地的 CA 信任列表和证书撤销列表(Certificate Revocation List,CRL)对接收到的对方证书进行验证，以确保证书的合法性和有效性，进而保证对方确系通信的目的端。</li>\n<li><code>(2)协商加密算法和密钥</code><br>\n确认双方端点的可靠性后，通信双方协商本次会话的加密算法与密钥。在这个过程中，通信双方利用公钥基础设施(Public Key Infrastructure,PKI)方式保证了服务器和客户端的协商过程通信的安全可靠。</li>\n<li><code>(3)可信数据传输</code><br>\n在加密算法和密钥协商完成后，通信双方开始进行业务数据交换。与普通通信路径不同的是，这些业务数据在被发送之前将被用某一组特定的密钥进行加密和消息摘要计算，以密文形式在网络上传输。当业务数据被接收的时候，需用相同一组特定的密钥进行解密<br>\n和摘要计算。所谓特定的密钥，是由先前通信双方磋商决定的，为且仅为双方共享，通常称之为会话密钥。第三方即使窃取传输密文，因无会话密钥也无法识别密文信息。一旦第三方对密文进行任何篡改，均将会被真实的接收方通过摘要算法识破。另外，会话密钥的生命周期仅限于本次通信，理论上每次通信所采用的会话密钥将不同，因此避免了使用固定密钥而引起的密钥存储类问题。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>其他安全性保护</code></strong> - 为满足较高安全等级数据库管理系统的安全性保护要求，在自主存取控制和强制存取控制之外，还有<code>推理控制</code>以及数据库应用中<code>隐蔽信道</code>和<code>数据隐私保护</code>等技术。</li>\n</ul>\n</div><h3 id=\"数据库完整性\">数据库完整性<a title=\"#数据库完整性\" href=\"#数据库完整性\"></a></h3>\n<div class=\"φbu φbx\">\n<details>\n<summary><strong><code>概述</code></strong></summary>\n<ul>\n<li>数据库的完整性(integrity)是指<code>数据的正确性(correctness)和相容性(compat-ability)</code>。数据的正确性是指数据是符合现实世界语义、反映当前实际状况的；数据的相容性是指数据库同一对象在不同关系表中的数据是符合逻辑的。</li>\n<li>为维护数据库的完整性，数据库管理系统必须能够实现如下功能：<code>提供定义完整性约束条件的机制；提供完整性检查的方法；进行违约处理</code>。</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>实体完整性</code></strong></summary>\n<ul>\n<li>关系模型的实体完整性在 CREATE TABLE 中用 PRIMARY KEY 定义。对单属性构成的码有两种说明方法，一种是定义为列级约束条件，另一种是定义为表级约束条件。对多个属性构成的码只有一种说明方法，即定义为表级约束条件。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\">            (Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>) <span class=\"keyword\">PRIMARY</span> KEY, <span class=\"comment\">/*在列级定义主码*/</span></span><br><span class=\"line\">            Sname <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">            Ssex <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Sage <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">            Sdept <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\">            (Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>),</span><br><span class=\"line\">            Sname <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>。</span><br><span class=\"line\">            Ssex <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Sage <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">            Sdept <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>).</span><br><span class=\"line\">            <span class=\"keyword\">PRIMARY</span> KEY(Sno); <span class=\"comment\">/*在表级定义主码*/</span></span><br><span class=\"line\">            );</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> SC</span><br><span class=\"line\">            (Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">            Cno <span class=\"type\">CHAR</span>(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">            Grade <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">            <span class=\"keyword\">PRIMARY</span> KEY (Sno,Cno) <span class=\"comment\">/*只能在表级定义主码*/</span></span><br><span class=\"line\">            );</span><br></pre></td></tr></table></figure>\n</li>\n<details>\n<summary><strong><code>实体完整性检查和违约处理</code></strong></summary>\n<ul>\n<li>每当用户程序对基本表插入一条记录或对主码列进行更新操作时,实体完整性规则自动进行检查。</li>\n<li>(1)检查主码值是否唯一，如果不唯一则拒绝插入或修改。</li>\n<li>(2)检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改。从而保证了实体完整性。</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>参照完整性</code></strong></summary>\n<ul>\n<li>关系模型的参照完整性在 CREATE TABLE 中用 FOREIGN KEY 短语定义哪些列为外码，用 REFERENCES 短语指明这些外码参照哪些表的主码。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> SC</span><br><span class=\"line\">            (Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">            Cno <span class=\"type\">CHAR</span>(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">            Grade <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">            <span class=\"keyword\">PRIMARY</span> KEY (Sno,Cno),                     <span class=\"comment\">/*在表级定义实体完整性*/</span></span><br><span class=\"line\">            <span class=\"keyword\">FOREIGN</span> KEY(Sno) <span class=\"keyword\">REFERENCES</span> Student(Sno),  <span class=\"comment\">/*在表级定义参照完整性*/</span></span><br><span class=\"line\">            <span class=\"keyword\">FOREIGN</span> KEY (Cno) <span class=\"keyword\">REFERENCES</span> Course(Cno),  <span class=\"comment\">/*在表级定义参照完整性*/</span></span><br><span class=\"line\">            );</span><br></pre></td></tr></table></figure>\n</li>\n<details>\n<summary><strong><code>参照完整性检查和违约处理</code></strong></summary>\n<ul>\n<li>参照完整性将两个表中的相应元组联系起来了。因此，对被参照表和参照表进行增、删、改操作时有可能破坏参照完整性，必须进行检查以保证这两个表的相容性。<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/2023-6/202305291759630.png\" alt=\"\" loading=\"lazy\"><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 一般地，当对参照表和被参照表的操作违反了参照完整性时，系统选用默认策略，即</span></span><br><span class=\"line\"><span class=\"comment\">-- 拒绝执行。如果想让系统采用其他策略则必须在创建参照表时显式地加以说明。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> SC</span><br><span class=\"line\">            (Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>),</span><br><span class=\"line\">            Cno <span class=\"type\">CHAR</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\">            Grade <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">            <span class=\"keyword\">PRIMARY</span> KEY(Sno,Cno),         <span class=\"comment\">/*在表级定义实体完整性，Sno、Cno都不能取空值*/</span></span><br><span class=\"line\"><span class=\"keyword\">FOREIGN</span> KEY(Sno)<span class=\"keyword\">REFERENCES</span> Student(Sno)   <span class=\"comment\">/*在表级定义参照完整性*/</span></span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> CASCADE</span><br><span class=\"line\"><span class=\"comment\">/*产当删除Student表中的元组时，级联删除SC表中相应的元组*/</span></span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE,</span><br><span class=\"line\"><span class=\"comment\">/*户当更新Student表中的sno时，级联更新SC表中相应的元组*/</span></span><br><span class=\"line\"><span class=\"keyword\">FOREIGN</span> KEY (Cno) <span class=\"keyword\">REFERENCES</span> Course(Cno)     <span class=\"comment\">/*在表级定义参照完整性*/</span></span><br><span class=\"line\">  <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">NO</span> ACTION</span><br><span class=\"line\"><span class=\"comment\">/*当删除Course表中的元组造成与SC表不一致时，拒绝删除*/</span></span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> CASCADE</span><br><span class=\"line\"><span class=\"comment\">/*当更新Course表中的cno时，级联更新SC表中相应的元组*/</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>用户定义的完整性</code></strong></summary>\n<ul>\n<li>用户定义的完整性就是针对某一具体应用的数据必须满足的语义要求。</li>\n<details>\n<summary><strong><code>用户定义完整性的检查和违约处理</code></strong></summary>\n<ul>\n<li>数据库管理系统检查, 不满足元组或属性上的约束条件的, 该操作拒绝执行.</li>\n</details>\n</li>\n<details>\n<summary><strong><code>属性上的约束条件</code></strong></summary>\n<ul>\n<li> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 不允许空值</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> SC</span><br><span class=\"line\">(Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, <span class=\"comment\">/*Sno属性不允许取空值*/</span></span><br><span class=\"line\">Cno <span class=\"type\">CHAR</span>(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, <span class=\"comment\">/*Cno属性不允许取空值*/</span></span><br><span class=\"line\">Grade <span class=\"type\">SMALLINT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, <span class=\"comment\">/*Grade属性不允许取空值*/</span></span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (Sno,Cno), <span class=\"comment\">/*在表级定义实体完整性，隐含了Sno、Cno不允</span></span><br><span class=\"line\"><span class=\"comment\">许取空值，在列级不允许取空值的定义可不写*/</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- 列值唯一</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> DEPT</span><br><span class=\"line\">(Deptno <span class=\"type\">NUMERIC</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">Dname <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>) <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,<span class=\"comment\">/*要求Dname列值唯一，且不能取空值*/</span></span><br><span class=\"line\">Location <span class=\"type\">CHAR</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY(Deptno)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- CHECK 短语指定列值 应该满足的条件</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\">(Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>) <span class=\"keyword\">PRIMARY</span> KEY,    <span class=\"comment\">/*在列级定义主码*/</span></span><br><span class=\"line\">Sname <span class=\"type\">CHAR</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,          <span class=\"comment\">/* Sname属性不允许取空值*/</span></span><br><span class=\"line\">Ssex <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>)<span class=\"keyword\">CHECK</span> (SsexIN (男，女)),       <span class=\"comment\">/*性别属性Sscx只允许取男或女*/</span></span><br><span class=\"line\">Sage <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">Sdept <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n<details>\n<summary><strong><code>元组上的约束条件</code></strong></summary>\n<ul>\n<li>同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\">(Sno <span class=\"type\">CHAR</span>(<span class=\"number\">9</span>),</span><br><span class=\"line\">Sname <span class=\"type\">CHAR</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">Ssex <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">Sage <span class=\"type\">SMALLINT</span>,</span><br><span class=\"line\">Sdept <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (Sno),</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span> (Ssex<span class=\"operator\">=</span><span class=\"string\">&#x27;女&#x27;</span> <span class=\"keyword\">OR</span> Sname <span class=\"keyword\">NOT</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Ms.%&#x27;</span>)</span><br><span class=\"line\">); <span class=\"comment\">/*定义了元组中Sname和Ssex两个属性值之间的约束条件*/</span></span><br><span class=\"line\"><span class=\"comment\">-- 性别是女性的元组都能通过该项CHECK检查，因为Ssex=&#x27;女&#x27;成立；当性别是男性时，</span></span><br><span class=\"line\"><span class=\"comment\">-- 要通过检查则名字一定不能以Ms.打头，因为Ssex=&#x27;男&#x27;时，条件要想为真值，Sname NOT</span></span><br><span class=\"line\"><span class=\"comment\">-- LIKE&#x27;Ms.%&#x27;须为真值。</span></span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>完整性约束命名子句</code></strong></summary>\n<ul>\n<li>SQL 还在 CREATE TABLE 语句中提供了完整性约束命名子句 CONSTRAINT(n.限制；限定；),用来对完整性约束条件命名，从而可以灵活地增加、删除一个完整性约束条件。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 完整性约束命名子句</span></span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span><span class=\"operator\">&lt;</span>完整性约束条件名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span>完整性约束条件<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\">  (Sno <span class=\"type\">NUMERIC</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"keyword\">CONSTRAINT</span> C1 <span class=\"keyword\">CHECK</span> (Sno <span class=\"keyword\">BETWEEN</span> <span class=\"number\">90000</span> <span class=\"keyword\">AND</span> <span class=\"number\">99999</span>),</span><br><span class=\"line\">  Sname <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">CONSTRAINT</span> C2 <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  Sage <span class=\"type\">NUMERIC</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">CONSTRAINT</span> C3 <span class=\"keyword\">CHECK</span> (Sage<span class=\"operator\">&lt;</span><span class=\"number\">30</span>),</span><br><span class=\"line\">  Ssex <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">CONSTRAINT</span> C4 <span class=\"keyword\">CHECK</span> (Ssex <span class=\"keyword\">IN</span>(男，女)),</span><br><span class=\"line\">    <span class=\"keyword\">CONSTRAINT</span> StudentKey <span class=\"keyword\">PRIMARY</span> KEY(Sno)  <span class=\"comment\">-- 主码约束(命名为StudentKey)</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"comment\">-- 修改表中的完整性限制</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> C1;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> C1 <span class=\"keyword\">CHECK</span> (Sno <span class=\"keyword\">BETWEEN</span> <span class=\"number\">900000</span> <span class=\"keyword\">AND</span> <span class=\"number\">999999</span>);</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> C3;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Student</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> C3 <span class=\"keyword\">CHECK</span>(Sage<span class=\"operator\">&lt;</span><span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>域中定义完整性</code></strong></summary>\n<ul>\n<li>域是一组具有相同数据类型的值的集合。SQL 支持域的概念，并可以用 CREATE DOMAIN 语句建立一个域以及该域应该满足的完整性约束条件，然后就可以<code>用域来定义属性</code>。这样定义的优点是，数据库中不同的属性可以来自同一个域，当域上的完整性约束条件改变时只要修改域的定义即可，而不必一一修改域上的各个属性。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 建立一个性别域GenderDomain,并对其中的限制命名。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DOMAIN GenderDomain <span class=\"type\">CHAR</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> GD <span class=\"keyword\">CHECK</span>(<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span>(男，女));</span><br><span class=\"line\"><span class=\"comment\">-- 删除域GenderDomain的限制条件GD。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DOMAIN GenderDomain</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> GD;</span><br><span class=\"line\"><span class=\"comment\">-- 在域GenderDomain上增加性别的限制条件GDD。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> DOMAIN GenderDomain</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> GDD <span class=\"keyword\">CHECK</span> (<span class=\"keyword\">VALUE</span> <span class=\"keyword\">IN</span>(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>));</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><code>断言</code></summary>\n<ul>\n<li>SQL 中可以使用数据定义语言中的 CREATE ASSERTION 语句，通过声明性断言(declarative assertions)来指定更具一般性的约束。可以定义涉及多个表或聚集操作的比较复杂的完整性约束。断言创建以后，任何对断言中所涉及关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行. <code>断言为真才会继续执行</code>.<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建断言</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION <span class=\"operator\">&lt;</span>断言名<span class=\"operator\">&gt;</span><span class=\"operator\">&lt;</span><span class=\"keyword\">CHECK</span>子句<span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 制每一门课程最多60名学生选修。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTIONASSE_SC_CNUM1</span><br><span class=\"line\"><span class=\"keyword\">CHECK</span>( <span class=\"number\">60</span><span class=\"operator\">&gt;=</span><span class=\"keyword\">ALL</span>(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"comment\">/*此断言的谓词，涉及聚集操作count*/</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SC <span class=\"comment\">/*和分组函数group by的SQL语句*/</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">by</span> cno)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除断言</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> ASSERTION<span class=\"operator\">&lt;</span>断言名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</div><div class=\"φbu φbx\">\n<details>\n<summary><strong><code>触发器</code></strong></summary>\n<ul>\n<li><code>触发器(trigger)是用户定义在关系表上的一类由事件驱动的特殊过程</code>。一旦定义，触发器将被保存在数据库服务器中。任何用户对表的增、删、改操作均由服务器自动激活相应的触发器，在关系数据库管理系统核心层进行集中的完整性控制。触发器类似于约束，但是比约束更加灵活，可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力。</li>\n<li>触发器又叫做事件一条件-动作(event-condition-action)规则.<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span><span class=\"operator\">&lt;</span>触发器名<span class=\"operator\">&gt;</span> <span class=\"comment\">/*每当触发事件发生时，该触发器被激活*/</span></span><br><span class=\"line\">&#123;BEFORE<span class=\"operator\">|</span>AFTER&#125;<span class=\"operator\">&lt;</span>触发事件<span class=\"operator\">&gt;</span><span class=\"keyword\">ON</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>  <span class=\"comment\">/*指明触发器激活的时间是在执行触发事件前或后*/</span></span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">NEW</span><span class=\"operator\">|</span><span class=\"keyword\">OLD</span> <span class=\"type\">ROW</span> <span class=\"keyword\">AS</span><span class=\"operator\">&lt;</span>变量<span class=\"operator\">&gt;</span>  <span class=\"comment\">/*REFERENCING指出引用的变量*/</span></span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> &#123;<span class=\"type\">ROW</span> <span class=\"operator\">|</span> STATEMENT&#125;   <span class=\"comment\">/*定义触发器的类型，指明动作体执行的频率*/</span></span><br><span class=\"line\">[<span class=\"keyword\">WHEN</span><span class=\"operator\">&lt;</span>触发条件<span class=\"operator\">&gt;</span>]<span class=\"operator\">&lt;</span>触发动作体<span class=\"operator\">&gt;</span>  <span class=\"comment\">/*仅当触发条件为真时才执行触发动作体*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 当对表SC的Grade属性进行修改时，若分数增加了10则将此次操作记录到另一个表SC_U(Sno、Cno、Oldgrade、Newgrade)中</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> SC_T <span class=\"comment\">/*SC_T是触发器的名字*/</span></span><br><span class=\"line\">AFTER <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">OF</span> Grade <span class=\"keyword\">ON</span> SC <span class=\"comment\">/*UPDATE OF Grade ON SC是触发事件，*/</span></span><br><span class=\"line\">                  <span class=\"comment\">/*AFTER是触发的时机，表示当对SC的Grade属性修改完后再触发下面的规则*/</span></span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span></span><br><span class=\"line\">  OLDROW <span class=\"keyword\">AS</span> OldTuple,</span><br><span class=\"line\">  NEWROW <span class=\"keyword\">AS</span> NewTuple</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"comment\">/*行级触发器，即每执行一次Grade的更新，下面的规则就执行一次*/</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> (NewTuple.Grade<span class=\"operator\">&gt;=</span><span class=\"number\">1.1</span><span class=\"operator\">*</span>OldTuple.Grade) <span class=\"comment\">/*触发条件，只有该条件为真时才执行*/</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SC_U(Sno,Cno,OldGrade,NewGrade)</span><br><span class=\"line\">  <span class=\"keyword\">VALUES</span>(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 每次对表Student的插入操作所增加的学生个数记录到表StudentInsertLog中。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> Student_Count</span><br><span class=\"line\">AFTER <span class=\"keyword\">INSERT</span> <span class=\"keyword\">ON</span> Student 指明触发器激活的时间是在执行<span class=\"keyword\">INSERT</span>后<span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span></span><br><span class=\"line\">  NEWTABLE <span class=\"keyword\">AS</span> DELTA</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> STATEMENT <span class=\"comment\">/*语句级触发器，即执行完INSERT语句后下面的触发动作体才执行一次*/</span></span><br><span class=\"line\">  <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> StudentInsertLog(Numbers)</span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>)<span class=\"keyword\">FROM</span> DELTA;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> Insert_Or_Update_Sal <span class=\"comment\">/*对教师表插入或更新时激活触发器*/</span></span><br><span class=\"line\">BEFORE <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> Teacher</span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">NEW</span> <span class=\"type\">row</span> <span class=\"keyword\">AS</span> newTuple</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>     <span class=\"comment\">/*定义触发动作体，这是一个PLSQL过程块*/</span></span><br><span class=\"line\">  IF(newtuple.Job<span class=\"operator\">=</span><span class=\"string\">&#x27;教授&#x27;</span>) <span class=\"keyword\">AND</span> (newtuple.Sal<span class=\"operator\">&lt;</span><span class=\"number\">4000</span>)  <span class=\"comment\">/*因为是行级触发器，可在过程体中*/</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> newtuple.Sal:<span class=\"operator\">=</span><span class=\"number\">4000</span>;   <span class=\"comment\">/*使用插入或更新操作后的新值*/</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除触发器</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span><span class=\"operator\">&lt;</span>触发器名<span class=\"operator\">&gt;</span><span class=\"keyword\">ON</span><span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</details>\n</li>\n</ul>\n</div><hr>\n<p><strong>参考</strong></p>\n<ol>\n<li>数据库系统概论/王珊 第五版</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/09/[SQL]%E5%BF%85%E7%9F%A5/",
            "url": "https://s1acr.github.io/2023/05/09/[SQL]%E5%BF%85%E7%9F%A5/",
            "title": "[SQL]必知",
            "date_published": "2023-05-09T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>数据库实验要学SQL, 数据库用的是<code>MySQL Community Sever 8.0.32</code>, DBMS用的<code>Navicat Premium 15.0.1</code>, Navicat只能免费试用七天. 穷学生用的<a href=\"https://www.exception.site/essay/how-to-free-use-navicat\" target=\"_blank\">破解版</a>.</p>\n</blockquote>\n<h2 id=\"认识sql\">认识SQL<a title=\"#认识sql\" href=\"#认识sql\"></a></h2>\n<p>SQL(Structured Query Language) 一种专门用来与数据库沟通的语言. 标准 SQL 由 ANSI 标准委员会管理Matirx，从而称为 ANSI SQL。所有主要的 DBMS，即使有自己的扩展，也都支持 ANSI SQL。各个实现有自己的名称，如 Oracle 的 PL/SQL、微软 SQL Server 用的 Transact-SQL 等.</p>\n<h3 id=\"一些概念\">一些概念<a title=\"#一些概念\" href=\"#一些概念\"></a></h3>\n<p><code>数据库(databases)</code> 保存有组织的数据的容器.<br>\n<code>数据库管理系统(DBMS)</code> 创建和操纵的数据库的软件.<br>\n<code>表(table)</code> 某种特定类型数据的结构化清单。<br>\n<code>模式(schema)</code> 关于数据库和表的布局及特性的信息。<br>\n<code>列(column)</code>  表中的一个字段。所有表都是由一个或多个列组成的。<br>\n<code>数据类型(datatype)</code>  允许什么类型的数据。每个表列都有相应的数据类型，它限制(或允许)该列中存储的数据。<br>\n<code>行(row)</code> 表中的一个记录(record)。<br>\n<code>主键(primary key)</code> 一列(或几列),其值能够唯一标识表中每一行。</p>\n<p><code>子句(clause)</code> SQL语句由子句构成，有些子句是必需的，有些则是可选的。一个子句通常由一个关键字加上所提供的数据组成。<br>\n<code>通配符(wildcard)</code> 用来匹配值的一部分的特殊字符。<br>\n<code>搜索模式(search pattern)</code> 由字面值、通配符或两者组合构成的搜索条件。<br>\n<code>谓词(predicate)</code> 用于提供一种搜索模式或者说判断共同特征类别的条件.<br>\n<code>字段(field)</code> 基本上与列(column)的意思相同，经常互换使用，不过数据库列一般称为列，而字段这个术语通常在计算字段这种场合下使用。<br>\n<code>拼接(concatenate)</code> 将值联结到一起(将一个值附加到另一个值)构成单个值<br>\n<code>可移植(portable)</code> 所编写的代码可以在多个系统上运行。<br>\n<code>聚集函数(aggregate function)</code> 对某些行运行的函数，计算并返回一个值。<br>\n<code>查询(query)</code> 任何 SQL 语句都是查询。但此术语一般指 SELECT 语句。<br>\n<code>子查询(subquery)</code> 即嵌套在其他查询中的查询。<br>\n<code>可伸缩(scale) </code>能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序<br>\n称为可伸缩性好(scale well)。<br>\n<code>笛卡儿积(cartesian product)</code> 由没有联结条件的表关系返回的结果为笛卡儿积。有时，返回笛卡儿积的联结，也称叉联结(cross join)<br>\n<code>事务</code>(transaction)指一组 SQL 语句；<br>\n<code>回退</code>(rollback)指撤销指定 SQL 语句的过程；<br>\n<code>提交</code>(commit)指将未存储的 SQL 语句结果写入数据库表；<br>\n<code>保留点</code>(savepoint)指事务处理中设置的临时占位符(placeholder)，可以对它发布回退(与回退整个事务处理不同)。<br>\n<code>结果集(result set) </code>SQL 查询所检索出的结果。</p>\n<h3 id=\"sql-数据类型\">SQL 数据类型<a title=\"#sql-数据类型\" href=\"#sql-数据类型\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091502513.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091502582.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091502663.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305091503676.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"检索数据\">检索数据<a title=\"#检索数据\" href=\"#检索数据\"></a></h2>\n<h3 id=\"注释\">注释<a title=\"#注释\" href=\"#注释\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  单行注释, 这种形式有些DBMS不支持</span><br><span class=\"line\"><span class=\"comment\">-- 单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"select-选择列\">SELECT 选择列<a title=\"#select-选择列\" href=\"#select-选择列\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 选择单个列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选择多个列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选择所有列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h3 id=\"distinct-限制不同数据\">DISTINCT 限制不同数据<a title=\"#distinct-限制不同数据\" href=\"#distinct-限制不同数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 返回列的所有数据, 有重复</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用DISTINC限制只返回不同的数据, 无重复</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- DISTINC 作用于所用选择的列, 返回只要存在不相同的数据 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>  vend_id, prod_price <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id, prod_price <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h3 id=\"limit-限制结果\">LIMIT 限制结果<a title=\"#limit-限制结果\" href=\"#limit-限制结果\"></a></h3>\n<p>返回指定行数的结果, 不同数据库的实现不一样.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 返回前三行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products LIMIT <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OFFSET 限制从第二行往后开始选择三行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products LIMIT <span class=\"number\">3</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 简化写法, 和上等同</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products LIMIT <span class=\"number\">2</span>,<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题\">挑战题<a title=\"#挑战题\" href=\"#挑战题\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Customers 表中检索所有的 ID(cust_id)。</li>\n<li>OrderItems 表包含了所有已订购的产品(有些已被订购多次)。编写SQL 语句，检索并列出已订购产品(prod_id)的清单(不用列每个订单，只列出不同产品的清单)。提示：最终应该显示 7 行。</li>\n<li>编写 SQL语句，检索 Customers 表中所有的列，再编写另外的 SELECT语句，仅检索顾客的 ID。使用注释，注释掉一条 SELECT 语句，以便运行另一条 SELECT 语句。(当然，要测试这两个语句。)</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> prod_id <span class=\"keyword\">FROM</span> orderitems; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"comment\">-- SELECT * FROM customers;</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> customers; </span><br></pre></td></tr></table></figure>\n<h2 id=\"排序检索数据\">排序检索数据<a title=\"#排序检索数据\" href=\"#排序检索数据\"></a></h2>\n<h3 id=\"order-by-子句\">ORDER BY 子句<a title=\"#order-by-子句\" href=\"#order-by-子句\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- ORDER BY 子句 按字典顺序从小到大</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 按多个列排序, 先按价格, 再按名称 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price, prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用列的相对位置, 2, 3 表示先按第二列, 再按第三列, 和上等同</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用 DESC (DESCENDING) 关键字 降序, 默认是 ASC (ASCENDING)升序, 可以不写</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 多个列排序, 价格降序, 名字升序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price <span class=\"keyword\">DESC</span>, prod_name <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n<p>在指定一条 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句。如果它不是最后的子句，将会出错。<br>\n通常，ORDER BY 子句中使用的列将是为显示而选择的列。但是, 实际上并不一定要这样，用非检索的列排序数据是完全法的.<br>\nDESC只作用于选择的一列, 多选得每一项都加上DESC关键字.</p>\n<h3 id=\"挑战题-1\">挑战题<a title=\"#挑战题-1\" href=\"#挑战题-1\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Customers 中检索所有的顾客名称(cust_names)，并按从 Z 到 A 的顺序显示结果。</li>\n<li>编写 SQL 语句，从 Orders 表中检索顾客 ID(cust_id)和订单号(order_num)，并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。</li>\n<li>显然，我们的虚拟商店更喜欢出售比较贵的物品，而且这类物品有很多。编写 SQL 语句，显示 OrderItems 表中的数量和价格(item_price)，并按数量由多到少、价格由高到低排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT vend_name,<br>\nFROM Vendors<br>\nORDER vend_name DESC;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, order_num, order_date <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_id, order_date <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_item, item_price <span class=\"keyword\">FROM</span> orderitems <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_item <span class=\"keyword\">DESC</span>, item_price <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. 没写BY</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"过滤数据\">过滤数据<a title=\"#过滤数据\" href=\"#过滤数据\"></a></h2>\n<p>数据库表一般包含大量的数据，很少需要检索表中的所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件(search criteria)，搜索条件也称为过滤条件(filter condition)。<br>\n在 SELECT 语句中，数据根据 WHERE 子句中指定的搜索条件进行过滤。</p>\n<h3 id=\"where-子句\">WHERE 子句<a title=\"#where-子句\" href=\"#where-子句\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305041559077.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>并非所有 DBMS 都支持这些操作符.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- WHERE子句</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">From</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">=</span> <span class=\"number\">3.49</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name , prod_price <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&lt;</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">!=</span> <span class=\"number\">3.49</span>;</span><br></pre></td></tr></table></figure>\n<p>在同时使用 ORDER BY 和 WHERE 子句时，应该让 ORDER BY 位于 WHERE 之后，否则将会产生错误.</p>\n<h3 id=\"between-and-范围值检查\">BETWEEN AND 范围值检查<a title=\"#between-and-范围值检查\" href=\"#between-and-范围值检查\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- BETWEEN AND 范围值检查</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"keyword\">BETWEEN</span> <span class=\"number\">5</span> <span class=\"keyword\">AND</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"is-null-空值检查\">IS NULL 空值检查<a title=\"#is-null-空值检查\" href=\"#is-null-空值检查\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- IS NULL 空值检查</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_email <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-2\">挑战题<a title=\"#挑战题-2\" href=\"#挑战题-2\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Products 表中检索产品 ID(prod_id)和产品名称(prod_name)，只返回价格为 9.49 美元的产品。</li>\n<li>编写 SQL 语句，从 Products 表中检索产品 ID(prod_id)和产品名称(prod_name)，只返回价格为 9 美元或更高的产品。</li>\n<li>结合第 3 课和第 4 课编写 SQL 语句，从 OrderItems 表中检索出所有不同订单号(order_num)，其中包含 100 个或更多的产品。</li>\n<li>编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称(prod_name)和价格(prod_price)，然后按价格对结果进行排序。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">=</span> <span class=\"number\">9.49</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"keyword\">BETWEEN</span> <span class=\"number\">3</span> <span class=\"keyword\">AND</span> <span class=\"number\">6</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"高级数据过滤\">高级数据过滤<a title=\"#高级数据过滤\" href=\"#高级数据过滤\"></a></h2>\n<h3 id=\"and-和-or-操作符\">AND 和 OR 操作符<a title=\"#and-和-or-操作符\" href=\"#and-和-or-操作符\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加多个过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">AND</span> prod_price <span class=\"operator\">&lt;=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 满足其中一个过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">OR</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BRS01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"in-操作符\">IN 操作符<a title=\"#in-操作符\" href=\"#in-操作符\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- IN 限定为值为数组内的数据, 也可以用OR实现</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;DLL01&#x27;</span>, <span class=\"string\">&#x27;BRS01&#x27;</span>) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br></pre></td></tr></table></figure>\n<p><code>IN对比OR的优势:</code></p>\n<ol>\n<li>在有很多合法选项时，IN 操作符的语法更清楚，更直观。</li>\n<li>在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理。</li>\n<li>IN 操作符一般比一组 OR 操作符执行得更快.</li>\n<li>IN 的最大优点是可以包含其他 SELECT 语句，能够更动态地建立WHERE 子句。</li>\n</ol>\n<h3 id=\"not-操作符\">NOT 操作符<a title=\"#not-操作符\" href=\"#not-操作符\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- NOT 否定条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">&lt;&gt;</span> <span class=\"string\">&#x27;DLL01&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br></pre></td></tr></table></figure>\n<p>在复杂的子句中，NOT 是非常有用的。例如，在与 IN 操作符联合使用时，NOT 可以非常简单地找出与条件列表不匹配的行.</p>\n<h3 id=\"挑战题-3\">挑战题<a title=\"#挑战题-3\" href=\"#挑战题-3\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Vendors 表中检索供应商名称(vend_name)，仅返回加利福尼亚州的供应商(这需要按国家[USA]和州[CA]进行过滤，没准其他国家也存在一个加利福尼亚州)。提示：过滤器需要匹配字符串。</li>\n<li>编写 SQL 语句，查找所有至少订购了总量 100 个的 BR01、BR02 或BR03 的订单。你需要返回 OrderItems 表的订单号(order_num)、产品 ID(prod_id)和数量，并按产品 ID 和数量进行过滤。提示：根据编写过滤器的方式，可能需要特别注意求值顺序</li>\n<li>现在，我们回顾上一课的挑战题。编写 SQL 语句，返回所有价格在 3美元到 6美元之间的产品的名称(prod_name)和价格(prod_price)。使用 AND，然后按价格对结果进行排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT vend_name<br>\nFROM Vendors<br>\nORDER BY vend_name<br>\nWHERE vend_country = ‘USA’ AND vend_state = ‘CA’;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name <span class=\"keyword\">FROM</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_country <span class=\"operator\">=</span> <span class=\"string\">&#x27;USA&#x27;</span> <span class=\"keyword\">AND</span> vend_state <span class=\"operator\">=</span> <span class=\"string\">&#x27;CA&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, prod_id, quantity <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> quantity <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">AND</span> prod_id <span class=\"keyword\">IN</span>(<span class=\"string\">&#x27;BR01&#x27;</span>, <span class=\"string\">&#x27;BR02&#x27;</span>, <span class=\"string\">&#x27;BR03&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> <span class=\"number\">3</span> <span class=\"keyword\">AND</span> prod_price <span class=\"operator\">&lt;=</span> <span class=\"number\">6</span>  <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. ORDER BY 应该放子句最后</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用通配符进行过滤\">使用通配符进行过滤<a title=\"#使用通配符进行过滤\" href=\"#使用通配符进行过滤\"></a></h2>\n<h3 id=\"like-操作符\">LIKE 操作符<a title=\"#like-操作符\" href=\"#like-操作符\"></a></h3>\n<h4 id=\"%通配符\"><code>%</code>通配符<a title=\"#%通配符\" href=\"#%通配符\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- &#x27;%&#x27; 通配符表示任何字符出现任意次数,包括0次, 比如匹配Fish开头</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Fish%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 模式匹配中间为 特定字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%bean bag%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 模式匹配两端为 特定字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;F%y&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"_通配符\"><code>_</code>通配符<a title=\"#_通配符\" href=\"#_通配符\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- &#x27;_&#x27; 匹配单个字符, 多少个 &#x27;_&#x27; 就匹配多少个字符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;__ inch teddy bear&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SELECT cust_contact FROM customers</span></span><br><span class=\"line\"><span class=\"comment\">-- WHERE cust_contact LIKE &#x27;[^JM]%&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">-- MySql 不支持 &#x27;[]&#x27;集合匹配</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li>\n<li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li>\n<li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据.</li>\n</ol>\n<h3 id=\"挑战题-4\">挑战题<a title=\"#挑战题-4\" href=\"#挑战题-4\"></a></h3>\n<ol>\n<li>编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回描述中包含 toy 一词的产品。</li>\n<li>反过来再来一次。编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回描述中未出现 toy 一词的产品。这次，按产品名称对结果进行排序。</li>\n<li>编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回描述中同时出现 toy 和 carrots 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 AND 和两个 LIKE 比较。</li>\n<li>来个比较棘手的。我没有特别向你展示这个语法，而是想看看你根据目前已学的知识是否可以找到答案。编写 SQL 语句，从 Products 表中检索产品名称(prod_name)和描述(prod_desc)，仅返回在描述中以先后顺序同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 % 符号的 LIKE 即可。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> prod_desc <span class=\"keyword\">Like</span> <span class=\"string\">&#x27;%toy%&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%&#x27;</span> <span class=\"keyword\">AND</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%carrots%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- or</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%carrots%&#x27;</span> <span class=\"keyword\">OR</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%carrots%toy%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_desc <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_desc <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%toy%carrots%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建计算字段\">创建计算字段<a title=\"#创建计算字段\" href=\"#创建计算字段\"></a></h2>\n<h3 id=\"拼接字段和别名\">拼接字段和别名<a title=\"#拼接字段和别名\" href=\"#拼接字段和别名\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- CONCAT 函数拼接字段, 不同数据库实现不同SQL Server使用+号。DB2、Oracle、PostgreSQL 和 SQLite 使用||</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(vend_name, <span class=\"string\">&#x27;(&#x27;</span>, vend_country, <span class=\"string\">&#x27;)&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vend_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- AS 指定别名(alias)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(vend_name, <span class=\"string\">&#x27;(&#x27;</span>, vend_country, <span class=\"string\">&#x27;)&#x27;</span>) <span class=\"keyword\">AS</span> vend_title</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vend_name;</span><br></pre></td></tr></table></figure>\n<p>别名的名字既可以是一个单词，也可以是一个字符串。<br>\n别名有时也称为导出列(derived column)。</p>\n<h3 id=\"算术计算\">算术计算<a title=\"#算术计算\" href=\"#算术计算\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 计算新列 quantity*item_price 并取别名 expanded_price</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity, item_price, quantity<span class=\"operator\">*</span>item_price <span class=\"keyword\">AS</span> expanded_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems <span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20008</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select-检验计算\">SELECT 检验计算<a title=\"#select-检验计算\" href=\"#select-检验计算\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SELECT 语句 省略了 FORM 还可以仅访问和处理表达式</span></span><br><span class=\"line\"><span class=\"comment\">-- CURDATE() 函数返回日期</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CURDATE();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- RTRIM TRIM LTRIM 函数能去除空格 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">TRIM</span>(<span class=\"string\">&#x27;   ab  c   &#x27;</span>);  <span class=\"comment\">--  &#x27;ab  c&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-5\">挑战题<a title=\"#挑战题-5\" href=\"#挑战题-5\"></a></h3>\n<ol>\n<li>别名的常见用法是在检索出的结果中重命名表的列字段(为了符合特定的报表要求或客户需求)。编写 SQL 语句，从 Vendors 表中检索vend_id、vend_name、vend_address 和 vend_city，将 vend_name重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address<br>\n重命名为 vaddress。按供应商名称对结果进行排序(可以使用原始名称或新的名称)。</li>\n<li>我们的示例商店正在进行打折促销，所有产品均降价 10%。编写 SQL语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%(即 10%的折扣)。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id <span class=\"keyword\">AS</span> vid, </span><br><span class=\"line\">vend_name <span class=\"keyword\">AS</span> vname, </span><br><span class=\"line\">vend_address <span class=\"keyword\">AS</span> vaddress, </span><br><span class=\"line\">vend_city <span class=\"keyword\">AS</span> vcity </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vname;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, </span><br><span class=\"line\">prod_price<span class=\"operator\">*</span><span class=\"number\">0.9</span> <span class=\"keyword\">AS</span> sale_price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用函数处理数据\">使用函数处理数据<a title=\"#使用函数处理数据\" href=\"#使用函数处理数据\"></a></h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052030087.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>不同数据库提供的函数各有不同, 一条SQL并不是通用的, 使用时要注意.</p>\n<p>大多数 SQL 实现支持以下类型的函数:</p>\n<ol>\n<li>用于处理文本字符串(如删除或填充值，转换值为大写或小写)的文本函数。</li>\n<li>用于在数值数据上进行算术操作(如返回绝对值，进行代数运算)的数值函数。</li>\n<li>用于处理日期和时间值并从这些值中提取特定成分(如返回两个日期之差，检查日期有效性)的日期和时间函数。</li>\n<li>用于生成美观好懂的输出内容的格式化函数(如用语言形式表达出日期，用货币符号和千分位表示金额)。</li>\n<li>返回 DBMS 正使用的特殊信息(如返回用户登录信息)的系统函数</li>\n</ol>\n<h3 id=\"文本处理函数\">文本处理函数<a title=\"#文本处理函数\" href=\"#文本处理函数\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052131024.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>SOUNDEX 是一个将任何文<br>\n本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX 考虑了使得能对字符串进行发音比较而不是字母比较。虽然 SOUNDEX 不是 SQL 概念，但多数 DBMS 都提供对 SOUNDEX 的支持.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- UPPER() </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name, <span class=\"built_in\">UPPER</span>(vend_name) <span class=\"keyword\">AS</span> vend_name_upcase <span class=\"keyword\">FROM</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> vend_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SOUNDEX(),  对发音进行匹配</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> SOUNDEX(cust_contact) <span class=\"operator\">=</span> SOUNDEX(<span class=\"string\">&#x27;Michael Green&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SUBSTR(str FROM pos FOR len)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(SUBSTR(&quot;go000ogle&quot;, <span class=\"number\">1</span>, <span class=\"number\">2</span>), SUBSTR(&quot;go000ogle&quot;, <span class=\"number\">6</span>, <span class=\"number\">4</span>)) <span class=\"keyword\">AS</span> correct;</span><br><span class=\"line\"><span class=\"comment\">-- 这个函数下标从 1 开始左闭合取子串真的反常识, 第一次发现一门语言下标从1开始.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"日期时间处理\">日期时间处理<a title=\"#日期时间处理\" href=\"#日期时间处理\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MySQL 中用 YEAR() 从字符串中提取年份, 不难想到还有 MONTH() DAY()...</span></span><br><span class=\"line\"><span class=\"comment\">-- 不同数据库提供了非常多而全的函数, 用的时候直接查就行了</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, order_date <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">YEAR</span>(order_date) <span class=\"operator\">=</span> <span class=\"string\">&#x27;2020&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值处理函数\">数值处理函数<a title=\"#数值处理函数\" href=\"#数值处理函数\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052141132.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 计算squareroot, e^x</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SQRT</span>(<span class=\"number\">16</span>), <span class=\"built_in\">EXP</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-6\">挑战题<a title=\"#挑战题-6\" href=\"#挑战题-6\"></a></h3>\n<ol>\n<li>我们的商店已经上线了，正在创建顾客账户。所有用户都需要登录名，默认登录名是其名称和所在城市的组合。编写 SQL 语句，返回顾客 ID(cust_id)、顾客名称(customer_name)和登录名(user_login)，其中登录名全部为大写字母，并由顾客联系人的前两个字符(cust_<br>\ncontact)和其所在城市的前三个字符(cust_city)组成。例如，我的登录名是 BEOAK(Ben Forta，居住在 Oak Park)。提示：需要使用函数、拼接和别名。</li>\n<li>编写 SQL 语句，返回 2020 年 1 月的所有订单的订单号(order_num)和订单日期(order_date)，并按订单日期排序。你应该能够根据目前已学的知识来解决此问题，但也可以开卷查阅 DBMS 文档。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name, </span><br><span class=\"line\"><span class=\"built_in\">UPPER</span>(CONCAT(SUBSTR(cust_contact <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">2</span>), SUBSTR(cust_city <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">3</span>)))<span class=\"keyword\">AS</span> user_login  <span class=\"keyword\">FROM</span> customers; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- or</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name,</span><br><span class=\"line\">CONCAT(<span class=\"built_in\">UPPER</span>(<span class=\"keyword\">LEFT</span>(cust_contact, <span class=\"number\">2</span>)), <span class=\"built_in\">UPPER</span>(<span class=\"keyword\">LEFT</span>(cust_city, <span class=\"number\">3</span>))) <span class=\"keyword\">AS</span> user_login</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, order_date <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> <span class=\"keyword\">YEAR</span>(order_date) <span class=\"operator\">=</span> <span class=\"string\">&#x27;2020&#x27;</span> <span class=\"keyword\">AND</span> <span class=\"keyword\">MONTH</span>(order_date) <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br></pre></td></tr></table></figure>\n<h2 id=\"汇总数据\">汇总数据<a title=\"#汇总数据\" href=\"#汇总数据\"></a></h2>\n<h3 id=\"聚集函数\">聚集函数<a title=\"#聚集函数\" href=\"#聚集函数\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305052236484.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"avg()\">AVG()<a title=\"#avg()\" href=\"#avg()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 对特定行求平均</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(prod_price) <span class=\"keyword\">AS</span> avg_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>AVG()函数忽略列值为 NULL 的行。<br>\n为了获得多个列的平均值，必须使用多个 AVG()函数。只有一个例外是要从多个列计算出一个值时.</p>\n<h4 id=\"count()\">COUNT()<a title=\"#count()\" href=\"#count()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- COUNT(*) 对表中行数计算, 不论是否值为 NULL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_cust <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 对指定列统计个数, 会忽略NULL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(cust_email) <span class=\"keyword\">AS</span> num_cust <span class=\"keyword\">FROM</span> customers;</span><br></pre></td></tr></table></figure>\n<h4 id=\"max()-min()\">MAX() MIN()<a title=\"#max()-min()\" href=\"#max()-min()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(prod_price) <span class=\"keyword\">AS</span> max_price <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MIN</span>(prod_price) <span class=\"keyword\">AS</span> min_price <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<p>MIN(), MAX()函数忽略列值为 NULL 的行。<br>\nMIN()/MAX()在用于文本数据时, 返回按该列排序后的第一/最后行。</p>\n<h4 id=\"sum()\">SUM()<a title=\"#sum()\" href=\"#sum()\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">AS</span> item_ordered <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20005</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20005</span>;</span><br></pre></td></tr></table></figure>\n<p>SUM()函数忽略列值为 NULL 的行。</p>\n<h3 id=\"聚集不同的值\">聚集不同的值<a title=\"#聚集不同的值\" href=\"#聚集不同的值\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(<span class=\"keyword\">DISTINCT</span> prod_price) <span class=\"keyword\">AS</span> avg_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>ALL 参数不需要指定，因为它是默认行为。如果不指定 DISTINCT，则假定为 ALL.<br>\nDISTINCT 只能指定列名用于 COUNT(), 不能用于 COUNT(*)。DISTINCT 必须使用列名，不能用于计算或表达式。<br>\n有的 DBMS 还支持其他参数，如支持对查询结果的子集进行计算的 TOP 和 TOP PERCENT。</p>\n<h3 id=\"组合聚集函数\">组合聚集函数<a title=\"#组合聚集函数\" href=\"#组合聚集函数\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_items,</span><br><span class=\"line\"><span class=\"built_in\">MIN</span>(prod_price) <span class=\"keyword\">AS</span> price_min,</span><br><span class=\"line\"><span class=\"built_in\">MAX</span>(prod_price) <span class=\"keyword\">AS</span> price_max,</span><br><span class=\"line\"><span class=\"built_in\">AVG</span>(prod_price) <span class=\"keyword\">AS</span> price_avg <span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<p>在指定别名以包含某个聚集函数的结果时，不应该使用表中实际的列名。虽然这样做也算合法，但许多 SQL 实现不支持，可能会产生模糊的错误消息。</p>\n<h3 id=\"挑战题-7\">挑战题<a title=\"#挑战题-7\" href=\"#挑战题-7\"></a></h3>\n<ol>\n<li>编写 SQL 语句，确定已售出产品的总数(使用 OrderItems 中的quantity 列)。</li>\n<li>修改刚刚创建的语句，确定已售出产品项(prod_item)BR01 的总数。</li>\n<li>编写 SQL 语句，确定 Products 表中价格不超过 10 美元的最贵产品的价格(prod_price)。将计算所得的字段命名为 max_price。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">AS</span> total_quantity <span class=\"keyword\">FROM</span> orderitems;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(order_item) <span class=\"keyword\">AS</span> total_item_BRO1 <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(prod_price) <span class=\"keyword\">AS</span> max_price <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&lt;=</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分组数据\">分组数据<a title=\"#分组数据\" href=\"#分组数据\"></a></h2>\n<h3 id=\"创建分组\">创建分组<a title=\"#创建分组\" href=\"#创建分组\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  GROUP BY 子句分组 对每个组数据进行聚集</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_prods <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vend_id;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组</li>\n<li>如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进行汇总。</li>\n<li>GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式(但不能是聚集函数)。如果SELECT 中使用表达式，则必须在 GROUP BY子句中指定相同的表达式。不能使用别名。</li>\n<li>大多数 SQL 实现不允许 GROUP BY 列带有长度可变的数据类型(如文本或备注型字段)。</li>\n<li>除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出。</li>\n<li>如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回。如果列中有多行 NULL 值，它们将分为一组。</li>\n<li>GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前。</li>\n</ol>\n<h3 id=\"过滤分组\">过滤分组<a title=\"#过滤分组\" href=\"#过滤分组\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- HVAING 过滤分组</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> orders <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_id <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 先用WHERE过滤行, 再用HAVING 过滤分组</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_prods <span class=\"keyword\">FROM</span> products </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> <span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vend_id <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;=</span> <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>WHERE过滤行，而 HAVING 过滤分组。</li>\n<li>有关 WHERE 的所有技术和选项都适用于 HAVING.</li>\n<li>有另一种理解方法，WHERE 在数据分组前进行过滤，HAVING 在数据分组后进行过滤。WHERE 排除的行不包括在分组中。这可能会改变计算值，从而影响 HAVING 子句中基于这些值过滤掉的分组.</li>\n</ol>\n<h3 id=\"分组和排序\">分组和排序<a title=\"#分组和排序\" href=\"#分组和排序\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> items <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> items, order_num;</span><br></pre></td></tr></table></figure>\n<h4 id=\"select-子句顺序\">SELECT 子句顺序<a title=\"#select-子句顺序\" href=\"#select-子句顺序\"></a></h4>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305061303455.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"挑战题-8\">挑战题<a title=\"#挑战题-8\" href=\"#挑战题-8\"></a></h3>\n<ol>\n<li>OrderItems 表包含每个订单的每个产品。编写 SQL 语句，返回每个订单号(order_num)各有多少行数(order_lines)，并按 order_lines对结果进行排序。</li>\n<li>编写 SQL 语句，返回名为 cheapest_item 的字段，该字段包含每个供应商成本最低的产品(使用 Products 表中的 prod_price)，然后从最低成本到最高成本对结果进行排序。</li>\n<li>确定最佳顾客非常重要，请编写 SQL 语句，返回至少含 100 项的所有<br>\n订单的订单号(OrderItems 表中的 order_num)。</li>\n<li>确定最佳顾客的另一种方式是看他们花了多少钱。编写 SQL 语句，返回总价至少为 1000 的所有订单的订单号(OrderItems 表中的order_num)。提示：需要计算总和(item_price 乘以 quantity)。按订单号对结果进行排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT order_num, COUNT(<em>) AS items<br>\nFROM OrderItems<br>\nGROUP BY items<br>\nHAVING COUNT(</em>) &gt;= 3<br>\nORDER BY items, order_num;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> order_lines <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_lines;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, <span class=\"built_in\">MIN</span>(prod_price) <span class=\"keyword\">AS</span> cheapest_item <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vend_id <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cheapest_item <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">AS</span> total_quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">HAVING</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_num, <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> order_num <span class=\"keyword\">HAVING</span> total_price <span class=\"operator\">&gt;=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"comment\">-- GROUP BY clause must constains all nonaggregated column </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5. </span></span><br><span class=\"line\"><span class=\"comment\">-- GROUP BY clause must constains all nonaggregated column </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用子查询\">使用子查询<a title=\"#使用子查询\" href=\"#使用子查询\"></a></h2>\n<h3 id=\"子查询过滤\">子查询过滤<a title=\"#子查询过滤\" href=\"#子查询过滤\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span> </span><br><span class=\"line\">\t)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>作为子查询的 SELECT 语句只能查询单个列。企图检索多个列将返回错误。<br>\n使用子查询并不总是执行这类数据检索的最有效方法.</p>\n<h3 id=\"作为计算字段使用子查询\">作为计算字段使用子查询<a title=\"#作为计算字段使用子查询\" href=\"#作为计算字段使用子查询\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_state, </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orders.cust_id <span class=\"operator\">=</span> customers.cust_id) <span class=\"keyword\">AS</span> orders <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- orders 是一个计算字段，它是由圆括号中的子查询建立的。该子查询对检索出的每个顾客执行一次。</span></span><br><span class=\"line\"><span class=\"comment\">-- WHERE子句 比较Orders表中的cust_id和当前正从Customers表中检索的cust_id</span></span><br></pre></td></tr></table></figure>\n<p>SELECT 语句中操作多个表，就应使用完全限定列名来避免歧义。</p>\n<h3 id=\"挑战题-9\">挑战题<a title=\"#挑战题-9\" href=\"#挑战题-9\"></a></h3>\n<ol>\n<li>使用子查询，返回购买价格为 10 美元或以上产品的顾客列表。你需要使用 OrderItems 表查找匹配的订单号(order_num)，然后使用Order 表检索这些匹配订单的顾客 ID(cust_id)。</li>\n<li>你想知道订购 BR01 产品的日期。编写 SQL 语句，使用子查询来确定哪些订单(在 OrderItems 中)购买了 prod_id 为 BR01 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID(cust_id)和订单日期(order_date)。按订购日期对结果进行排序。</li>\n<li>现在我们让它更具挑战性。在上一个挑战题，返回购买 prod_id 为BR01 的产品的所有顾客的电子邮件(Customers 表中的 cust_email)。提示：这涉及 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id。</li>\n<li>我们需要一个顾客 ID 列表，其中包含他们已订购的总金额。编写 SQL语句，返回顾客 ID(Orders 表中的 cust_id)，并使用子查询返回total_ordered 以便返回每个顾客的订单总数。将结果按金额从大到小排序。提示：你之前已经使用 SUM()计算订单总数。</li>\n<li>再来。编写 SQL 语句，从 Products 表中检索所有的产品名称(prod_name)，以及名为 quant_sold 的计算列，其中包含所售产品的总数(在 OrderItems 表上使用子查询和 SUM(quantity)检索)。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span></span><br><span class=\"line\">\t(<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> item_price <span class=\"operator\">&gt;=</span> <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, order_date <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span></span><br><span class=\"line\"><span class=\"comment\">-- 在orderitem中拿到&#x27;BR01&#x27;的 order_num</span></span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_email <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"keyword\">IN</span>( </span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders </span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id,</span><br><span class=\"line\">       (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity <span class=\"operator\">*</span> item_price)</span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> OrderItems</span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> order_num</span><br><span class=\"line\">                            <span class=\"keyword\">FROM</span> Orders</span><br><span class=\"line\">                            <span class=\"keyword\">WHERE</span> Orders.cust_id <span class=\"operator\">=</span> Customers.cust_id)) <span class=\"keyword\">AS</span> total_ordered</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> total_ordered <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 5.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orderitems.prod_id <span class=\"operator\">=</span> products.prod_id</span><br><span class=\"line\">) <span class=\"keyword\">AS</span> quant_sold </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products;</span><br></pre></td></tr></table></figure>\n<h2 id=\"联结表\">联结表<a title=\"#联结表\" href=\"#联结表\"></a></h2>\n<h3 id=\"创建联结\">创建联结<a title=\"#创建联结\" href=\"#创建联结\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name, prod_name, prod_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors, products</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vendors.vend_id <span class=\"operator\">=</span> products.vend_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 直接这么写会得到笛卡尔积, WHERE 子句是查找过程中的过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors, products;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内联结\">内联结<a title=\"#内联结\" href=\"#内联结\"></a></h3>\n<p>等值联结(equijoin)，基于两个表之间的相等测试。这种联结也称为内联结(inner join)。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_name, prod_name, prod_price </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> products <span class=\"keyword\">ON</span> vendors.vend_id <span class=\"operator\">=</span> products.vend_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 与上面的WHERE建立联结效果相同, ANSI SQL 规范首选 INNER JOIN 语法.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"联结多个表\">联结多个表<a title=\"#联结多个表\" href=\"#联结多个表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, vend_name, prod_price, quantity </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems, products, vendors</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> products.vend_id <span class=\"operator\">=</span> vendors.vend_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> orderitems.prod_id <span class=\"operator\">=</span> products.prod_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 子查询和联结比较</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> cust_id <span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> order_num <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> order_num <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers, orders, orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-10\">挑战题<a title=\"#挑战题-10\" href=\"#挑战题-10\"></a></h3>\n<ol>\n<li>编写 SQL 语句，返回 Customers 表中的顾客名称(cust_name)和Orders 表中的相关订单号(order_num)，并 按顾客名称再按订单号对结果进行排序。实际上是尝试两次，一次使用简单的等联结语法，一次使用 INNER JOIN。</li>\n<li>我们来让上一题变得更有用些。除了返回顾客名称和订单号，添加第三列 OrderTotal，其中包含每个订单的总价。有两种方法可以执行此操作：使用 OrderItems 表的子查询来创建 OrderTotal 列，或者将 OrderItems 表与现有表联结并使用聚合函数。提示：请注意需要使用完全限定列名的地方。</li>\n<li>我们重新看一下第 11 课的挑战题 2。编写 SQL 语句，检索订购产品BR01 的日期，这一次使用联结和简单的等联结语法。输出应该与第11 课的输出相同。</li>\n<li>很有趣，我们再试一次。重新创建为第 11 课挑战题 3 编写的 SQL 语句，这次使用 ANSI 的 INNER JOIN 语法。在之前编写的代码中使用了两个嵌套的子查询。要重新创建它，需要两个 INNER JOIN 语句，每个语句的格式类似于本课讲到的 INNER JOIN 示例，而且不要忘记WHERE 子句可以通过 prod_id 进行过滤。</li>\n<li>再让事情变得更加有趣些，我们将混合使用联结、聚合函数和分组。准备好了吗？回到第 10 课，当时的挑战是要求查找值等于或大于 1000的所有订单号。这些结果很有用，但更有用的是订单数量至少达到这个数的顾客名称。因此，编写 SQL 语句，使用联结从 Customers表返回顾客名称(cust_name)，并从 OrderItems 表返回所有订单的总价。<br>\n提示：要联结这些表，还需要包括 Orders 表(因为 Customers 表与 OrderItems 表不直接相关，Customers 表与 Orders 表相关，而Orders 表与 OrderItems 表相关)。不要忘记 GROUP BY 和 HAVING，并按顾客名称对结果进行排序。你可以使用简单的等联结或 ANSI 的INNER JOIN 语法。或者，如果你很勇敢，请尝试使用两种方式编写。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num <span class=\"keyword\">FROM</span> customers, orders</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num,  </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(quantity<span class=\"operator\">*</span>item_price) <span class=\"keyword\">FROM</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> order_total <span class=\"keyword\">FROM</span> customers, orders</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 时不我待</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, orders.order_num, <span class=\"built_in\">SUM</span>(quantity<span class=\"operator\">*</span>item_price) <span class=\"keyword\">AS</span> order_total </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders, orderitems, customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id </span><br><span class=\"line\"><span class=\"keyword\">AND</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, orders.order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这里的 GROUP BY 中 cust_name 其实可以不加</span></span><br><span class=\"line\"><span class=\"comment\">-- 可以这么理解:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- a. 先进行笛卡尔积</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders, orderitems, customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id </span><br><span class=\"line\"><span class=\"keyword\">AND</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"comment\">-- b. 执行 WHERE 子句的过滤联结条件</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id </span><br><span class=\"line\"><span class=\"keyword\">AND</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"comment\">-- c. 然后按cust_name 和 order_num 分组, 不分先后 由于order_num是结果中的主键, 按这种分组方式可映射多个 cust_name, 所以cust_name可有可无</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name, orders.order_num</span><br><span class=\"line\"><span class=\"comment\">-- d. 返回选择的行, SUM()函数负责计算每个分组中的值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, orders.order_num, <span class=\"built_in\">SUM</span>(quantity<span class=\"operator\">*</span>item_price) <span class=\"keyword\">AS</span> order_total </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_date, cust_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders, orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> order_date, cust_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orderitems </span><br><span class=\"line\"><span class=\"keyword\">ON</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> order_date;</span><br><span class=\"line\"><span class=\"comment\">-- 有点意思</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, cust_email </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> orders.cust_id <span class=\"operator\">=</span> customers.cust_id</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orderitems <span class=\"keyword\">ON</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> customers <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name <span class=\"keyword\">HAVING</span> <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"operator\">&gt;=</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"keyword\">AS</span> total_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orderitems, orders, customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num </span><br><span class=\"line\"><span class=\"keyword\">AND</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> cust_name <span class=\"keyword\">HAVING</span> <span class=\"built_in\">SUM</span>(item_price<span class=\"operator\">*</span>quantity) <span class=\"operator\">&gt;=</span> <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建高级联结\">创建高级联结<a title=\"#创建高级联结\" href=\"#创建高级联结\"></a></h2>\n<h3 id=\"使用表别名\">使用表别名<a title=\"#使用表别名\" href=\"#使用表别名\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact</span><br><span class=\"line\"><span class=\"comment\">-- 给表起 别名 AS, ORACLE的DB中可以不加AS</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> C, orders <span class=\"keyword\">AS</span> O, orderitems <span class=\"keyword\">AS</span> OI</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C.cust_id <span class=\"operator\">=</span> O.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> OI.order_num <span class=\"operator\">=</span> O.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>SQL 除了可以对列名和计算字段使用别名，还允许给表名起别名。这样做有两个主要理由：</p>\n<ol>\n<li>缩短 SQL 语句；</li>\n<li>允许在一条 SELECT 语句中多次使用相同的表。</li>\n<li>表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户端。</li>\n</ol>\n<h3 id=\"使用不同类型的联结\">使用不同类型的联结<a title=\"#使用不同类型的联结\" href=\"#使用不同类型的联结\"></a></h3>\n<h4 id=\"自联结(self-join)\">自联结(self-join)<a title=\"#自联结(self-join)\" href=\"#自联结(self-join)\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 使用自联结</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> c1, customers <span class=\"keyword\">AS</span> c2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> c1.cust_name <span class=\"operator\">=</span> c2.cust_name</span><br><span class=\"line\"><span class=\"keyword\">AND</span> c2.cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;Jim Jones&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OR 使用标准的内联结自联结</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> c1 </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> customers <span class=\"keyword\">AS</span> c2 <span class=\"keyword\">ON</span> c1.cust_name <span class=\"operator\">=</span> c2.cust_name</span><br><span class=\"line\"><span class=\"keyword\">AND</span> c2.cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;Jim Jones&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 相同效果子查询, 在一张表中, 查找 cust_contact为某值的cust_name, 再由cust_name查找对应的信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name, cust_contact</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;Jim Jones&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自然联结(natural-join)\">自然联结(natural join)<a title=\"#自然联结(natural-join)\" href=\"#自然联结(natural-join)\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> C.<span class=\"operator\">*</span>, O.order_num, O.order_date, OI.prod_id, OI.quantity, OI.item_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers <span class=\"keyword\">AS</span> C, orders <span class=\"keyword\">AS</span> O, orderitems <span class=\"keyword\">AS</span> OI</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C.cust_id <span class=\"operator\">=</span> O.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> OI.order_num <span class=\"operator\">=</span> O.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 等同于使用 JOIN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.<span class=\"operator\">*</span>, orders.order_num, orders.order_date, orderitems.prod_id,orderitems.quantity, orderitems.item_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> orderitems <span class=\"keyword\">ON</span> orders.order_num <span class=\"operator\">=</span> orderitems.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>自然联结返回结果只存在一个主键.<br>\n无论何时对表进行联结，应该至少有一列不止出现在一个表中.标准的联结返回所有数据，相同的列甚至多次出现。自然联结排除多次出现，使每一列只返回一次。<br>\n自然联结要求你只能选择那些唯一的列，一般通过对一个表使用通配符(SELECT *)，而对其他表的列使用明确的子集来完成。</p>\n<h4 id=\"外联结(outer-join)\">外联结(outer join)<a title=\"#外联结(outer-join)\" href=\"#外联结(outer-join)\"></a></h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 外连接, LEFT/RIGHT 指定包括其所有行的表</span></span><br><span class=\"line\"><span class=\"comment\">-- 比如这里的 LEFT 指定的就是保留左边的表 customers</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 上面等同于</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> orders</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> customers <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 可以比较下区别, 就算左边没有匹配条件的行也会保留, 右表的值置NULL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num, customers.cust_id, orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers, orders <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> customers.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, orders.order_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br></pre></td></tr></table></figure>\n<p>联结包含了那些在相关表中没有关联行的行。这种联结称为外联结.<br>\n左外联结和右外联结能相互转换.</p>\n<h3 id=\"使用带聚集函数的联结\">使用带聚集函数的联结<a title=\"#使用带聚集函数的联结\" href=\"#使用带聚集函数的联结\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, <span class=\"built_in\">COUNT</span>(orders.order_num) <span class=\"keyword\">AS</span> num_ord</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> customers.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.cust_id, <span class=\"built_in\">COUNT</span>(orders.order_num) <span class=\"keyword\">AS</span> num_ord</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> customers.cust_id;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用联结和联结条件\">使用联结和联结条件<a title=\"#使用联结和联结条件\" href=\"#使用联结和联结条件\"></a></h3>\n<ol>\n<li>注意所使用的联结类型。一般我们使用内联结，但使用外联结也有效。</li>\n<li>关于确切的联结语法，应该查看具体的文档，看相应的 DBMS 支持何种语法.</li>\n<li>保证使用正确的联结条件(不管采用哪种语法)，否则会返回不正确的数据。</li>\n<li>应该总是提供联结条件，否则会得出笛卡儿积。</li>\n<li>在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前分别测试每个联结。这会使故障排除更为简单。</li>\n</ol>\n<h3 id=\"挑战题-11\">挑战题<a title=\"#挑战题-11\" href=\"#挑战题-11\"></a></h3>\n<ol>\n<li>使用 INNER JOIN 编写 SQL语句，以检索每个顾客的名称(Customers表中的 cust_name)和所有的订单号(Orders 表中的 order_num)</li>\n<li>修改刚刚创建的 SQL 语句，仅列出所有顾客，即使他们没有下过订单。</li>\n<li>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称(prod_name)和与之相关的订单号(order_num)的列表，并按商品名称排序。</li>\n<li>修改上一题中创建的 SQL 语句，使其返回每一项产品的总订单数(不是订单号)。</li>\n<li>编写 SQL语句，列出供应商(Vendors 表中的 vend_id)及其可供产品的数量，包括没有产品的供应商。你需要使用 OUTER JOIN 和 COUNT()聚合函数来计算 Products 表中每种产品的数量。注意：vend_id 列会显示在多个表中，因此在每次引用它时都需要完全限定它</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> orders </span><br><span class=\"line\"><span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, order_num </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orders </span><br><span class=\"line\"><span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, order_num </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">ON</span> products.prod_id <span class=\"operator\">=</span> orderitems.prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, <span class=\"built_in\">COUNT</span>(order_num) <span class=\"keyword\">AS</span> orders </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">ON</span> products.prod_id <span class=\"operator\">=</span> orderitems.prod_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> prod_name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vendors.vend_id, <span class=\"built_in\">COUNT</span>(prod_id)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> products </span><br><span class=\"line\"><span class=\"keyword\">ON</span> products.vend_id <span class=\"operator\">=</span> vendors.vend_id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> vendors.vend_id;</span><br></pre></td></tr></table></figure>\n<h2 id=\"组合查询\">组合查询<a title=\"#组合查询\" href=\"#组合查询\"></a></h2>\n<p>多数 SQL 查询只包含从一个或多个表中返回数据的单条 SELECT 语句。但是，SQL 也允许执行多个查询(多条 SELECT 语句)，并将结果作为一个查询结果集返回。这些组合查询通常称为并(union)或复合查询(compound query)。<br>\n主要有两种情况需要使用组合查询：</p>\n<ol>\n<li>在一个查询中从不同的表返回结构数据；</li>\n<li>对一个表执行多个查询，按一个查询返回数据。</li>\n<li>任何具有多个WHERE 子句的 SELECT 语句都可以作为一个组合查询.</li>\n</ol>\n<h3 id=\"创建组合查询\">创建组合查询<a title=\"#创建组合查询\" href=\"#创建组合查询\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- UNION 将两条SELECT的查询结果合并成一条</span></span><br><span class=\"line\"><span class=\"comment\">-- 等同于多个条件的 WHERE, 性能可能分情况有差别 </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_state <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;IL&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"string\">&#x27;MI&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Fun4ALL&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- UNION ALL 不取消重复行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_state <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;IL&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"string\">&#x27;MI&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>UNION 必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔</li>\n<li>UNION 从查询结果集中自动去除了重复的行, 行为与一条 SELECT 语句中使用多个 WHERE 子句一样.</li>\n<li>如果确实需要每个条件的匹配行全部出现(包括重复行)，就必须使用 UNION ALL，而不是 WHERE。</li>\n<li>UNION 中的每个查询必须包含相同的列、表达式或聚集函数(不过，各个列不需要以相同的次序列出)</li>\n<li>列数据类型必须兼容：类型不必完全相同，但必须是 DBMS 可以隐含转换的类型(例如，不同的数值类型或不同的日期类型)</li>\n<li>如果结合 UNION 使用的 SELECT 语句遇到不同的列名, 会返回第一个名字.</li>\n</ol>\n<h3 id=\"对组合查询结果排序\">对组合查询结果排序<a title=\"#对组合查询结果排序\" href=\"#对组合查询结果排序\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 组合查询只允许一条 ORDER BY, 放最后排序整个结果集</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_state <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;IL&#x27;</span>,<span class=\"string\">&#x27;IN&#x27;</span>,<span class=\"string\">&#x27;MI&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Fun4All&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name, cust_contact;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-12\">挑战题<a title=\"#挑战题-12\" href=\"#挑战题-12\"></a></h3>\n<ol>\n<li>编写 SQL 语句，将两个 SELECT 语句结合起来，以便从 OrderItems表中检索产品 ID(prod_id)和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 ID 以 BNBG 开头的产品。按产品 ID 对结果进行排序。</li>\n<li>重写刚刚创建的 SQL 语句，仅使用单个 SELECT 语句。</li>\n<li>我知道这有点荒谬，但这节课中的一个注释提到过。编写 SQL 语句，组合 Products 表中的产品名称(prod_name)和 Customers 表中的顾客名称(cust_name)并返回，然后按产品名称对结果进行排序。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nSELECT cust_name, cust_contact, cust_email<br>\nFROM Customers<br>\nWHERE cust_state = ‘MI’<br>\nORDER BY cust_name;<br>\nUNION<br>\nSELECT cust_name, cust_contact, cust_email<br>\nFROM Customers<br>\nWHERE cust_state = 'IL’ORDER BY cust_name;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> quantity <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;BNBG%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> quantity <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;BNBG%&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> products</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"><span class=\"comment\">-- that&#x27;s nonsensial indeed, cust_name list in the list of prod_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. ORDER BY 只能存在一个放在最后 </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"插入数据\">插入数据<a title=\"#插入数据\" href=\"#插入数据\"></a></h2>\n<p>INSERT 用来将行插入(或添加)到数据库表。插入有几种方式：</p>\n<ol>\n<li>插入完整的行</li>\n<li>插入行的一部分</li>\n<li>插入某些查询的结果</li>\n</ol>\n<p>使用 INSERT 语句可能需要客户端/服务器 DBMS 中的特定安全权限.</p>\n<h3 id=\"插入完整的行\">插入完整的行<a title=\"#插入完整的行\" href=\"#插入完整的行\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入一行, VALUES数组按模式顺序填充</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers </span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"number\">1000000006</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;Slacr Land&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;Fuck Street&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;NY&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;11111&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;USB&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t  <span class=\"keyword\">NULL</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"><span class=\"comment\">-- 更安全的方法, 给出明确的列名, 次序可以变更\t\t\t</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers(cust_name,</span><br><span class=\"line\">\t\t\t\t\t cust_id,</span><br><span class=\"line\">\t\t\t\t\t cust_address,</span><br><span class=\"line\">\t\t\t\t\t cust_city,</span><br><span class=\"line\">\t\t\t\t\t cust_state,</span><br><span class=\"line\">\t\t\t\t\t cust_zip,</span><br><span class=\"line\">\t\t\t\t\t cust_country,</span><br><span class=\"line\">\t\t\t\t\t cust_contact,</span><br><span class=\"line\">\t\t\t\t\t cust_email)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;Slacr Land&#x27;</span>,</span><br><span class=\"line\">       <span class=\"number\">1000000006</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;Fuck Street&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;NY&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;11111&#x27;</span>,</span><br><span class=\"line\">       <span class=\"string\">&#x27;USA&#x27;</span>,</span><br><span class=\"line\">       <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">       <span class=\"keyword\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>编写依赖于特定列次序的 SQL 语句很不安全, 不能保证各列在下一次表结构变动后保持完全相同的次序</p>\n<h3 id=\"插入部分行\">插入部分行<a title=\"#插入部分行\" href=\"#插入部分行\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Customers(cust_id,</span><br><span class=\"line\">\t\t\t\t\t  cust_name,</span><br><span class=\"line\">\t\t\t\t\t  cust_address,</span><br><span class=\"line\">\t\t\t\t\t  cust_city,</span><br><span class=\"line\">\t\t\t\t\t  cust_state,</span><br><span class=\"line\">\t\t\t\t\t  cust_zip,</span><br><span class=\"line\">\t\t\t\t\t  cust_country)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"number\">1000000006</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;Toy Land&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;123 Any Street&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;New York&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;NY&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;11111&#x27;</span>,</span><br><span class=\"line\"> \t   <span class=\"string\">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>可以在 INSERT 操作中省略某些列。省略的列必须满足以下某个条件。</p>\n<ol>\n<li>该列定义为允许 NULL 值(无值或空值)。</li>\n<li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li>\n</ol>\n<h3 id=\"插入检索出的数据\">插入检索出的数据<a title=\"#插入检索出的数据\" href=\"#插入检索出的数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">-- 选择插入, 从 cust_new 表中选择数据插入customer表</span></span><br><span class=\"line\"> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers(cust_id,</span><br><span class=\"line\">                       cust_contact,</span><br><span class=\"line\">                       cust_email,</span><br><span class=\"line\">                       cust_name,</span><br><span class=\"line\">                       cust_address,</span><br><span class=\"line\">                       cust_city,</span><br><span class=\"line\">                       cust_state,</span><br><span class=\"line\">                       cust_zip,</span><br><span class=\"line\">                       cust_country)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id,</span><br><span class=\"line\">       cust_contact,</span><br><span class=\"line\">       cust_email,</span><br><span class=\"line\">       cust_name,</span><br><span class=\"line\">       cust_address,</span><br><span class=\"line\">       cust_city,</span><br><span class=\"line\">       cust_state,</span><br><span class=\"line\">       cust_zip,</span><br><span class=\"line\">       cust_country</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> cust_new;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>列名不一定要相同.</li>\n<li>INSERT SELECT 中 SELECT 语句可以包含 WHERE 子句，以过滤插入的数据。</li>\n<li>INSERT SELECT是个例外，它可以用一条INSERT插入多行.</li>\n</ol>\n<h3 id=\"从一个表复制到另一个表\">从一个表复制到另一个表<a title=\"#从一个表复制到另一个表\" href=\"#从一个表复制到另一个表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建新表, 用原有表的数据, 可以使用更多条件的SELECT</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> cust_copy <span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SQL SERVER</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">INTO</span> CustCopy <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-13\">挑战题<a title=\"#挑战题-13\" href=\"#挑战题-13\"></a></h3>\n<ol>\n<li>使用 INSERT 和指定的列，将你自己添加到 Customers 表中。明确列出要添加哪几列，且仅需列出你需要的列。</li>\n<li>备份 Orders 表和 OrderItems 表.</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1. </span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> customers(cust_name,</span><br><span class=\"line\">\t\t\t\t\t  cust_id,</span><br><span class=\"line\">\t\t\t\t\t  cust_address,</span><br><span class=\"line\">\t\t\t\t\t  cust_city,</span><br><span class=\"line\">\t\t\t\t\t  cust_state,</span><br><span class=\"line\">\t\t\t\t\t  cust_zip,</span><br><span class=\"line\">\t\t\t\t\t  cust_country,</span><br><span class=\"line\">\t\t\t\t\t  cust_contact,</span><br><span class=\"line\">\t\t\t\t\t  cust_email)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"string\">&#x27;slacr&#x27;</span>,</span><br><span class=\"line\">\t   <span class=\"string\">&#x27;001&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;CY&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;CQ&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;NAN&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;1024&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;CN&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;hacr&#x27;</span>,</span><br><span class=\"line\">\t\t <span class=\"string\">&#x27;xxx&#x27;</span>);</span><br><span class=\"line\">\t\t\t \t\t\t </span><br><span class=\"line\"> <span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> backup_orders <span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orders;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> backup_orderitems <span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> orderitems;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新和删除数据\">更新和删除数据<a title=\"#更新和删除数据\" href=\"#更新和删除数据\"></a></h2>\n<h3 id=\"更新数据\">更新数据<a title=\"#更新数据\" href=\"#更新数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> customers </span><br><span class=\"line\"><span class=\"keyword\">SET</span> cust_email <span class=\"operator\">=</span> <span class=\"string\">&#x27;shit@shool.edu&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000005</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 更新多个列</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> customers </span><br><span class=\"line\"><span class=\"keyword\">SET</span> cust_contact <span class=\"operator\">=</span> <span class=\"string\">&#x27;slacr&#x27;</span>,</span><br><span class=\"line\">\tcust_email <span class=\"operator\">=</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000006</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除数据\">删除数据<a title=\"#删除数据\" href=\"#删除数据\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除指定条目</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;slacr&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 省略 WHERE 子句会删除所有</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>DELETE 语句从表中删除行，甚至是删除表中所有行。但是，DELETE不删除表本身。</li>\n<li>如果想从表中删除所有行，不要使用 DELETE。可使用 TRUNCATE TABLE语句，它完成相同的工作，而速度更快(因为不记录数据的变动)</li>\n</ol>\n<p>下面是许多 SQL 程序员使用 UPDATE 或 DELETE 时所遵循的重要原则:</p>\n<ol>\n<li>除非确实打算更新和删除每一行，否则绝对不要使用不带 WHERE 子句的 UPDATE 或 DELETE 语句。</li>\n<li>保证每个表都有主键，尽可能像 WHERE 子句那样使用它(可以指定各主键、多个值或值的范围)。</li>\n<li>在 UPDATE 或 DELETE 语句使用 WHERE 子句前，应该先用 SELECT 进行测试，保证它过滤的是正确的记录，以防编写的 WHERE 子句不正确。</li>\n<li>使用强制实施引用完整性的数据库, 这样 DBMS 将不允许删除其数据与其他表相关联的行。</li>\n<li>有的 DBMS 允许数据库管理员施加约束，防止执行不带 WHERE 子句的 UPDATE 或 DELETE 语句。如果所采用的 DBMS 支持这个特性，应该使用它。</li>\n</ol>\n<h3 id=\"挑战题-14\">挑战题<a title=\"#挑战题-14\" href=\"#挑战题-14\"></a></h3>\n<ol>\n<li>美国各州的缩写应始终用大写。编写 SQL语句来更新所有美国地址，包括供应商状态(Vendors 表中的 vend_state)和顾客状态(Customers表中的 cust_state)，使它们均为大写。</li>\n<li>第 15 课的挑战题 1 要求你将自己添加到 Customers 表中。现在请删除自己。确保使用 WHERE 子句(在 DELETE 中使用它之前，先用 SELECT对其进行测试)，否则你会删除所有顾客！</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> customers </span><br><span class=\"line\"><span class=\"keyword\">SET</span> cust_state <span class=\"operator\">=</span> <span class=\"built_in\">UPPER</span>(cust_state);</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">SET</span> vend_state <span class=\"operator\">=</span> <span class=\"built_in\">UPPER</span>(vend_state);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers <span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000006</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> customers </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_id <span class=\"operator\">=</span> <span class=\"number\">1000000006</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建和操纵表\">创建和操纵表<a title=\"#创建和操纵表\" href=\"#创建和操纵表\"></a></h2>\n<h3 id=\"创建表\">创建表<a title=\"#创建表\" href=\"#创建表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> products</span><br><span class=\"line\">(</span><br><span class=\"line\">\tprod_id\t\t<span class=\"type\">CHAR</span>(<span class=\"number\">10</span>)\t\t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tvend_id   \t<span class=\"type\">CHAR</span>(<span class=\"number\">10</span>)\t\t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tprod_name \t<span class=\"type\">CHAR</span>(<span class=\"number\">254</span>)\t\t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\tprod_price \t<span class=\"type\">DECIMAL</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>) \t<span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>\t<span class=\"keyword\">DEFAULT</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">\tprod_desc  \t<span class=\"type\">VARCHAR</span>(<span class=\"number\">1000</span>)\t<span class=\"keyword\">NULL</span></span><br><span class=\"line\">\t<span class=\"comment\">-- NULL 可以不写为默认值, 设置了NOT NULL 限定的列不可为空, 插入时也必须给值</span></span><br><span class=\"line\">\t<span class=\"comment\">-- DEFAULT 设置默认值</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用 DBMS 创建表实际上是 程序帮你自动执行 SQL.<br>\nNULL 值是没有值，不是空字符串。<br>\nprimary key 一定 NOT NULL</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305072106417.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>日期或时间戳通常使用系统值, 可以调用函数给出默认值 <code>DEFAULT CURRENT_DATE()</code>.</p>\n<h3 id=\"更新表\">更新表<a title=\"#更新表\" href=\"#更新表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> vend_phone <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure>\n<p>使用 ALTER TABLE 时需要考虑:</p>\n<ol>\n<li>理想情况下，不要在表中包含数据时对其进行更新。应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结构做大改动。</li>\n<li>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型(以及 NULL 和 DEFAULT 的使用)有所限制。</li>\n<li>许多 DBMS 不允许删除或更改表中的列。</li>\n<li>多数 DBMS 允许重新命名表中的列。</li>\n<li>许多 DBMS 限制对已经填有数据的列进行更改，对未填有数据的列几乎没有限制</li>\n</ol>\n<p>复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：</p>\n<ol>\n<li>用新的列布局创建一个新表；</li>\n<li>使用 INSERT SELECT 语句从旧表复制数据到新表。有必要的话，可以使用转换函数和计算字段；</li>\n<li>检验包含所需数据的新表；</li>\n<li>重命名旧表(如果确定，可以删除它);</li>\n<li>用旧表原来的名字重命名新表；</li>\n<li>根据需要，重新创建触发器、存储过程、索引和外键。</li>\n</ol>\n<h3 id=\"删除表\">删除表<a title=\"#删除表\" href=\"#删除表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> cust_copy;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名表\">重命名表<a title=\"#重命名表\" href=\"#重命名表\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> backup_orders RENAME copy_orders;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-15\">挑战题<a title=\"#挑战题-15\" href=\"#挑战题-15\"></a></h3>\n<ol>\n<li>在 Vendors 表中添加一个网站列(vend_web)。你需要一个足以容纳 URL 的大文本字段。</li>\n<li>使用 UPDATE 语句更新 Vendor 记录，以便加入网站(你可以编造任何地址)。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> vendors</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> vend_web <span class=\"type\">VARCHAR</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> vendors </span><br><span class=\"line\"><span class=\"keyword\">SET</span> vend_web <span class=\"operator\">=</span> <span class=\"string\">&#x27;www.slacr.site&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> vend_country <span class=\"operator\">=</span> <span class=\"string\">&#x27;USA&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用视图\">使用视图<a title=\"#使用视图\" href=\"#使用视图\"></a></h2>\n<p>视图是<code>虚拟的表</code>。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p>\n<p>为什么使用视图:</p>\n<ol>\n<li>重用 SQL 语句。</li>\n<li>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道其基本查询细节。</li>\n<li>使用表的一部分而不是整个表。</li>\n<li>保护数据。可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</li>\n<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>\n</ol>\n<p>创建视图之后，可以用与表基本相同的方式使用它们。可以对视图执行SELECT 操作，过滤和排序数据，将视图联结到其他视图或表，甚至添加和更新数据.<br>\n视图仅仅是用来查看存储在别处数据的一种设施。视图本身不包含数据，因此返回的数据是从其他表中检索出来的。</p>\n<p>视图创建和使用的一些最常见的规则和限制:</p>\n<ol>\n<li>与表一样，视图必须唯一命名(不能给视图取与别的视图或表相同的名字)。</li>\n<li>对于可以创建的视图数目没有限制。</li>\n<li>创建视图，必须具有足够的访问权限。这些权限通常由数据库管理人员授予。</li>\n<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造视图。所允许的嵌套层数在不同的 DBMS中有所不同(嵌套视图可能会严重降低查询的性能，因此在产品环境中使用之前，应该对其进行全面测试).</li>\n<li>许多 DBMS 禁止在视图查询中使用 ORDER BY 子句。</li>\n<li>有些 DBMS 要求对返回的所有列进行命名，如果列是计算字段，则需要使用别名</li>\n<li>视图不能索引，也不能有关联的触发器或默认值。</li>\n<li>有些 DBMS 把视图作为只读的查询，这表示可以从视图检索数据，但不能将数据写回底层表。详情请参阅具体的 DBMS 文档</li>\n</ol>\n<h3 id=\"创建使用视图\">创建使用视图<a title=\"#创建使用视图\" href=\"#创建使用视图\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 利用视图简化复杂联结</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> prod_cust </span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers, orders, orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> orderitems.order_num <span class=\"operator\">=</span> orders.order_num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除视图</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> prod_cust;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 对视图检索</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, cust_contact </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> prod_cust</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用视图重新格式化选择出来的数据</span></span><br><span class=\"line\"><span class=\"comment\">-- 在SELECT前面补上CREATE VIEW 语句就行了</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> vendor_locations <span class=\"keyword\">AS</span> </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> CONCAT(vend_name, <span class=\"string\">&#x27;  [ &#x27;</span>, vend_country, <span class=\"string\">&#x27; ]&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> vend_title</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> vendors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用视图过滤不想要的数据</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> cust_email_list <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_id, cust_name, cust_email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> cust_email <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> cust_email_list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用视图与计算字段</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> order_items_expanded <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, quantity, item_price, quantity<span class=\"operator\">*</span>item_price </span><br><span class=\"line\"><span class=\"keyword\">AS</span> expanded_price <span class=\"keyword\">FROM</span> orderitems</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">20008</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> order_items_expanded;</span><br></pre></td></tr></table></figure>\n<h3 id=\"挑战题-16\">挑战题<a title=\"#挑战题-16\" href=\"#挑战题-16\"></a></h3>\n<ol>\n<li>创建一个名为 CustomersWithOrders 的视图，其中包含 Customers表中的所有列，但仅仅是那些已下订单的列。提示：可以在 Orders表上使用 JOIN 来仅仅过滤所需的顾客，然后使用 SELECT 来确保拥<br>\n有正确的数据。</li>\n<li>下面的 SQL 语句有问题吗？(尝试在不运行的情况下指出。)<br>\nCREATE VIEW OrderItemsExpanded AS<br>\nSELECT order_num,<br>\nprod_id,<br>\nquantity,<br>\nitem_price,<br>\nquantity*item_price AS expanded_price<br>\nFROM OrderItems<br>\nORDER BY order_num;</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 挑战题</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> cust_with_orders <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> customers.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> orders <span class=\"keyword\">ON</span> customers.cust_id <span class=\"operator\">=</span> orders.cust_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> cust_with_orders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. MYSQL中没问题, 但有些数据库创建VIEW不能加ORDER BY字段, 可以创建后再检索视图</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"存储过程和函数\">存储过程和函数<a title=\"#存储过程和函数\" href=\"#存储过程和函数\"></a></h2>\n<p>存储过程就是为以后使用而保存的一条或多条 SQL 语句, store routine。可将其视为批文件，虽然它们的作用不仅限于批处理。</p>\n<p>为什么要使用存储过程:</p>\n<ol>\n<li>通过把处理封装在一个易用的单元中，可以简化复杂的操作</li>\n<li>由于不要求反复建立一系列处理步骤，因而保证了数据的一致性。如果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都是相同的。</li>\n<li>上一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性</li>\n<li>简化对变动的管理。如果表名、列名或业务逻辑(或别的内容)有变化，那么只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化</li>\n<li>上一点的延伸就是安全性。通过存储过程限制对基础数据的访问，减少了数据讹误(无意识的或别的原因所导致的数据讹误)的机会。</li>\n<li>因为存储过程通常以编译过的形式存储，所以 DBMS 处理命令所需的工作量少，提高了性能。</li>\n<li>存在一些只能用在单个请求中的 SQL 元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。</li>\n</ol>\n<p>不同DB实现的语法相差很大, MySQL参见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html\" target=\"_blank\">link</a></p>\n<h3 id=\"存储过程\">存储过程<a title=\"#存储过程\" href=\"#存储过程\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> HighPriceProd(<span class=\"keyword\">IN</span> price <span class=\"type\">DECIMAL</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> prod_id, prod_price <span class=\"keyword\">FROM</span> products</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> prod_price <span class=\"operator\">&gt;=</span> price</span><br><span class=\"line\">\t<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> HighPriceProd;</span><br><span class=\"line\"><span class=\"comment\">-- 调用</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> HighPriceProd(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> SetPrice(<span class=\"keyword\">IN</span> pid <span class=\"type\">CHAR</span>(<span class=\"number\">10</span>), <span class=\"keyword\">IN</span> price <span class=\"type\">DECIMAL</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">\t<span class=\"keyword\">UPDATE</span> products</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> prod_price <span class=\"operator\">=</span> price <span class=\"keyword\">WHERE</span> prod_id <span class=\"operator\">=</span> pid;</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> prod_id, prod_price <span class=\"keyword\">FROM</span> products;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> SetPrice;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> SetPrice(<span class=\"string\">&#x27;BR01&#x27;</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 利用 @ 标识全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"variable\">@price</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>, <span class=\"variable\">@pid</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;BR01&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> SetPrice(<span class=\"variable\">@pid</span>, <span class=\"variable\">@price</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OUT 输出参数</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> outTest(<span class=\"keyword\">OUT</span> test <span class=\"type\">INT</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> test;</span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> test <span class=\"operator\">=</span> <span class=\"number\">99</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> test;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"variable\">@test</span> <span class=\"operator\">=</span> <span class=\"number\">111</span>;  </span><br><span class=\"line\"><span class=\"keyword\">CALL</span> outTest(<span class=\"variable\">@test</span>);   <span class=\"comment\">-- NULL, 不接受参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"variable\">@test</span>; <span class=\"comment\">-- 99, 调用存储过程</span></span><br></pre></td></tr></table></figure>\n<p>IN 输入参数：表示调用者向过程传入值(传入值可以是字面量或变量)<br>\nOUT 输出参数：表示过程向调用者传出值(可以返回多个值)(传出值只能是变量)<br>\nINOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值(值只能是变量)</p>\n<h3 id=\"存储函数\">存储函数<a title=\"#存储函数\" href=\"#存储函数\"></a></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建存储函数</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> hello (s <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>)) <span class=\"keyword\">RETURNS</span> <span class=\"type\">CHAR</span>(<span class=\"number\">50</span>) </span><br><span class=\"line\"><span class=\"keyword\">DETERMINISTIC</span></span><br><span class=\"line\"><span class=\"keyword\">RETURN</span> CONCAT(<span class=\"string\">&#x27;Hello,&#x27;</span>, s, <span class=\"string\">&#x27;!&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> hello(<span class=\"string\">&#x27;world&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> hello;</span><br></pre></td></tr></table></figure>\n<h2 id=\"管理事务处理(transaction-processing)\">管理事务处理(transaction processing)<a title=\"#管理事务处理(transaction-processing)\" href=\"#管理事务处理(transaction-processing)\"></a></h2>\n<p>使用事务处理(transaction processing)，通过确保成批的 SQL 操作要么完全执行，要么完全不执行，来维护数据库的完整性。</p>\n<p>事务处理是一种机制，用来管理必须成批执行的 SQL 操作，保证数据库不包含不完整的操作结果。利用事务处理，可以保证一组操作不会中途停止，它们要么完全执行，要么完全不执行(除非明确指示)。如果没有错误发生，整组语句提交给(写到)数据库表；如果发生错误，则进行回退(撤销)，将数据库恢复到某个已知且安全的状态。</p>\n<p>事务处理用来管理 INSERT、UPDATE 和 DELETE 语句。不能回退 SELECT, CREATE 或 DROP 操作。事务处理中可以使用这些语句，但进行回退时，这些操作也不撤销。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> orders <span class=\"keyword\">VALUES</span>( <span class=\"number\">200010</span>, <span class=\"string\">&#x27;2023-02-08 00:00:00&#x27;</span>, <span class=\"string\">&#x27;1000000001&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION;</span><br><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> del_1;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> orders <span class=\"keyword\">WHERE</span> order_num <span class=\"operator\">=</span> <span class=\"number\">200010</span>;</span><br><span class=\"line\"><span class=\"comment\">-- ROLLBACK;  -- ROLLBACK可以撤销上一句SQL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> orders <span class=\"keyword\">VALUES</span>( <span class=\"number\">200111</span>, <span class=\"string\">&#x27;2023-02-10 00:00:00&#x27;</span>, <span class=\"string\">&#x27;1000000001&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> del_1;   <span class=\"comment\">-- 回退到保存点</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 只有COMMIT结束 才会完成整个TRANSACTION, 默认自动COMMIT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- By default, MySQL runs with autocommit mode enabled. </span></span><br><span class=\"line\"><span class=\"comment\">-- SET autocommit = &#123;0|1&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用游标\">使用游标<a title=\"#使用游标\" href=\"#使用游标\"></a></h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> test()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> </span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> str <span class=\"type\">CHAR</span>(<span class=\"number\">50</span>); </span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> name_cursor <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">SELECT</span> cust_name <span class=\"keyword\">FROM</span> customers;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">OPEN</span> name_cursor;</span><br><span class=\"line\"></span><br><span class=\"line\">    read_loop: LOOP </span><br><span class=\"line\">        <span class=\"keyword\">FETCH</span> name_cursor <span class=\"keyword\">INTO</span> str;</span><br><span class=\"line\">        IF str <span class=\"keyword\">LIKE</span> &quot;%T%&quot; <span class=\"keyword\">THEN</span></span><br><span class=\"line\">            LEAVE read_loop;</span><br><span class=\"line\">        <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> LOOP;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">CLOSE</span> name_cursor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> customers <span class=\"keyword\">WHERE</span> cust_name <span class=\"operator\">=</span> str;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> test();</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在使用游标前，必须声明(定义)它。这个过程实际上没有检索数据，它只是定义要使用的 SELECT 语句和游标选项。</li>\n<li>一旦声明，就必须打开游标以供使用。这个过程用前面定义的 SELECT语句把数据实际检索出来。</li>\n<li>对于填有数据的游标，根据需要取出(检索)各行。</li>\n<li>在结束游标使用时，必须关闭游标，可能的话，释放游标(有赖于具体的 DBMS)</li>\n</ol>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>SQL不区分大小写, 但是表名、列名和值可能有所不同(这有赖于具体的 DBMS 及其如何配置)。</li>\n<li>并非所有数据库的SQL实现都一样, 基本语句往往向通.</li>\n<li>SQL忽略换行, 可以一条语句分多段, 分号结尾.</li>\n<li>SQL 语句一般返回原始的、无格式的数据，不同的 DBMS 和客户端显示数据的方式略有不同(如对齐格式不同、小数位数不同)。数据的格式化是表示问题，而不是检索问题。因此，如何表示一般会在显示该数据的应用程序中规定。通常很少直接使用实际检索出的数据(没有应用程序提供的格式)。</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《SQL必知必会 第五版》 Ben Forta IBSN 9787115539168</li>\n<li><a href=\"https://livesql.oracle.com/apex/f?p=590:1000\" target=\"_blank\">Oracle Live SQL</a></li>\n<li><a href=\"https://forta.com/books/0135182794/challenges/\" target=\"_blank\">教材答案</a></li>\n<li><a href=\"https://www.mysqlzh.com/doc/223.html\" target=\"_blank\">MySql中文文档</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html\" target=\"_blank\">MySql官方文档</a></li>\n<li><a href=\"https://www.runoob.com/w3cnote/mysql-stored-procedure.html\" target=\"_blank\">菜鸟教程-存储过程</a></li>\n<li><a href=\"https://www.yiibai.com/mysql/stored-function.html\" target=\"_blank\">MySQL存储函数</a></li>\n</ol>\n",
            "tags": []
        }
    ]
}