{
    "version": "https://jsonfeed.org/version/1",
    "title": "slacr_'s blog • All posts by \"c++\" category",
    "description": "slacr_ blog self blog website record coding githubpages",
    "home_page_url": "https://s1acr.github.io",
    "items": [
        {
            "id": "https://s1acr.github.io/2023/05/02/[C++%E7%AC%94%E8%AE%B0]%E6%B3%9B%E5%9E%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8ESTL/",
            "url": "https://s1acr.github.io/2023/05/02/[C++%E7%AC%94%E8%AE%B0]%E6%B3%9B%E5%9E%8B%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8ESTL/",
            "title": "[C++笔记]泛型程序设计与STL",
            "date_published": "2023-05-02T00:00:00.000Z",
            "content_html": "<h2 id=\"泛型程序设计\">泛型程序设计<a title=\"#泛型程序设计\" href=\"#泛型程序设计\"></a></h2>\n<p>所谓泛型程序设计，就是编写不依赖于具体数据类型的程序。c++ 中，<code>模板是泛型程序设计的主要工具</code>。</p>\n<p>泛型程序设计的主要思想是将算法从特定的数据结构中抽象出来，使算法成为通用的、可以作用于各种不同的数据结构。这样就不必为每种容器都编写一套同样的算法，当容器类模板修改、扩充时也不必重写大量算法函数。这种以函数模板形式实现的通用算法与各种通用容器结合，提高了软件的复用性。</p>\n<p>我们可以用<code>概念 (concept)来描述泛型程序设计中作为参数的数据类型所需具备的功能</code>。这里的&quot;概念&quot;是泛型程序设计中的一个术语，它的内涵是这些功能，它的外延是具备这些功能的所有数据类型。</p>\n<p>例如，&quot;可以用比大小、具有公有的复制构造函数并可以用’='赋值的所有数据类型&quot;就是一个概念，可以把这个概念记作 Sortable 。<code>具备一个概念所需要功能的数据类型</code>称为这一<code>概念的一个模型 (model)</code> 。例如 .int 数据类型就是 Sortable 概念的一个模型。</p>\n<p>对于两个不同的概念A和B. 如果概念A所需求的所有功能也是感念B 所需求的功能(即概念B的模型一定是概念A的模型) .那么就说概念B 是概念A的子概念(有些书上又把它称为精炼(refinement))。我们把&quot;可以比大小的所有数据类型&quot;这一橄念记为 Comparable ，把&quot;具有公有的复制构造函数并可以用’='赋值的数据类型&quot;这一概念记为 Assignable ，那么Sortable 既是 Comparable 的子概念，也是 Assignable 的子概念。<br>\n很多 STL 的实现代码就是使用概念来命名模板参数的。</p>\n<h2 id=\"stl简介\">STL简介<a title=\"#stl简介\" href=\"#stl简介\"></a></h2>\n<p><code>标准模板库 (Standard Template Library , STL)</code> 最初是由 HP 公司的 Alexander Stepanov 和 Meng Lee 开发的一个用于支持 C++ 泛型编程的模板库, <code>1994 年被纳入了C++ 标准</code>, 成为 C++ 标准库的一部分。由于 C++ 标准库有多种不同的实现，因此 STL 有不同的版本，但它们为用户提供的接口都遵守共同的标准。</p>\n<p>STL定义了一套概念体系，为泛型程序设计提供了逻辑基础。 STL 中的各个类模板、函数模板的参数都是用这个体系中的概念来规定的。使 STL 的一个模板时所提供的类型参数既可以是 C++ 标准库中已有的类型，也可以是自定义的类型, 只要这些类型是所要求概念的模型，因此, STL 是一个开放的体系。</p>\n<h3 id=\"容器(container)\">容器(container)<a title=\"#容器(container)\" href=\"#容器(container)\"></a></h3>\n<p>容器是容纳、包含一组元素的对象。容器类库中包括7种基本容器: <code>向量 (vector) 双端队列 (deque) 、列表 (list) 、集合 (set) 、多重集合( multiset) 、映射 (map) 和多重映射(multimap)</code>。</p>\n<p>在 STL 中，容器是封装起来的类模板，其内部结构无从知晓，而只能通过容器接口来使用容器。</p>\n<p>可以分为两种基本类型 <code>顺序容器 (sequence container) 和关联容器 (associative container)</code> 。顺序容器将一组具有相同类型的元素以严格的线性形式组织起来，向量、双端队列和列表容器就属于这一种。关联容器具有根据一组索引来快速提取元素的能力，集合和映射容器就属于这一种。</p>\n<h3 id=\"迭代器(iterater)\">迭代器(iterater)<a title=\"#迭代器(iterater)\" href=\"#迭代器(iterater)\"></a></h3>\n<p>迭代器提供了顺序访问容器中每个元素的方法。因此<code>指针本身就是一种迭代器，迭代器是泛化的指针</code>。</p>\n<h3 id=\"函数对象(function-object)\">函数对象(function object)<a title=\"#函数对象(function-object)\" href=\"#函数对象(function-object)\"></a></h3>\n<p>函数对象是一个<code>行为类似函数的对象</code>，对它可以像<code>调用函数一样调用</code>。任何普通的函数和任何重载了&quot;()&quot;运算符的类的对象都可以作为函数对象使用，<code>函数对象是泛化的函数</code>。<br>\n使用 STL 的函数对象，需要包含头文件<code>&lt;functional&gt;</code></p>\n<h3 id=\"算法-(algorithm)\">算法 (algorithm)<a title=\"#算法-(algorithm)\" href=\"#算法-(algorithm)\"></a></h3>\n<p>STL 包括 70 多个算法，这些算法覆盖了相当大的应用领域，其中包括查找算法、排序算法、消除算法、计数算法、比较算法、变换算法、置换算法和容器管理等。这些算法的一个最重要的特性就是它们的统一性，并且可以广泛用于不同的对象和内置的数据类型。<br>\n使用 STL 的算法，需要包含头文件<code>&lt;algorithm&gt;</code></p>\n<p>STL 把迭代器作为算法的参数，通过迭代器来访问容器而不是把容器直接作为算法的参数 ;STL 把函数对象作为算法的参数而不是把函数所执行的运算作为算法的一部分。这些都是非常成功的设计，它为 STL 提供了极大的灵活性。使用 STL中提供的或自定义的迭代器和函数对象，配合 STL 的算法，可以组合出各种各样的功能。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305021608371.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"迭代器\">迭代器<a title=\"#迭代器\" href=\"#迭代器\"></a></h2>\n<p>虽然指针也是一种迭代器，但迭代器却不仅仅是指针。指针可以指向内存中的一个地址，通过这个地址就可以访问相应的内存单元;而迭代器更为抽象，它可以指向容器中的一个位置，我们不必关心这个位置对应的真正物理地址，只需要通过迭代器访问这个位置的元素。</p>\n<h3 id=\"输入输出流迭代器\">输入输出流迭代器<a title=\"#输入输出流迭代器\" href=\"#输入输出流迭代器\"></a></h3>\n<p>输入/输出流迭代器用来从一个输入流/输出流中连续地输入/输出某种类型的数据.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"type\">int</span>&gt; is_i = <span class=\"built_in\">istream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cin);</span><br><span class=\"line\">\tostream_iterator&lt;<span class=\"type\">int</span>&gt; os_i = <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot;\\n&quot;</span>); <span class=\"comment\">//第二个参数 delimiter</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = *is_i;</span><br><span class=\"line\">\tis_i++;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = *is_i;</span><br><span class=\"line\">\t*os_i = a;</span><br><span class=\"line\">\tos_i++;</span><br><span class=\"line\">\t*os_i = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t*os_i = i;</span><br><span class=\"line\">\t\tos_i++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出流迭代器的特点是它在赋值时会将值写入到它所指向的输出流中。当我们使用输出流迭代器时，每次对它进行解引用操作 * 时，它会将该值写入到它所指向的输出流中.</p>\n<p>虽然输入流迭代器和输出流迭代器本身并不能比输入流和输出流提供更强大的功能，但由于它们采用迭代器的接口，在这两种<code>迭代器的帮助下，输入流和输出流可以直接参与 STL 的算法</code>，这就是引入这两种迭代器的意义。输入流迭代器和输出流迭代器可以被看作一种适配器。<code>适配器 (adapter)</code> 是指用于为已有对象提供新的接口的对象，<code>适配器本身一般并不提供新的功能，只为了改变对象的接口而存在</code>。输入流迭代器和输出流迭代器将输入流和输出流的接口变更为迭代器的接口，因此它们属于适配器。</p>\n<h3 id=\"迭代器的分类\">迭代器的分类<a title=\"#迭代器的分类\" href=\"#迭代器的分类\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305021655962.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>用输入选代器读入的序列不能保证是可重复的。，如果 pl == p2 ，并不能保证 ++p1 == ++p2, 输入流迭代器只适用于作为那些只需遍历序列一次的算法的输入。p++返回结果未知, 最好用 ++p.</p>\n<p>使用输出迭代器，写入元素的操作和使用&quot;++“自增的操作必须交替进行。如果连续两次自增之间没有写入元素，或连续两次使用”* pl =t&quot;这样的语法写入元素之间没有自增，其行为都是不确定的。</p>\n<p><code>前向迭代器</code>这一概念是输入迭代器和输出迭代器这两个概念的子概念，它既支持数据读取，也支持数据写入。前向迭代器支持对序列进行可重复的单向遍历。它去掉了输入迭代器和输出迭代器这两个概念中的一些不确定性.<br>\n前向迭代器对序列的遍历是可重复的。，前向迭代器不再有输出迭代器关于&quot;++&quot;自增操作和对元素的写入操作必须交替进行&quot;的限制。</p>\n<p><code>双向迭代器</code>这一概念是单向迭代器的子概念。在单向迭代器所支持的功能基础上，它又支持迭代器向反向移动。</p>\n<p><code>随机访问迭代器</code>这一概念是双向迭代器的子概念。在双向迭代器的基础上，它又支持直接将选代器向前或向后移动n个元素，因此随机访问迭代器的功能几乎和指针一样。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现泛型排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T, <span class=\"keyword\">class</span> input_iterator, <span class=\"keyword\">class</span> output_iterator&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySort</span><span class=\"params\">(input_iterator first, input_iterator last, output_iterator result)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;T&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( ; first !=  last; ++first) v.<span class=\"built_in\">push_back</span>(*first);</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> arr[] = &#123; <span class=\"number\">1.1</span>, <span class=\"number\">2.7</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.25</span>, <span class=\"number\">0.3</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">mySort</span>&lt;<span class=\"type\">double</span>&gt;(arr, arr + <span class=\"number\">5</span>, <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">double</span>&gt;(cout, <span class=\"string\">&quot;  &quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//mySort&lt;int&gt;(istream_iterator&lt;int&gt;(cin), istream_iterator&lt;int&gt;(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代器的辅助函数\">迭代器的辅助函数<a title=\"#迭代器的辅助函数\" href=\"#迭代器的辅助函数\"></a></h3>\n<p>STL 为迭代器提供了两个辅助函数模板 <code>advance 和 distance</code> 。它们为所有迭代器提供了一些原本只有随机访问迭代器才具有的访问能力:前进或后退多个元素，以及计算两个迭代器之间的距离。</p>\n<p><code>template&lt;class Inputlterator, class Disstance&gt; </code><br>\n<code>void advance (Inputlterator&amp; iter, Distance n);</code></p>\n<p><code>template&lt;class Inputlterator&gt; </code><br>\n<code>unsigned distance (Inputlterator first , Inputlterator last);</code></p>\n<h2 id=\"容器\">容器<a title=\"#容器\" href=\"#容器\"></a></h2>\n<h3 id=\"容器的基本功能\">容器的基本功能<a title=\"#容器的基本功能\" href=\"#容器的基本功能\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">S s1</td>\n<td style=\"text-align:left\">容器都有→个默认构造函数，用于构造一个没有任何元素的空容器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1 op s2</td>\n<td style=\"text-align:left\">这里 op 可以是= =,! = ,&lt;,&lt;= ，&gt;，&gt;=之一，它会对两个容器之间的元素按字典顺序进行比较。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.begin()</td>\n<td style=\"text-align:left\">返回指向 s1 第一个元素的迭代器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.end()</td>\n<td style=\"text-align:left\">返回指向 s1 最后一个元素的下一个位置的迭代器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.clear()</td>\n<td style=\"text-align:left\">将容器 s1 的内容清空。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.empty()</td>\n<td style=\"text-align:left\">返回一个布尔值，表示 s1 容器是否为空。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.size()</td>\n<td style=\"text-align:left\">返回 s1 的元素个数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.swap(s2)</td>\n<td style=\"text-align:left\">s1 容器和 s2 容器的内容交换。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S::iterator</td>\n<td style=\"text-align:left\">表示与 相关的普通迭代器类型，迭代器指向元素的类型为T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S::const_iterator</td>\n<td style=\"text-align:left\">表示与 相关的常迭代器类型，迭代器指向元素的类型为 const T; s1 是常量时，使用 s1.begin()返回的迭代器的类型就是 S::const_iterator否则是S::iterator</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.rbegin()</td>\n<td style=\"text-align:left\">得到指向容器的最后一个元素的逆向迭代器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>可逆容器</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.rend()</td>\n<td style=\"text-align:left\">得到指向容器的第一个元素的前一个位置的逆向迭代器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S::reverse_iterator</td>\n<td style=\"text-align:left\">表示与S相关的普通迭代器类型，选代器指向元素的类型为T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S::const_reverse_iterator</td>\n<td style=\"text-align:left\">表示与S相关的常迭代器类型，迭代器指向元素的类型const ，因此只能通过迭代器读取元素，不能通过迭代器改写元素。</td>\n</tr>\n</tbody>\n</table></div></div><p>容器作为一种 STL 的概念，有许多子概念。容器分为顺序容器和关联容器，这就是容器的两个子概念，这种划分是基于容器中元素的组织方式的。另一方面，按照与容器所关联的迭代器类型划分，容器又具有&quot;可逆容器&quot;这一子概念，可逆容器又具有&quot;随机访问容器&quot;这一子概念</p>\n<p>使用一般容器的 begin()或 end() 成员函数所得到的迭代器都是前向迭代器，也就是说可以对容器的元素进行单向的遍历。而可逆容器所提供的迭代器是双向迭代器，可以对容器的元素进行双向的遍历。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305021917089.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305021925182.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"顺序容器\">顺序容器<a title=\"#顺序容器\" href=\"#顺序容器\"></a></h3>\n<p>STL 中的顺序容器包括向量 (vector) 、双端队列 (deque) 和列表(list) ，它们在逻辑上可看作是一个长度可扩展的数组，容器中的元素都线性排列。程序员可以随意决定每个元素在容器中的位置，可以随时向指定位置插入新的元素和删除已有的元素。每种类型的容器都是一个类模板，都具有一个模板参数，表示容器的元素类型，该类型必须符合Assignable这一概念(即具有公有的复制构造函数并可以用&quot;=&quot;赋值)。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>构造函数</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S s(n, t);</td>\n<td style=\"text-align:left\">构造一个由n元素t构成的容器实例 s</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S s(n);</td>\n<td style=\"text-align:left\">构造一个有n个元素的容器实例s， 每个元素都是 T()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S s(q1,q2);</td>\n<td style=\"text-align:left\">使用将 [q1 q2) 区间内的数据作为s的元素构造s</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>赋值函数</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.assign(n, t)</td>\n<td style=\"text-align:left\">赋值后的容器由n元素构成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.assign(n)</td>\n<td style=\"text-align:left\">赋值后的容器有n个元素的容器实例s，每个元素都是 T()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.assign(q1, q2)</td>\n<td style=\"text-align:left\">赋值后的容器的元素为 [q1, q2) 区间内的数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>元素的插入</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.insert(p1, t)</td>\n<td style=\"text-align:left\">在s容器中 p1 所指向的位置插入一个新的元素t，插入后的元素夹在原p1 和 p1-1 所指向的元素之间，该函数会返回一个迭代器指向新插入的元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.insert(p1, n, t)</td>\n<td style=\"text-align:left\">在s容器中 p1 所指向的位置插入 n个新的元素，插入后的元素夹在原 p1 和 p1-1 所指向的元素之间，没有返回值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.insert(p1，q1, q2)</td>\n<td style=\"text-align:left\">将[q1, q2) 区间内的元素顺序插入到s容器中 p1 位置处，新元素夹在原 p1和p1-1 所指向的元素之间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>元素的删除</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.erase(p1)</td>\n<td style=\"text-align:left\">删除 s1 容器中 p1 所指向的元素，返回被删除的下一个元素的迭代器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.erase(p1, p2)</td>\n<td style=\"text-align:left\">删除 s1 容器中 [p1， p2) 区间内的元素，返回最后一个被删除元素的下一个元素的迭代器(即在删除前 p2 所指向元素的迭代器).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>改变容器的大小</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s1.resize(n)</td>\n<td style=\"text-align:left\">将容器的大小变为n, 如果原有的元素个数大于 n 则容器末尾多余的元素会被删除; 如果原有的元素个数小于 n, 则在容器末尾会用T()填充。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>首尾元素的直接访问</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.front()</td>\n<td style=\"text-align:left\">获得容器首元素的引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.back()</td>\n<td style=\"text-align:left\">获得容器尾元素的引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>在容器尾部插入、删除元素</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.push_back(t)</td>\n<td style=\"text-align:left\">向容器尾部插入元素t</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.pop_back()</td>\n<td style=\"text-align:left\">将容器尾部的元素删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>在容器头部插入、删除元素</code></td>\n<td style=\"text-align:left\">列表 list 和双端队列 deque 两个容器支持高效地在容器头部插入新的元素或删除容器头部的元素，但是向量容器 vector 不支持。支持这一操作的概念构成了(FrontlnsertionSequence) “前插顺序容器” 这一概念，它是&quot;顺序容器&quot;的子概念。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.push_front(t)</td>\n<td style=\"text-align:left\">向容器头部插入元素t</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s.pop_front()</td>\n<td style=\"text-align:left\">删除容器头部的元素t</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printContainer</span><span class=\"params\">(T iterator_begin, T iterator_end)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (iterator_begin != iterator_end) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; *iterator_begin &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\titerator_begin++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\tv.<span class=\"built_in\">resize</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\tv[i] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator v_it = v.<span class=\"built_in\">begin</span>(); v_it != v.<span class=\"built_in\">end</span>(); v_it++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; *v_it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">d</span><span class=\"params\">(v.rbegin(), v.rend())</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!d.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tdeque&lt;<span class=\"type\">int</span>&gt;::const_iterator d_c_it =  d.<span class=\"built_in\">end</span>()<span class=\"number\">-1</span> ;</span><br><span class=\"line\">\t\tcout &lt;&lt; *d_c_it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\td.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; l;</span><br><span class=\"line\">\tl.<span class=\"built_in\">assign</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tl.<span class=\"built_in\">push_back</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tl.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">\tl.<span class=\"built_in\">erase</span>(l.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tprintContainer&lt;list&lt;<span class=\"type\">int</span>&gt;::iterator&gt;(l.<span class=\"built_in\">begin</span>(), l.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三种容器的比较\">三种容器的比较<a title=\"#三种容器的比较\" href=\"#三种容器的比较\"></a></h4>\n<h5 id=\"vector\"><code>vector</code><a title=\"#vector\" href=\"#vector\"></a></h5>\n<p>向量容器是一种支持高效的随机访问和高效向尾部加入新元素的容器。向量容器­般实现为一个<code>动态分配的数组</code>，向量中的元素连续地存放在这个数组中，因此对向量容器进行随机访问，具有和动态访问动态数组几乎一样的效率。</p>\n<p>将已有元素从向量容器中删除时，多出的闲置空间并不会被释放，因为再插入新的元素时可能会重新占用这些空间。因此，向量容器对象已分配的空间所能容纳的元素个数，常常会大于容器中实际有效的元素个数，前者叫做向量容器的容量(capacity) ，后者叫做向量容器的大小(size).<br>\n  |  <br>\ns.capacity() | 返回s的容量<br>\ns.reserve(n) | 若当前的容量大于或等于n，什么也不做，否则扩大s的容量，使得的容量不小于n. 如果在准备向向量容器中插入大量数据之前，能够粗略估计出插入元素之后向量元素的大小，就可以在插入前使用 reserve 函数来确保这部分空间被分配，避免在插入过程中多次重新分配空间，提高效率。</p>\n<h5 id=\"deque\"><code>deque</code><a title=\"#deque\" href=\"#deque\"></a></h5>\n<p>双端队列是一种支持向两端高效地插入数据、支持随机访问的容器。双端队列的内部实现不如向量容器那样直观，在很多的 STL 实现中，双端队列的数据被表示为一个<code>分段数组</code>, &quot;容器中的元素分段存放在一个个大小固定的数组中，此外容器还需要维护一个存放这些数组首地址的索引数.</p>\n<p>执行向两端加入元素的操作时，会使所有的迭代器失效，但是不会使任何指向已有元素的指针、引用失效。指针和引用不会失效是因为向两端加入新元素不会改变已有元素在分段数组中的位置，而选代器之所以会失效，是因为向两端插入新元素可能会引起索引数组中已有元素位置的改变(例如索引数组被重新分配) ，而迭代器需要依赖索引数组。</p>\n<p>当删除双端队列中间的元素时，由于被删除元素到某一端之间的所有元素都要向中间移动，删除的位置越靠近中间，效率越低，删除操作也会使所有迭代器和指针、引用失效。</p>\n<h5 id=\"list\"><code>list</code><a title=\"#list\" href=\"#list\"></a></h5>\n<p>列表是一种<code>不能随机访问但可以高效地在任意位置插入和删除元素的容器</code>。类似<code>双向链表.</code><br>\n执行删除操作时只会使指向被删除元素的迭代器和指针、引用失效，而不会影响其他迭代器或指针、引用。<br>\n列表容器还支持一种特殊的操作 接合 (splice).</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>s1.splice(p. s2)</code></td>\n<td style=\"text-align:left\">将 s2 列表的所有元素插入到s1列表中 p-1 和 p 之间, 将 s2 列表清空.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s1.splice(p, s2, q1)</code></td>\n<td style=\"text-align:left\">将 s2 列表中 q1 所指向的元素插入到 s1列表中 p-1 和 p 之间, 将 q1 所指向的元素从 s2 列表中删除.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sl.splice(p, s2, ql, q2)</code></td>\n<td style=\"text-align:left\">将 s2 列表中[q1, q2) 区间内的所有元素插入到s1列表中 p-1 和 p 之间, 将 [q1, q2) 区间内的元素从 s2 列表中删除.</td>\n</tr>\n</tbody>\n</table></div></div><p>执行接合操作时，原先指向被接入 s1 列表中的那些元素的迭代器和指针、引用都会失效，其他迭代器或指针、引用不会受到影响。</p>\n<p>列表容器还支持其他特殊的操作，其中有很多是与一定的 STL 算法相对应的，例如<code>删除(remove) 、条件删除 (remove_if)、排序 (sort) 、去重(unique) 、归并(merge) 、倒序(reverse)</code> 等。但由于列表容器存储结构的特殊性，直接使用这些 STL 算法并不能达到最高的效率，因此这些算法提供了专门针对列表容器的实现，作为列表容器的成员函数。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305022139032.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"顺序容器的插入迭代器\">顺序容器的插入迭代器<a title=\"#顺序容器的插入迭代器\" href=\"#顺序容器的插入迭代器\"></a></h4>\n<p>插入迭代器是一种适配器，使用它可以通过输出迭代器的接口来向指定元素的指定位置插入元素。因而如果在调用 STL 算法时使用输出迭代器，可以将结果顺序插入到容器的指定位置，而无须覆盖已有的元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">FrontlnsertionSequence</span>&gt;<span class=\"keyword\">class</span> <span class=\"title class_\">front_insert_iterator</span>;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">Sequence</span>&gt;<span class=\"keyword\">class</span> <span class=\"title class_\">back_insert_iterator</span>; </span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">Sequence</span>&gt;<span class=\"keyword\">class</span> <span class=\"title class_\">insert_iterator</span>;</span><br></pre></td></tr></table></figure>\n<p>把一个容器类型作为模板参数，分别用于向指定容器头部、尾部和中间某个指定位置插入元素.front_insert_iterator 只适用于前插顺序容器(双端队列和列表), back_insert_iterator insert_iterator 适用于所有顺序容器。</p>\n<p>插入迭代器的实例可以通过构造函数来创建，但一般无须直接调用构造函数，而是可以通过下面的三个辅助函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> FrontlnsertionSequence&gt; </span></span><br><span class=\"line\"><span class=\"function\">front_insert_iterator&lt;FrontlnsertionSequence&gt; <span class=\"title\">front_inserter</span><span class=\"params\">(FrontlnsertionSequence&amp; s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> Sequence&gt; </span></span><br><span class=\"line\"><span class=\"function\">back_insert_iterator&lt;Sequence&gt; <span class=\"title\">back_inserter</span><span class=\"params\">(Sequence&amp; s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> Sequence , <span class=\"keyword\">class</span> Iterator&gt; </span></span><br><span class=\"line\"><span class=\"function\">insert_iterator&lt;Sequence&gt; <span class=\"title\">inserter</span><span class=\"params\">(Sequence&amp; s , Iterator i)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>使用辅助函数与直接使用构造函数的优点在于，辅助函数是一般的函数模板，调用时可以自动推导类型参数而无须显式将其给出，从而使代码变得更简短，因此人们一般用辅助函数代替构造函数。</p>\n<h4 id=\"顺序容器的适配器\">顺序容器的适配器<a title=\"#顺序容器的适配器\" href=\"#顺序容器的适配器\"></a></h4>\n<p>STL 提供的<code>容器适配器找(stack) 和队列 (queue)</code> ，就是对顺序容器的封装。如果使用时不指定第二个参数，则默认使用双端队列容器。</p>\n<p><code>template&lt;class T, class Sequence=deque&lt;T&gt;&gt;class stack; </code><br>\n<code>template&lt;class T , class FrontInsertonSequence = deque&lt;T&gt; &gt; class queue;</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tstack&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;&gt; s;     <span class=\"comment\">// 使用容器适配器将vector的接口转换成stack的接口</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">top</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优先队列适配器<br>\n<code>template&lt; class T, class Sequence= lector&lt;T&gt;&gt;class priority_queue;</code></p>\n<p>优先级队列的基础容器必须是支持随机访问的顺序容器，因此它必须是向量容器或双端队列容器，默认为向量容器。优先级队列也像栈和队列一样支持元素的压人和弹出，但元素弹出的顺序与压入的顺序无关，而是与元素的大小有关，每次弹出的总是容器中最&quot;大&quot;的一个元素。</p>\n<h3 id=\"关联容器\">关联容器<a title=\"#关联容器\" href=\"#关联容器\"></a></h3>\n<p>对于关联容器而言，它的每个元素都有一个键 (key) ，容器中元素的顺序按照键的取值升序排列<br>\n而关联容器会将元素根据键的大小组织在一棵<code>&quot;平衡二又树&quot;</code>中，最坏情况下只需要大约<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.379ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -791.3 2315.9 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">log_2{n}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"298\" y=\"0\"></use>\n<g transform=\"translate(784,0)\">\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-32\" x=\"675\" y=\"-213\"></use>\n</g>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1715\" y=\"0\"></use>\n</g>\n</svg>次比较就可根据键来查找一个元素。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305202208329.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>简单关联容器只有一个类型参数，该类型既是键类型，又是容器类型; 二元关联容器则有两个类型参数，前一个是键类型，后一个是附加数据的类型，二元关联容器的元素类型是键类型和附加数据类型的组合，这种组合类型可以用一个<code>二元组 (pair)</code>来表示， <code>pair 是 &lt;utility&gt; 头文件中定义的结构体模板</code>.</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th style=\"padding:0\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>S s(q1, q2)</code>   `</td>\n<td style=\"text-align:left\">迭代器 [q1， q2) 区间内的数据作为 的元素构造</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.ínsert (t)  </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert( p1 , t)  </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.insert(q1 , q2)  </code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.erase( p1)   </code></td>\n<td style=\"text-align:left\">删除 p1 所指向的元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.erase( p1 , p2)  </code></td>\n<td style=\"text-align:left\">删除 [p1 p2) 区间内的元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.erase( k)  </code></td>\n<td style=\"text-align:left\">删除所有键为 的元素，返回被删除元素的个数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.find(k)    </code></td>\n<td style=\"text-align:left\">找到任意一个键为k的元素，返回该元素的迭代器，如果没有键为k的元素，则返回 s.end()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.lower_bound(k)  </code></td>\n<td style=\"text-align:left\">得到 s中第一个键值不小于k的元素的迭代器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.upper_bound(k)  </code></td>\n<td style=\"text-align:left\">得到 s 中第一个键值大于k的元素的迭代器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.equal_range(k)   </code></td>\n<td style=\"text-align:left\">得到一个用 pair&lt;S::iterator , S::iterator&gt; 表示的区间，记为 [pl. p2) 。该区间刚好包含所有键为k的元素 p1==s.lower_bound(k) p2==s.upper_bound(k) 一定成立。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>s.count(k)   </code></td>\n<td style=\"text-align:left\">得到容器中键为k的元素个数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">关联容器的插入和删除操作不会使任何已有的迭代器、指针或引用失效。</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"set\">set<a title=\"#set\" href=\"#set\"></a></h4>\n<p>集合用来存储一组无重复的元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tset&lt;string&gt; s;</span><br><span class=\"line\">\ts.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;happy&quot;</span>);</span><br><span class=\"line\">\tpair&lt;set&lt;string&gt;::iterator, <span class=\"type\">bool</span>&gt; res = s.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;happy&quot;</span>);</span><br><span class=\"line\">\tcout &lt;&lt; res.second &lt;&lt; endl;  <span class=\"comment\">// 0</span></span><br><span class=\"line\">\ts.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;good&quot;</span>);</span><br><span class=\"line\">\ts.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;funk&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;string&gt;(cout, <span class=\"string\">&quot; &quot;</span>)); <span class=\"comment\">// funk good happy</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map\">map<a title=\"#map\" href=\"#map\"></a></h4>\n<p>映射的元素类型是由键和附加数据所构成的二元组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tmap&lt;string, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">\tm.<span class=\"built_in\">insert</span>(<span class=\"built_in\">pair</span>&lt;string, <span class=\"type\">int</span>&gt;(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>));</span><br><span class=\"line\">\tm.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;lisi&quot;</span>, <span class=\"number\">39</span>));</span><br><span class=\"line\">\tm.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;wangwu&quot;</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">\tm.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"number\">92</span>));</span><br><span class=\"line\">\tm.<span class=\"built_in\">erase</span>(<span class=\"string\">&quot;slacr&quot;</span>);</span><br><span class=\"line\">\tm[<span class=\"string\">&quot;lisi&quot;</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (pair&lt;string, <span class=\"type\">int</span>&gt; entry : m) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; entry.first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; entry.second &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//lisi 100</span></span><br><span class=\"line\">\t<span class=\"comment\">//wangwu 10</span></span><br><span class=\"line\">\t<span class=\"comment\">//zhangsan 18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数对象\">函数对象<a title=\"#函数对象\" href=\"#函数对象\"></a></h2>\n<p>函数对象 (function object / functor) STL 提供的一类主要组件，它使得 STL应用更加灵活方便，从而增强了算法的通用性。大多数 STL 算法可以用一个函数对象作为参数。所谓函数对象其实就是一个行为类似函数的对象，它可以不需参数，也可以带有若干参数，其功能是获取一个值，或者改变操作的状态。在 C++程序设计中.任何普通的函数和任何重载了调用运算符 operator() 的类的对象都满足函数对象的特征，因此都可以作为函数对象传递给算法作为参数使用。</p>\n<p>常用的函数对象可分为<code>产生器 (generator) 、一元函数 (unary function) 、二元函数( binary function) 、一元谓词 (unary predicate) 和二元谓词 (binary predicate)</code> 函数对象五大类。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211301289.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">muti</span><span class=\"params\">(T t1, T t2)</span> </span>&#123; <span class=\"keyword\">return</span> t1 * t2; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myplus</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(T t1, T t2)</span> </span>&#123; <span class=\"keyword\">return</span> t1 + t2; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; l;</span><br><span class=\"line\">\tl.<span class=\"built_in\">push_back</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tl.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tl.<span class=\"built_in\">push_back</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">accumulate</span>(l.<span class=\"built_in\">begin</span>(), l.<span class=\"built_in\">end</span>(), <span class=\"number\">1</span>, muti&lt;<span class=\"type\">int</span>&gt;) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">accumulate</span>(l.<span class=\"built_in\">begin</span>(), l.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>, <span class=\"built_in\">myplus</span>&lt;<span class=\"type\">int</span>&gt;()) &lt;&lt; endl;   <span class=\"comment\">// 仿函数， 这里的muplus&lt;int&gt;()整体是函数名，括号是重载的运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"产生器-(generator)-一元函数-(unary-function)-二元函数-(binary-function)\">产生器 (generator) 一元函数 (unary function) 二元函数 (binary function)<a title=\"#产生器-(generator)-一元函数-(unary-function)-二元函数-(binary-function)\" href=\"#产生器-(generator)-一元函数-(unary-function)-二元函数-(binary-function)\"></a></h3>\n<p>将具有 0 个、 1 个和 2 个传入参数的函数对象，分别称为产生器( generator) 、一元函数 (unary function) 和二元函数 (binary function).</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211351157.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>调用这些标准函数对象，需要包含头文件 <functional> 。标准函数对象是内联函数。</p>\n<h3 id=\"一元谓词-(unary-predicate)-二元谓词-(binary-predicate)\">一元谓词 (unary predicate) 二元谓词 (binary predicate)<a title=\"#一元谓词-(unary-predicate)-二元谓词-(binary-predicate)\" href=\"#一元谓词-(unary-predicate)-二元谓词-(binary-predicate)\"></a></h3>\n<p>这种函数对象要求<code>返回值为 bool 型</code>，并具有一个或两个参数，称之为一元谓词或二元谓词函数对象。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211353234.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vi</span><span class=\"params\">(arr, arr + <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(vi.<span class=\"built_in\">begin</span>(), vi.<span class=\"built_in\">end</span>(), <span class=\"built_in\">less</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(vi.<span class=\"built_in\">begin</span>(), vi.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关联类型-(associated-types)\">关联类型 (associated types)<a title=\"#关联类型-(associated-types)\" href=\"#关联类型-(associated-types)\"></a></h3>\n<p>STL 中，定义了两个函数对象的基类 <code>unary_function binary_function</code> ，分别用于设计一元函数对象和二元函数对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">my_binary_pred</span> : <span class=\"keyword\">public</span> binary_function&lt;pair&lt;string, <span class=\"type\">int</span>&gt;, pair&lt;string, <span class=\"type\">int</span>&gt;, <span class=\"type\">bool</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(pair&lt;string, <span class=\"type\">int</span>&gt; p1, pair&lt;string, <span class=\"type\">int</span>&gt; p2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p1.second &lt; p2.second;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;pair&lt;string, <span class=\"type\">int</span>&gt;&gt; sheet;</span><br><span class=\"line\">\tsheet.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;slacr&quot;</span>, <span class=\"number\">98</span>));</span><br><span class=\"line\">\tsheet.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;Tim&quot;</span>, <span class=\"number\">66</span>));</span><br><span class=\"line\">\tsheet.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;Jose&quot;</span>, <span class=\"number\">54</span>));</span><br><span class=\"line\">\tsheet.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;frank&quot;</span>, <span class=\"number\">99</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(sheet.<span class=\"built_in\">begin</span>(), sheet.<span class=\"built_in\">end</span>(), <span class=\"built_in\">my_binary_pred</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (pair&lt;string, <span class=\"type\">int</span>&gt; p : sheet) &#123; cout &lt;&lt; p.first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数适配器\">函数适配器<a title=\"#函数适配器\" href=\"#函数适配器\"></a></h3>\n<p>函数适配器实现了这一功能，将一种函数对象转化为另一种符合要求的函数对象。函数适配器可以分为4大类: <code>绑定适配器(bind adaptor) 、组合适配器 (composite adaptor) 、指针函数适配器 (pointer function adaptor) 和成员函数适配器 (member function adaptor)</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211427779.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>直接构造 STL 中的函数适配器通常会导致冗长的类型声明。为简化函数适配器的构造 .STL 还提供了函数适配器辅助函数. 借助于泛型自动推断技术，无<br>\n须显式的类型声明便可实现函数适配器的构造。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211428889.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">greater&lt;<span class=\"type\">int</span>&gt; g;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">greater5</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">g</span>(x, <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">find_if</span>(arr, arr + <span class=\"number\">5</span>, greater5)) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;find it&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;  <span class=\"comment\">// find it</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// std::binder2nd&lt;_Fn&gt;::binder2nd(const _Fn &amp; _Func, const typename _Fn::second_argument_type &amp; _Right)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">find_if</span>(arr, arr + <span class=\"number\">5</span>, <span class=\"built_in\">bind2nd</span>(<span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"number\">5</span>))) &#123; </span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;find it&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123; <span class=\"keyword\">return</span> x &gt; y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span> , <span class=\"number\">60</span>, <span class=\"number\">70</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> len = <span class=\"keyword\">sizeof</span> arr / <span class=\"keyword\">sizeof</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(arr, arr + len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator p;</span><br><span class=\"line\">\tp = <span class=\"built_in\">find_if</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">bind2nd</span>(<span class=\"built_in\">ptr_fun</span>(g), <span class=\"number\">40</span>)); <span class=\"comment\">// 指针函数适配器</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;none&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp = <span class=\"built_in\">find_if</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">not1</span>(<span class=\"built_in\">bind2nd</span>(<span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"number\">40</span>)));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;none&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp = <span class=\"built_in\">find_if</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">bind2nd</span>(<span class=\"built_in\">not2</span>(<span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;()), <span class=\"number\">40</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;none&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;found&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"算法\">算法<a title=\"#算法\" href=\"#算法\"></a></h2>\n<p>算法本身就是一种函数模板。STL 的算法是通用的:每个算法都适合于若干种不同的数据结构.<br>\n算法不是直接使用容器作为参数，而是使用迭代器类型。<br>\nSTL 的算法可以分为4大类: <code>不可变序列算法、可变序列算法、排序和搜索算法、数值算法</code></p>\n<h3 id=\"不可变序列算法\">不可变序列算法<a title=\"#不可变序列算法\" href=\"#不可变序列算法\"></a></h3>\n<p><code>不可变序列算法 (non-mutating algorithms)</code> 是指那些不直接修改所操作的容器内容的算法。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211534012.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123; <span class=\"keyword\">return</span> x &gt; y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v1</span><span class=\"params\">(arr, arr+len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> sub_arr[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">\tlen = <span class=\"built_in\">sizeof</span>(sub_arr)/ <span class=\"built_in\">sizeof</span>(sub_arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(sub_arr, sub_arr + len)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; *<span class=\"built_in\">adjacent_find</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>()) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 找出第一个相邻元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">count_if</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), <span class=\"built_in\">bind2nd</span>(<span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"number\">5</span>)) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 统计大于5的元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *<span class=\"built_in\">find_if</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), <span class=\"built_in\">bind2nd</span>(<span class=\"built_in\">less</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"number\">2</span>)) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 找出第一个小于2的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *<span class=\"built_in\">search</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>()) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 找出子序列在原序列中第一次出现位置的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *<span class=\"built_in\">search_n</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;()) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 找出第一次连续出现3个&gt;4的元素的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">equal</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>()) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断两个序列是否相等</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpair&lt;vector&lt;<span class=\"type\">int</span>&gt;::iterator, vector&lt;<span class=\"type\">int</span>&gt;::iterator&gt; res = <span class=\"built_in\">mismatch</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 查找v2在v1中不匹配的首位置    </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可变序列算法\">可变序列算法<a title=\"#可变序列算法\" href=\"#可变序列算法\"></a></h3>\n<p>可变序列算法 (mutating algorithms) 可以修改它们所操作的容器的元素。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211604573.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myGenerator</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建随机数生成器</span></span><br><span class=\"line\">\t\trandom_device rd;</span><br><span class=\"line\">\t\t<span class=\"function\">mt19937 <span class=\"title\">gen</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建分布器</span></span><br><span class=\"line\">\t\tuniform_int_distribution&lt;&gt; <span class=\"built_in\">dis</span>(<span class=\"number\">1</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成随机数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">dis</span>(gen);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123; <span class=\"keyword\">return</span> x &gt; y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"built_in\">sizeof</span>(arr) / <span class=\"built_in\">sizeof</span>(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v1</span><span class=\"params\">(arr, arr+len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> sub_arr[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">\tlen = <span class=\"built_in\">sizeof</span>(sub_arr)/ <span class=\"built_in\">sizeof</span>(sub_arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(sub_arr, sub_arr + len)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ostream_iterator&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">output</span><span class=\"params\">(cout, <span class=\"string\">&quot; &quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">fill</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 将v1填充 0 </span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">generate</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), <span class=\"built_in\">myGenerator</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 生成每一个元素为随机值</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">remove_copy</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), <span class=\"built_in\">back_inserter</span>(v2), <span class=\"number\">5</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 删除v1小于5的元素并放到v2后</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv2.<span class=\"built_in\">erase</span>(<span class=\"built_in\">remove_if</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), <span class=\"built_in\">bind2nd</span>(<span class=\"built_in\">less</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"number\">4</span>)));</span><br><span class=\"line\">\t<span class=\"comment\">// 删除v2小于4的值, 只用remove_if不会清除原来空间</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">replace</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), <span class=\"number\">4</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 将v2中4改为0</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">reverse</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 逆序</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">rotate_copy</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">begin</span>() + <span class=\"number\">4</span>, v2.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\">\t<span class=\"comment\">// 将两个区间旋转输出, 不会改变原容器</span></span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">temp</span><span class=\"params\">(v2)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">rotate_copy</span>(temp.<span class=\"built_in\">begin</span>(), temp.<span class=\"built_in\">begin</span>() + <span class=\"number\">4</span>, temp.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 旋转序列改变原序列.</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), output);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"排序和搜索算法\">排序和搜索算法<a title=\"#排序和搜索算法\" href=\"#排序和搜索算法\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211709365.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>sort 要求 first last 必须是随机迭代器类型，因为 sort 的具体实现使用了快速排序算法，使用随机迭代器是出于效率上的考虑。<br>\nstable_sort 原型声明和 sort 几乎相同，它的不同之处在于，对于相等数值的元素，排序前后的相对位置将保持不变。</p>\n<p>lower_bound函数返回指向第一个大于或等于指定值的元素的迭代器，如果所有元素都小于指定值，则返回容器的end()迭代器。<br>\nupper_bound函数返回指向第一个大于指定值的元素的迭代器，如果所有元素都小于或等于指定值，则返回容器的end()迭代器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">24</span>, <span class=\"number\">32</span>, <span class=\"number\">42</span>, <span class=\"number\">51</span>, <span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">54</span> &#125;;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(arr, arr + <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]))</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr1[] = &#123; <span class=\"number\">39</span>, <span class=\"number\">54</span>, <span class=\"number\">87</span>, <span class=\"number\">43</span> &#125;;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(arr1, arr1 + <span class=\"keyword\">sizeof</span>(arr1) / <span class=\"keyword\">sizeof</span>(arr1[<span class=\"number\">0</span>]))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator p = <span class=\"built_in\">max_element</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 计算区间最值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> n = p - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> dist = <span class=\"built_in\">distance</span>(v.<span class=\"built_in\">begin</span>(), p); <span class=\"comment\">// 这个函数也可以算</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;max_e: &quot;</span> &lt;&lt; *p &lt;&lt; <span class=\"string\">&quot; idx: &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; distance: &quot;</span> &lt;&lt; dist &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v1</span><span class=\"params\">(<span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">partial_sort_copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 将v局部排序并拷贝到其他容器, v本身不变化</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">\t<span class=\"comment\">// 降序排列</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *<span class=\"built_in\">lower_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">50</span>, <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;()) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 默认的lower_bound必须要求按照升序排序后才行, 之前是是按降序排序的，这里也要传一个相同的谓词</span></span><br><span class=\"line\">\tcout &lt;&lt; *<span class=\"built_in\">upper_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">50</span>, <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;()) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">binary_search</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">32</span>, <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;()) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v3</span><span class=\"params\">(v.size() + v2.size())</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">merge</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), v3.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 将v，v2合并到v3中</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v3.<span class=\"built_in\">begin</span>(), v3.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\trandom_device rd;</span><br><span class=\"line\">\t<span class=\"function\">mt19937 <span class=\"title\">g</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">shuffle</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), g);</span><br><span class=\"line\">\t<span class=\"comment\">// 打乱元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">nth_element</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">begin</span>() + <span class=\"number\">2</span>, v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 保证在第n个位置之前的元素都小于等于第n个元素，而在第n个位置之后的元素都大于等于第n个元素。这个能更高效部分查找</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">stable_sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 稳定的排序， 保持相对位置</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">inplace_merge</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">begin</span>()+<span class=\"number\">2</span>, v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 合并两个有序序列， 保存到原序列</span></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">lexicographical_compare</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>()) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 按字典顺序比较 // 1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值算法\">数值算法<a title=\"#数值算法\" href=\"#数值算法\"></a></h3>\n<p>STL 提供了 个通用数值算法。为了调用此类算法，需要包含头文件<numeric>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305211826812.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"扩展\">扩展<a title=\"#扩展\" href=\"#扩展\"></a></h2>\n<h3 id=\"利用函数对象的类型特征实现函数适配器\">利用函数对象的类型特征实现函数适配器<a title=\"#利用函数对象的类型特征实现函数适配器\" href=\"#利用函数对象的类型特征实现函数适配器\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将二元函数转换成一元函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">BinaryFunction</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">binder1st</span> : <span class=\"keyword\">public</span> unary_function&lt;</span><br><span class=\"line\">\t<span class=\"keyword\">typename</span> BinaryFunction::second_argument_type,</span><br><span class=\"line\">\t<span class=\"keyword\">typename</span> BinaryFunction::result_type&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tBinaryFunction op;</span><br><span class=\"line\">\t<span class=\"keyword\">typename</span> BinaryFunction::first_argument_type value;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">binder1st</span>(<span class=\"type\">const</span> BinaryFunction&amp; op, <span class=\"type\">const</span> <span class=\"keyword\">typename</span> BinaryFunction::first_argument_type &amp; value) : <span class=\"built_in\">op</span>(op), <span class=\"built_in\">value</span>(value) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载()</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">typename</span> Operation::result_type <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">typename</span> BinaryFunction::second_argument_type&amp; x)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">op</span>(value, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>c++ 标准规定，凡是在模板中引用的、依赖于模板参数的数据类型，必须用 <code>typename</code> 修饰，否则该标识符就不被解析为一个数据类型。</p>\n<h3 id=\"迭代器的类型特征\">迭代器的类型特征<a title=\"#迭代器的类型特征\" href=\"#迭代器的类型特征\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305212044790.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>两个指针相减得到的数值的类型就是 ptrdiff_t</p>\n<p>iterator_category 起到了非常特殊的作用，它可以是下面个结构体之一。</p>\n<p>struct input iterator tag { };<br>\nstruct output_iterator_tag { };<br>\nstruct forward iterator tag: public input iterator tag { };<br>\nstruct bidirectional_iterator_tag: public forward_iterator_tag { };<br>\nstruct random access iterator tag: public bidirectional iterator tag { };</p>\n<p>5个结构体全部定义在 <iterator> 头文件中，它们都不具有任何成员，只<code>用来表示一个迭代器所属的分类</code>。其中<code>每个结构体对应于一种迭代器概念</code>，迭代器之间的继承关系也与相应概念及其子概念之间的关系一致。</p>\n<p>与函数对象的 unary_function binary_function 这两个关联类型类似，迭代器也有相应的关联类型 iterator ，它也定义在 <iterator> 头文件中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">Category</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">Distance</span> = <span class=\"type\">ptrdiff_t</span>,</span><br><span class=\"line\"><span class=\"keyword\">class</span> Pointer = T*， <span class=\"keyword\">class</span> Reference = T&amp;&gt; </span><br><span class=\"line\"><span class=\"keyword\">struct</span> iterator &#123; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> T value type; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Distance difference type; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Pointer poi teri</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Reference reference; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Category iterator_category;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当定义自己的迭代器时，元须分别定义各个类型特征，只要继承 iterator 类即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IncrementIterator</span> : <span class=\"keyword\">public</span> iterator&lt;input_iterator_tag, T, <span class=\"type\">ptrdiff_t</span>, <span class=\"type\">const</span> T*, <span class=\"type\">const</span> T&amp;&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT value;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> IncrementIterator&lt;T&gt; Self;</span><br><span class=\"line\">\t<span class=\"built_in\">IncrementIterator</span>(<span class=\"type\">const</span> T&amp; value = <span class=\"built_in\">T</span>()) : <span class=\"built_in\">value</span>(value) &#123;&#125;  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== (<span class=\"type\">const</span> Self&amp; rhs) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> value == rhs.value; &#125;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!= (<span class=\"type\">const</span> Self&amp; rhs) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> value != rhs.value; &#125;</span><br><span class=\"line\">\tSelf&amp; <span class=\"keyword\">operator</span>++() &#123; value++; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125; <span class=\"comment\">// 前缀++</span></span><br><span class=\"line\">\tSelf&amp; <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>) &#123;\t\t\t\t<span class=\"comment\">// 后缀++</span></span><br><span class=\"line\">\t\tSelf tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\tvalue++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>*() <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\">\t<span class=\"type\">const</span> T* <span class=\"keyword\">operator</span>-&gt;() <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> &amp;value; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(<span class=\"built_in\">IncrementIterator</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"built_in\">IncrementIterator</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">10</span>), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"type\">int</span> s[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">transform</span>(s, s + <span class=\"built_in\">sizeof</span>(s) / <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>), <span class=\"built_in\">IncrementIterator</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>), <span class=\"built_in\">plus</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">\t<span class=\"comment\">//template&lt;class InputIt1, class InputIt2, class OutputIt, class BinaryOperation&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tOutputIt transform(InputIt1 first1, InputIt1 last1, InputIt2 first2, OutputIt d_first, BinaryOperation binary_op);</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这个transform是一个重载版本, 有两个输入迭代器, 处理函数是plus, 输出迭代器ostream_iterator</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1 3 5 7 9</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用类型特征实现算法\">利用类型特征实现算法<a title=\"#利用类型特征实现算法\" href=\"#利用类型特征实现算法\"></a></h3>\n<p><iterator>头文件中提供了一个作为助手的模板 <code>iterator_tralts</code> ，使用它可以以统一的方式得到包括指针在内的<code>各种迭代器的类型特征</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">Iterator</span>&gt;<span class=\"keyword\">struct</span> <span class=\"title class_\">iterator_traits</span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Iterator::difference_type difference_type; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Iterator::value_type value_type; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Iterator::pointer pointer; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Iterator:: reference reference; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> Iterator::iterator_category iterator_category;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;iterator&gt; 中还对 iterator_traits 进行了偏特化:</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;<span class=\"keyword\">struct</span>  <span class=\"title class_\">iterator_traits</span> &lt;T*&gt;&#123; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">ptrdiff_t</span> difference_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> T value_type; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> T* pointer;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> T&amp; reference;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> random_access_iterator_tag iterator_category;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt; <span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt; <span class=\"keyword\">struct</span> <span class=\"title class_\">iterator_traits</span>&lt;<span class=\"type\">const</span> T*&gt; &#123; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">ptrdiff_t</span> difference_type; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> T value_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">const</span> T* pointer; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">const</span> T&amp; reference; </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> random_access_iterator_tag iterator_category;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以把一个迭代器类型作为它的模板参数，该模板中定义了 种迭代器的类型特征，这些特征分别使用作为模板参数的迭代器的相应类型特征来定义。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> InputIterator, <span class=\"keyword\">class</span> OutputIterator&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySort</span><span class=\"params\">(InputIterator first, InputIterator last, OutputIterator result)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"keyword\">typename</span> iterator_traits&lt;InputIterator&gt;::value_type&gt; <span class=\"built_in\">s</span>(first, last);</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>(), result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> a[<span class=\"number\">5</span>] = &#123; <span class=\"number\">3.1</span>, <span class=\"number\">4</span>,<span class=\"number\">3</span>, <span class=\"number\">8.4</span>, <span class=\"number\">2.0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">mySort</span>(a, a + <span class=\"number\">5</span>, <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">double</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">mySort</span>(<span class=\"built_in\">istream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cin), <span class=\"built_in\">istream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(), <span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">int</span>&gt;(cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h3>\n<ol>\n<li>删除向量容器的元素时，并不会使空闲的空间被释放，这时可以使用下面的语句达到释放多余空间的目的 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;T&gt; (s .begin() s.end()).swap(s);</span><br></pre></td></tr></table></figure>\n</li>\n<li>C++ 中，接口通常通过纯虚函数或接口类来定义，并被用于实现多态和接口隔离等设计模式。</li>\n<li>mem_fn函数是一个类模板，用于将一个成员函数转换为一个普通函数对象。</li>\n<li>Boost库: Boost 社区和 c++ 标准委员会具有非常密切的联系。Boost 中的一部分程序库是对 TR1 的实现，所谓 TR1 (C++ Technical Report 1)是指 c++ 标准委员会发布的一个文档，文档中定义了对C++标准库的一些扩展，TR1 即将被纳入下一版 c++ 标准。</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/05/01/[C++%E7%AC%94%E8%AE%B0]%E7%BE%A4%E4%BD%93%E7%B1%BB%E5%92%8C%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E4%BA%8C/",
            "url": "https://s1acr.github.io/2023/05/01/[C++%E7%AC%94%E8%AE%B0]%E7%BE%A4%E4%BD%93%E7%B1%BB%E5%92%8C%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E4%BA%8C/",
            "title": "[C++笔记]群体类和群体数据的组织二",
            "date_published": "2023-05-01T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>C++笔记</p>\n</blockquote>\n<p>模板实现几个常见的排序/查找算法<br>\n每个算法都有很多种实现方式, 懂得其内在思想才是最重要的.</p>\n<h2 id=\"排序\">排序<a title=\"#排序\" href=\"#排序\"></a></h2>\n<h3 id=\"插入排序\">插入排序<a title=\"#插入排序\" href=\"#插入排序\"></a></h3>\n<p>插入排序的基本思想是: 每一步将一个待排序元素按其关键字值的大小插入到己排序序列的适当位置上，直到待排序元素插入完为止。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\tT temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;  <span class=\"comment\">// 从第2个数开始, 依次往后扫描, 插入后面 len - 1 个数</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> j = i;\t\t\t\t\t<span class=\"comment\">// 每次要插的数的位置</span></span><br><span class=\"line\">\t\tT temp = arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j - <span class=\"number\">1</span>]) &#123;\t<span class=\"comment\">// 前i个数位置正确, 从后往前找到正确位置</span></span><br><span class=\"line\">\t\t\tarr[j] = arr[j - <span class=\"number\">1</span>];\t\t\t\t<span class=\"comment\">// 后移一位</span></span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 退出循环, 插入位置已找到</span></span><br><span class=\"line\">\t\tarr[j] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 另一种</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(T* arr, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(T* arr, <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 模板插入排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; arr[j] &lt; arr[j<span class=\"number\">-1</span>] &amp;&amp; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">\t\t\tT temp = arr[j];</span><br><span class=\"line\">\t\t\tarr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\tarr[j - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printArr</span>(arr, len);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> data[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">15</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>,<span class=\"number\">14</span>,<span class=\"number\">16</span>,<span class=\"number\">18</span>,<span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"keyword\">sizeof</span> data / <span class=\"keyword\">sizeof</span> data[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">insertSort</span>&lt;<span class=\"type\">int</span>&gt;(data, len);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305142015373.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"选择排序\">选择排序<a title=\"#选择排序\" href=\"#选择排序\"></a></h3>\n<p>选择排序的基本思想是:每次从待排序序列中选择一个关键字最小的元素(当需要按关键字升序排列时) ，顺序排在已排序序列的最后，直至全部排完。在选择类排序方法中，根据从待排序序列中选择元素的方法不同，又分为不同的选择排序方法。其中最简单的是通过顺序比较找出待排序序列中的最小元素，称为直接选择排序.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class=\"line\">\tT temp = x;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">\ty = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;\t\t<span class=\"comment\">// 选择len-1次</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min_idx = i;\t\t\t<span class=\"comment\">// 初始最小假设idx 为 i</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;\t\t<span class=\"comment\">// 从 i +1 开始往后依次比较</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &lt; arr[min_idx]) &#123;</span><br><span class=\"line\">\t\t\t\tmin_idx = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 得到min_idx</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (min_idx == i) <span class=\"keyword\">continue</span>;\t\t<span class=\"comment\">// 位置正确, 无需交换\t</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>&lt;T&gt;(arr[i], arr[min_idx]);\t\t<span class=\"comment\">// 交换</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"交换排序\">交换排序<a title=\"#交换排序\" href=\"#交换排序\"></a></h3>\n<p>交换排序的基本思想是: 两两比较待排序序列中的元素，并交换不满足顺序要求的各对元素，直到全部满足顺序要求为止。最简单的交换排序方法是冒泡排序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;\t\t\t\t<span class=\"comment\">// n-1趟</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;\t\t<span class=\"comment\">// 每趟使最大的一项交换到最后</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) <span class=\"built_in\">swap</span>(arr[j], arr[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查找\">查找<a title=\"#查找\" href=\"#查找\"></a></h2>\n<h3 id=\"顺序查找\">顺序查找<a title=\"#顺序查找\" href=\"#顺序查找\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sequentialSearch</span><span class=\"params\">(<span class=\"type\">const</span> T arr[], <span class=\"type\">int</span> len, <span class=\"type\">const</span> T&amp; key)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] == key) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"折半/二分查找\">折半/二分查找<a title=\"#折半/二分查找\" href=\"#折半/二分查找\"></a></h3>\n<p>如果是在一个元素排列有序的数组中进行查找，可以采用折半查找方法。折半查找方法的基本思想是:对于已接关键字排序的序列，经过一次比较后，可将序列分割成两部分，然后只在有可能包含待查元素的一部分中继续查找，并根据试探结果继续分割，逐步缩小查找范围，直至找到或找不到为止。</p>\n<p>本质是减制, 还可以递归实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"type\">const</span> T arr[], <span class=\"type\">const</span> <span class=\"type\">int</span> len, <span class=\"type\">const</span> T&amp; key)</span>  </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> high = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> mid = (low + high) / <span class=\"number\">2</span>;\t\t<span class=\"comment\">// 中间元素下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key == arr[mid]) <span class=\"keyword\">return</span> mid;\t\t<span class=\"comment\">// 查找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; arr[mid]) high = mid - <span class=\"number\">1</span>;  <span class=\"comment\">// 在左半边, 重新置high</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;\t\t\t\t\t\t  <span class=\"comment\">// 在右半边, 重新置low</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;\t\t\t\t<span class=\"comment\">// 没有查找到 返回-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模板的实例化\">模板的实例化<a title=\"#模板的实例化\" href=\"#模板的实例化\"></a></h2>\n<p>类模板本身不是类, 函数模板也不是函数, 只有实例化之后才能当类/函数使用.</p>\n<p>模板的实例化是按需进行的，用到哪个类型就生成针对哪个类型的函数或类，不会提前生成过多的代码。也就是说，编译器会根据传递给类型参数的实参（也可以是编译器自己推演出来的实参）来生成一个特定版本的函数或类，并且相同的类型只生成一次。实例化的过程也很简单，就是将所有的类型参数用实参代替。</p>\n<p>另外需要注意的是类模板的实例化，通过类模板创建对象时并不会实例化所有的成员函数，只有等到真正调用它们时才会被实例化；如果一个成员函数永远不会被调用，那它就永远不会被实例化。这说明类的实例化是延迟的、局部的，编译器并不着急生成所有的代码。</p>\n<p>通过类模板创建对象时，一般只需要实例化成员变量和构造函数。成员变量被实例化后就能够知道对象的大小了（占用的字节数），构造函数被实例化后就能够知道如何初始化了；对象的创建过程就是分配一块大小已知的内存，并对这块内存进行初始化。</p>\n<p><code>通常模板的实例化是在调用函数或者创建对象时由编译器自动完成的，不需要程序员引导，因此称为隐式实例化。相对应的，我们也可以通过代码明确地告诉编译器需要针对哪个类型进行实例化，这称为显式实例化</code>。</p>\n<p>编译器在实例化的过程中需要知道模板的所有细节：对于函数模板，也就是函数定义；对于类模板，需要同时知道类声明和类定义。我们必须将显式实例化的代码放在包含了模板定义的源文件中，而不是仅仅包含了模板声明的头文件中。这样一来，就可以把模板的声明和定义放在不同文件里面了。</p>\n<h3 id=\"显式实例化实现模板分文件\">显式实例化实现模板分文件<a title=\"#显式实例化实现模板分文件\" href=\"#显式实例化实现模板分文件\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ================= templ.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a, T&amp; b)</span></span>;\t\t<span class=\"comment\">// 函数模板声明</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">TestClass</span> &#123;             <span class=\"comment\">// 类模板声明</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ================= templ.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;templ.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a, T&amp; b)</span>  <span class=\"comment\">//函数模板实现</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"type\">void</span> <span class=\"built_in\">swap</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"type\">int</span>&amp; a, <span class=\"type\">int</span>&amp; b);\t<span class=\"comment\">// 函数模板显示实例化, 会在生成当前源文件的该类型函数目标代码</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// &lt;int&gt;可以不写, 编译器自动类型识别</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;                           <span class=\"comment\">// 类模板的实现</span></span><br><span class=\"line\"><span class=\"type\">void</span> TestClass&lt;T&gt;::<span class=\"built_in\">showType</span>() &#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"built_in\">typeid</span>(T).<span class=\"built_in\">name</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestClass</span>&lt;<span class=\"type\">int</span>&gt; ;\t\t<span class=\"comment\">// 类模板显示实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ================= main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;templ.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">\tstd::cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\tTestClass&lt;<span class=\"type\">int</span>&gt; t;</span><br><span class=\"line\">\tt.<span class=\"built_in\">showType</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// TestClass&lt;float&gt; f;\t// 这句能过编译, 编译器生成的构造函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// f.showType();\t    // 错误没有实例化的函数成员, 源文件只显示实例化了 TestClass&lt;int&gt; 型</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"模板的特化\">模板的特化<a title=\"#模板的特化\" href=\"#模板的特化\"></a></h2>\n<p>模板是一种泛型技术，它能接受的类型是宽泛的、没有限制的，并且对这些类型使用的算法都是一样的（函数体或类体一样）。让模板能够针对某种具体的类型使用不同的算法（函数体或类体不同），这在 C++ 中是可以做到的，这种技术称为模板的<code>显式具体化（Explicit Specialization）</code>。</p>\n<p>通常模板的实例化是在调用函数或者创建对象时由编译器自动完成的，不需要程序员引导，因此称为隐式实例化。相对应的，我们也可以通过代码明确地告诉编译器需要针对哪个类型进行实例化，这称为显式实例化。</p>\n<p>在 C++ 中，对于给定的函数名，可以有非模板函数、模板函数、显示具体化模板函数以及它们的重载版本，在调用函数时，<code>显示具体化优先于常规模板，而非模板函数优先于显示具体化和常规模板</code>。</p>\n<p>模板类调用优先级从高到低进行排序是：全特化类 &gt; 偏特化类 &gt; 主版本模板类</p>\n<h3 id=\"函数显示具体化\">函数显示具体化<a title=\"#函数显示具体化\" href=\"#函数显示具体化\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">float</span> score;</span><br><span class=\"line\">&#125; STU;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"type\">const</span> T&amp; <span class=\"title\">Max</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; a, <span class=\"type\">const</span> T&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"type\">const</span> STU&amp; <span class=\"built_in\">Max</span>&lt;STU&gt;(<span class=\"type\">const</span> STU&amp; a, <span class=\"type\">const</span> STU&amp; b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.score &gt; b.score ? a : b;</span><br><span class=\"line\">    <span class=\"comment\">// 显示实例化， &lt;STU&gt;可省略， 由编译器自动推导.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt; (ostream&amp; out, <span class=\"type\">const</span> STU&amp; stu) &#123;</span><br><span class=\"line\">    out &lt;&lt; stu.name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; stu.score;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">Max</span>(a, b) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    STU stu1 = &#123; <span class=\"string\">&quot;Sam&quot;</span>, <span class=\"number\">90</span> &#125;, stu2 = &#123; <span class=\"string\">&quot;Amy&quot;</span>, <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">Max</span>(stu1, stu2);</span><br><span class=\"line\">    <span class=\"comment\">// 同名函数会按优先级调用普通函数 显示具体化的模板函数, 普通模板函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的显式具体化\">类的显式具体化<a title=\"#类的显式具体化\" href=\"#类的显式具体化\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//====================================================</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T2</span>&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(T1 x, T2 y) : <span class=\"built_in\">m_x</span>(x), <span class=\"built_in\">m_y</span>(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">T1 <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setX</span><span class=\"params\">(T1 x)</span> </span>&#123; m_x = x; &#125;</span><br><span class=\"line\">    <span class=\"function\">T2 <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setY</span><span class=\"params\">(T2 y)</span> </span>&#123; m_y = y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T1 m_x;</span><br><span class=\"line\">    T2 m_y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T1</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">T2</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Point&lt;T1, T2&gt;::<span class=\"built_in\">display</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; m_x &lt;&lt; <span class=\"string\">&quot;, y=&quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=====================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 全特化类模板具体化, 必须有一个主模板类, 参数全部明确</span></span><br><span class=\"line\"><span class=\"comment\">//====================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* x, <span class=\"type\">const</span> <span class=\"type\">char</span>* y) : <span class=\"built_in\">m_x</span>(x), <span class=\"built_in\">m_y</span>(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* x)</span> </span>&#123; m_x = x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* y)</span> </span>&#123; m_y = y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* m_x;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* m_y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> Point&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;::<span class=\"built_in\">display</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; m_x &lt;&lt; <span class=\"string\">&quot; 全特化 y=&quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=====================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 偏特化类模板具体化, 具体化部分模板参数, 参数全部明确则为全特化</span></span><br><span class=\"line\"><span class=\"comment\">// 调用优先级从高到低进行排序是：全特化类 &gt; 偏特化类 &gt; 主版本模板类</span></span><br><span class=\"line\"><span class=\"comment\">//====================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T2&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, T2&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* x, T2 y) : <span class=\"built_in\">m_x</span>(x), <span class=\"built_in\">m_y</span>(y) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_x; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* x)</span> </span>&#123; m_x = x; &#125;</span><br><span class=\"line\">    <span class=\"function\">T2 <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setY</span><span class=\"params\">(T2 y)</span> </span>&#123; m_y = y; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* m_x;</span><br><span class=\"line\">    T2 m_y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T2&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Point&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, T2&gt;::<span class=\"built_in\">display</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;x=&quot;</span> &lt;&lt; m_x &lt;&lt; <span class=\"string\">&quot; 偏特化 y=&quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">Point</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">10</span>, <span class=\"number\">20</span>))-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">int</span>&gt;(<span class=\"string\">&quot;E180&quot;</span>,  <span class=\"number\">10</span>))-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> <span class=\"built_in\">Point</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;(<span class=\"string\">&quot;E180&quot;</span>, <span class=\"string\">&quot;N210&quot;</span>))-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305012207653.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"函数模板的重载\">函数模板的重载<a title=\"#函数模板的重载\" href=\"#函数模板的重载\"></a></h3>\n<p>c++ 不允许将函数模板偏特化，但函数模板像普通函数那样允许被重载，通过将函数模板重载也可以完成与类模板偏特化类似的功能。</p>\n<p>注意特化是模板的参数明确, 而不是函数参数表中的参数.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt; <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;模板函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"type\">void</span> <span class=\"built_in\">test</span>&lt;<span class=\"type\">double</span>, <span class=\"type\">double</span>&gt;() &#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;函数全特化&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//template&lt;class T1&gt; void test&lt;T1, double&gt;() &#123;  // 函数没有偏特化</span></span><br><span class=\"line\"><span class=\"comment\">//\tcout &lt;&lt; &quot;函数偏特化&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test</span>&lt;<span class=\"type\">double</span>, <span class=\"type\">double</span>&gt;();\t\t\t<span class=\"comment\">// 函数全特化</span></span><br><span class=\"line\">\t<span class=\"built_in\">test</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">double</span>&gt;();\t\t\t<span class=\"comment\">// 模板函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; T&amp; <span class=\"title\">findMax</span><span class=\"params\">(T&amp; t1, T&amp; t2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (t1 &gt; t2 ? t1 : t2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板函数重载</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; T&amp; <span class=\"title\">findMax</span><span class=\"params\">(T* t1, T* t2)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (*t1 &gt; *t2 ? *t1 : *t2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; T&amp; <span class=\"title\">findMax</span><span class=\"params\">(T arr[], <span class=\"type\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\tT&amp; Max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\tMax = <span class=\"built_in\">findMax</span>(Max, arr[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">findMax</span>(a, b) &lt;&lt; endl;\t\t\t<span class=\"comment\">// 2</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">findMax</span>(&amp;a, &amp;b) &lt;&lt; endl;\t\t<span class=\"comment\">// 2</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span> ,<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"keyword\">sizeof</span> arr / <span class=\"keyword\">sizeof</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">findMax</span>(arr, len) &lt;&lt; endl;\t\t<span class=\"comment\">// 8</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体化和实例化的区别：\">具体化和实例化的区别：<a title=\"#具体化和实例化的区别：\" href=\"#具体化和实例化的区别：\"></a></h3>\n<p>具体化：即显式具体化，与实例化不同的是，它也是一个模板定义，但它是对特定类型的模板定义。</p>\n<p>实例化：在程序中的函数模板本身并不会生成函数定义，它只是一个用于生成函数定义的方案。编译器使用模板为特定类型生成函数定义时，得到的是模板实例。这即是函数模板的实例化。<br>\n程序运行时完成了实例化的工作，而具体化是由程序员完成的。</p>\n<h2 id=\"模板元编程\">模板元编程<a title=\"#模板元编程\" href=\"#模板元编程\"></a></h2>\n<p>模板元编程是指在模板实例化的同时利用编译器完成一些计算任务。通过模板元编程，可以把一些需要在运行时计算的任务放到编译时来做，从而提高程序的运行时效率。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算阶乘</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Factorial</span> &#123;\t\t\t\t<span class=\"comment\">// 也可以声明成模板类</span></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> &#123; VALUE = N * Factorial&lt;N<span class=\"number\">-1</span>&gt;::VALUE&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"keyword\">struct</span> <span class=\"title class_\">Factorial</span>&lt;<span class=\"number\">0</span>&gt; &#123;\t<span class=\"comment\">// 特化给出终止条件</span></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> &#123; VALUE = <span class=\"number\">1</span> &#125;;\t\t\t\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算乘方</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Power</span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"type\">static</span> T <span class=\"title\">value</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x * Power&lt;N - <span class=\"number\">1</span>&gt; ::<span class=\"built_in\">value</span>(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span>  <span class=\"title class_\">Power</span>&lt;<span class=\"number\">1</span>&gt; &#123;\t\t\t<span class=\"comment\">// 特化递归终止条件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"type\">static</span> T <span class=\"title\">value</span><span class=\"params\">(T x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简化写法, 辅助函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span> N, <span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> T <span class=\"title\">power</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Power&lt;N&gt;::<span class=\"built_in\">value</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[Factorial&lt;M&gt;::VALUE];\t\t<span class=\"comment\">// 编译时自动计算阶乘, 而不是运行时</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"keyword\">sizeof</span> arr / <span class=\"keyword\">sizeof</span> arr[<span class=\"number\">0</span>] &lt;&lt; endl; <span class=\"comment\">// 720</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; Power&lt;<span class=\"number\">3</span>&gt;::<span class=\"built_in\">value</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>) &lt;&lt; endl;  <span class=\"comment\">// 2^3 类模板嵌套函数模板</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">Power</span>&lt;<span class=\"number\">3</span>&gt;().<span class=\"built_in\">value</span>(<span class=\"number\">1.5</span>) &lt;&lt; endl;\t  <span class=\"comment\">// 3.375</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">power</span>&lt;<span class=\"number\">10</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">2</span>) &lt;&lt; endl;\t<span class=\"comment\">// 2^10</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/152211160\" target=\"_blank\">Chapter16：模板（二）——显式具体化和显式实例化</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/29/[C++%E7%AC%94%E8%AE%B0]%E5%A4%9A%E6%80%81/",
            "url": "https://s1acr.github.io/2023/04/29/[C++%E7%AC%94%E8%AE%B0]%E5%A4%9A%E6%80%81/",
            "title": "[C++笔记]多态",
            "date_published": "2023-04-29T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>C++ 笔记</p>\n</blockquote>\n<h2 id=\"多态概述\">多态概述<a title=\"#多态概述\" href=\"#多态概述\"></a></h2>\n<p>多态是指同样的消息被不同类型的对象接收时导致不同的行为。<br>\n面向对象的多态性可以分为四类:重载多态、强制多态、包含多态和参数多态。前面两种统称为专用多态，而后面两种称为通用多态。<br>\n强制多态是指将一个变元的类型加以变化，以符合一个函数或者操作的要求.<br>\n包含多态是类族中定义于不同类中的同名成员函数的多态行为，主要是通过虚函数来实现。<br>\n参数多态与类模板相关联，在使用时必须赋予实际的类型才可以实例化。</p>\n<p>多态从实现的角度来讲可以划分为两类:编译时的多态和运行时的多态。前者是在编译的过程中确定了同名操作的具体操作对象，而后者则是在程序运行过程中才动态地确定操作所针对的具体对象。这种确定操作的具体对象的过程就是绑定 (binding) 。绑定是指计算机程序自身彼此关联的过程，也就是把一个标识符名和一个存储地址联系在一起的过程;用面向对象的术语讲，就是把一条消息和一个对象的方法相结合的过程。按照绑定进行的阶段的不同，可以分为两种不同的绑定方法:静态绑定和动态绑定.<br>\n绑定工作在编译连接阶段完成的情况称为静态绑定。其同名操作的具体对象能够在编译、连接阶段确定，通过静态绑定解决，比如重载、强剧和参数多态。<br>\n绑定工作在程序运行阶段完成的情况称为动态绑定, 在编译、连接过程中无法解决的绑定问题，包含多态操作对象的确定就是通过动态绑定完成的。</p>\n<h2 id=\"运算符重载\">运算符重载<a title=\"#运算符重载\" href=\"#运算符重载\"></a></h2>\n<p>运算符重载的实质就是函数重载。对已有的运算符赋予多重含义，使同一个运算符作用于不同类型的数据时导致不同的行为。</p>\n<p>运算符重载的规则:</p>\n<p>(1) c++ 中的运算符除了少数几个之外<code>. * :: ?</code>，全部可以重载，而且只能重载 c++ 中已经有的运算符。<br>\n(2) 重载之后运算符的优先级和结合性都不会改变。<br>\n(3) 运算符重载是针对新类型数据的实际需要，对原有运算符进行适当的改造。一般来讲，重载的功能应当与原有功能相类似，不能改变原运算符的操作对象个数，同时至少要有一个操作对象是自定义类型。<br>\n运算符的重载形式有两种，即重载为类的<code>非静态成员函数</code>和重载<code>为非成员函数</code>。</p>\n<p>当运算符重载为类的成员函数时，函数的参数个数比原来的操作数个数要少一个(后置&quot;++“，”–&quot;除外)<br>\n重载为非成员函数时，参数个数与原操作数个数相同。</p>\n<p>重载为类的成员函数时，第一个操作数会被作为函数调用的目的对象，因此无须出现在参数表中，函数体中可以直接访问第一个操作数的成员;而重载为非成员函数时，运算符的所有操作数必须显式通过参数传递。</p>\n<h3 id=\"重载成员函数\">重载成员函数<a title=\"#重载成员函数\" href=\"#重载成员函数\"></a></h3>\n<h4 id=\"重载双目运算符\">重载双目运算符<a title=\"#重载双目运算符\" href=\"#重载双目运算符\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>():<span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>+(Test t) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;x += t.x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;y += t.y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载双目运算符, 第一个参数类的对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;[&quot;</span> &lt;&lt; x &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"string\">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">\tt1 + <span class=\"built_in\">Test</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// 相当于 t1.operator+(Test(2, 3))</span></span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>();  <span class=\"comment\">// [3, 5]</span></span><br><span class=\"line\">\tt1.<span class=\"keyword\">operator</span>+(<span class=\"built_in\">Test</span>(<span class=\"number\">4</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>();\t<span class=\"comment\">// [7, 9]</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"重载单目运算符\">重载单目运算符<a title=\"#重载单目运算符\" href=\"#重载单目运算符\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>() :<span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载前置++</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;x++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;y++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重载后置++</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;x += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;y += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;[&quot;</span> &lt;&lt; x &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"string\">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">\t++t1;\t\t\t</span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>(); <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\">\tt1.<span class=\"keyword\">operator</span>++(); </span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>();  <span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tt1++;</span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>();\t<span class=\"comment\">// [5, 6]</span></span><br><span class=\"line\">\tt1.<span class=\"keyword\">operator</span>++(<span class=\"number\">1</span>);  <span class=\"comment\">// 加个参数以区分后置, 参数仅起区分作用</span></span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>();\t<span class=\"comment\">// [7, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重载非成员函数\">重载非成员函数<a title=\"#重载非成员函数\" href=\"#重载非成员函数\"></a></h3>\n<p>运算所需要的操作数都需要通过函数的形参表来传递，在形参表中形参从左到右的顺序就是运算符操作数的顺序。如果需要访问<br>\n运算符参数对象的私有成员，可以将该函数声明为类的友元函数。</p>\n<h4 id=\"重载单目运算符-1\">重载单目运算符<a title=\"#重载单目运算符-1\" href=\"#重载单目运算符-1\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>() :<span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;[&quot;</span> &lt;&lt; x &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"string\">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载左++</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"keyword\">operator</span>++(Test&amp; t) &#123;</span><br><span class=\"line\">\tt.x++;</span><br><span class=\"line\">\tt.y++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载右++</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"keyword\">operator</span>++(Test&amp; t, <span class=\"type\">int</span> ) &#123;</span><br><span class=\"line\">\tt.x += <span class=\"number\">2</span>;</span><br><span class=\"line\">\tt.y += <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">\t++t1;</span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>();\t<span class=\"comment\">// [2, 3] </span></span><br><span class=\"line\">\tt1++;</span><br><span class=\"line\">\tt1.<span class=\"built_in\">display</span>();\t<span class=\"comment\">// [4, 5]</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"重载双目运算符-1\">重载双目运算符<a title=\"#重载双目运算符-1\" href=\"#重载双目运算符-1\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>() : <span class=\"built_in\">x</span>(<span class=\"number\">0</span>), <span class=\"built_in\">y</span>(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; o, P p) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载&lt;&lt; , 由于 &lt;&lt; 左移运算符的第一个操作数只能是一个 ostream&amp; 类型, 故只能使用普通函数重载</span></span><br><span class=\"line\">\to &lt;&lt; <span class=\"string\">&quot;[&quot;</span> &lt;&lt; p.x &lt;&lt;  <span class=\"string\">&quot;,&quot;</span> &lt;&lt; p.y &lt;&lt; <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">P&amp; <span class=\"keyword\">operator</span>+ (P p1, P p2) &#123;</span><br><span class=\"line\">\t<span class=\"function\">P <span class=\"title\">p</span><span class=\"params\">(p1.x + p2.x, p1.y + p2.y)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">P</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">P</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">P</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>) + <span class=\"built_in\">P</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>) + <span class=\"built_in\">P</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"虚函数\">虚函数<a title=\"#虚函数\" href=\"#虚函数\"></a></h2>\n<h3 id=\"虚函数的实现\">虚函数的实现<a title=\"#虚函数的实现\" href=\"#虚函数的实现\"></a></h3>\n<p>虚函数是<code>动态绑定</code>的基础。虚函数必须是非静态的成员函数。虚函数经过派生之后，在类族中就可以实现运行过程中的多态。</p>\n<p>根据赋值兼容规则，可以使用派生类的对象代替基类对象。如果用基类类型的指针指向派生类对象，就可以通过这个指针来访问该对象，问题是访问到的只是从基类继承来的同名成员。解决这一问题的办法是:如果需要通过基类的指针指向派生类的对象，并<br>\n访问某个与基类同名的成员，那么首先在基类中将这个同名函数说明为虚函数。这样，通过基类类型的指针，就可以便属于不同派生类的不同对象产生不同的行为，从而实现运行过程的多态。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 虚函数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> test;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived_1</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;\t\t<span class=\"comment\">// 这里的virtual可加可不加, 不加编译器会自动判断</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Derived_1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived_2</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Derived_2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">(Base* b)</span> </span>&#123;</span><br><span class=\"line\">\tb-&gt;<span class=\"built_in\">say</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> <span class=\"built_in\">Base</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">say</span>(b);\t\t\t\t<span class=\"comment\">// Base</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDerived_1* d_1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived_1</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">say</span>(d_1);\t\t\t<span class=\"comment\">// Derived_1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDerived_2* d_2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived_2</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">say</span>(d_2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tBase* base = d_1;</span><br><span class=\"line\">\tbase-&gt;<span class=\"built_in\">say</span>();\t\t\t<span class=\"comment\">// Derived_1</span></span><br><span class=\"line\">\tbase-&gt;Base::<span class=\"built_in\">say</span>();\t<span class=\"comment\">// Base   ,可以加作用域以限制调用类作用域下的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304291532430.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304291532463.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>基类多了一个<code>虚函数表指针vfptr</code>, 指向一张<code>虚函数表vftable</code>, 子类继承了该虚函数后会根据函数覆盖(重写)的关系重新初始化其中的虚函数表和虚函数表指针. 虚函数表中记录了该类中每个虚函数正确指向的函数地址.</p>\n<p>此时再<code>当派生类指针/引用初始化基类指针/引用时(对象不行, 会发生调用基类复制构造, 对象切片转换得到一个基类对象)</code>, 基类指针任然只能访问派生类继承下来的基类部分, 但其中的vfptr和vbtable已经被改写, 从而可以实现基类指针/引用调用虚函数的动态绑定.</p>\n<p>只有虚函数是动态绑定的，如果派生类需要修改基类的行为(即重写与基类函数同名的函数) ，就应该在基类中将相应的函数声明为虚函数。而基类中声明的非虚函数，通常代表那些不希望被派生类改变的功能，也是不能实现多态的。一般不要重写继承而来的非虚函数(虽然语法对此没有强行限制) ，因为那会导致通过基类指针和派生类的指针或对象调用同名函数时，产生不同的结果，从而引起混乱。</p>\n<h3 id=\"虚析构函数\">虚析构函数<a title=\"#虚析构函数\" href=\"#虚析构函数\"></a></h3>\n<p>C++不能声明虚构造函数，但是可以声明虚析构函数。</p>\n<p>一个类的析构函数是虚函数，那么由它派生而来的所有子类的析构函数也是虚函数。析构函数设置为虚函数之后，在使用指针引用时可以动态绑定，实现运行时的多态，保证使用基类类型的指针就能够调用适当的析构函数针对不同的对象进行清理工作。</p>\n<p>如果有可能<code>通过基类指针调用派生类对象的析构函数</code> ，就需要让<code>基类的析构函数成为虚函数</code>，否则会产生不确定的后果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Base::~<span class=\"built_in\">Base</span>() &#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Base destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span>* item = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Derived::~<span class=\"built_in\">Derived</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> item;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Derived destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 派生类指针初始化基类指针</span></span><br><span class=\"line\">\t<span class=\"comment\">// delete b;\t没有声明基类虚析构时 Base destructor, 派生类内存泄漏</span></span><br><span class=\"line\">\t <span class=\"keyword\">delete</span> b;\t<span class=\"comment\">// 声明虚析构后, 调用派生类析构再基类析构, 内存正确释放</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"纯虚函数\">纯虚函数<a title=\"#纯虚函数\" href=\"#纯虚函数\"></a></h3>\n<p>纯虚函数是一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要给出各自的定义。<br>\n声明为纯虚函数之后，基类中就可以不再给出函鼓的实现部分。纯虚函数的函数体由派生类给出。</p>\n<p>基类中仍然允许对纯虚函数给出实现，但即使给出实现，也<code>必须由派生类覆盖，否则无法实例化</code>。在基类中对纯虚函数定义的函数体的调用，必须通过&quot;基类名::函数名(参数表)&quot;的形式。如果将析构函数声明为纯虚函数，必须给出它的实现，因为派生类的析构函数体执行完后需要调用基类的纯虚函数。</p>\n<p><code>纯虚函数不同于函数体为空的虚函数</code>:纯虚函数根本就没有函数体，而空的虚函数的函数体为空;前者所在的类是抽象类，不能直接进行实例化，而后者所在的类是可以实例化的。它们共同的特点是都可以派生出新的类，然后在新类中给出虚函数新的实现，而且这种新的实现可以具有多态特征。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Base::say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;base&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;derived&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tDerived d;</span><br><span class=\"line\">\td.<span class=\"built_in\">say</span>();\t\t<span class=\"comment\">// base</span></span><br><span class=\"line\">\td.Base::<span class=\"built_in\">say</span>();\t<span class=\"comment\">// derived</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象类\">抽象类<a title=\"#抽象类\" href=\"#抽象类\"></a></h3>\n<p><code>带有纯虚函数的类是抽象类</code>。抽象类的主要作用是通过它为一个类族建立一个公共的接口，使它们能够更有效地发挥多态特性。抽象类声明了一个类族派生类的共同接口，而接口的完整实现，即纯虚函数的函数体，要由派生类自己定义。</p>\n<p>抽象类派生出新的类之后，如果派生类给出所有纯虚函数的函数实现，这个派生类就可以定义自己的对象，因而不再是抽象类;反之，如果派生类没有给出全部纯虚函数的实现，这时的派生类仍然是个抽象类。</p>\n<p><code>抽象类不能实例化</code>，即不能定义一个抽象类的对象，但是可以<code>定义一个抽象类的指针和引用</code>。通过指针或引用，就可以指向并访问派生类的对象，进而访问派生类的成员，这种访问是具有多态特征的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">showCapability</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Farmer</span> : <span class=\"keyword\">public</span> Person &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring seed;</span><br><span class=\"line\">\t<span class=\"built_in\">Farmer</span>(string seed) : <span class=\"built_in\">seed</span>(seed)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">showCapability</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;I plant &quot;</span> &lt;&lt; seed &lt;&lt; <span class=\"string\">&quot; on my land&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Programmer</span> : <span class=\"keyword\">public</span> Person &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring lang;</span><br><span class=\"line\">\t<span class=\"built_in\">Programmer</span>(string lang) : <span class=\"built_in\">lang</span> (lang)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">showCapability</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;I write &quot;</span> &lt;&lt; lang &lt;&lt; <span class=\"string\">&quot; earning living&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tPerson* p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp = <span class=\"keyword\">new</span> <span class=\"built_in\">Farmer</span>(<span class=\"string\">&quot;carrots&quot;</span>);  </span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">showCapability</span>();</span><br><span class=\"line\">\tp = <span class=\"keyword\">new</span> <span class=\"built_in\">Programmer</span>(<span class=\"string\">&quot;C++&quot;</span>);\t</span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">showCapability</span>();\t<span class=\"comment\">// I write C++ earning living</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304291932196.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"多态类型与非多态类型\">多态类型与非多态类型<a title=\"#多态类型与非多态类型\" href=\"#多态类型与非多态类型\"></a></h3>\n<p>c++ 的类类型分为两类一一多态类型和非多态类型。多态类型是指有虚函数的类类型，非多态类型是指所有的其他类型.</p>\n<p>基类的指针可以指向派生类的对象。如果该基类是多态类型，那么通过该指针调用基类的虚函数时，实际执行的操作是由派生类决定的。从这个意义上讲，派生类只是继承了基类的接口，但不必继承基类中虚函数的实现，对基类虚函数的调用可以反映派生类的特殊性。</p>\n<p>设计多态类型的一个重要原则是，把多态类型的析构函数设定为虚函数。</p>\n<p>对非多态类的公有继承，应当慎重，而且一般没有太大必要。</p>\n<h3 id=\"dynamic_cast\">dynamic_cast<a title=\"#dynamic_cast\" href=\"#dynamic_cast\"></a></h3>\n<p>dynamic_cast 是与 static_cast. const_cast , reinterpret_cast 并列的 种类型转换操作符之一。它可以将<code>基类的指针显式转换为派生类的指针</code>，或将基类的引用显式转换为派生类的引用。与 static_cast 不同的是，它执行的不是无条件的转换，它在转换前会检查指针(或引用)所指向对象的实际类型是否与转换的目的类型兼容，如果兼容转换才会发生，才能得到派生类的指针(或引用). 否则:</p>\n<ul>\n<li>如果执行的是指针类型的转换，会得到空指针。</li>\n<li>如果执行的是引用类型的转换，会抛出异常<br>\n另外，转换前类型必须是指向多态类型的指针，或多态类型的引用，而不能是指向非多态类型的指针或非多态类型的引用，这是因为 c++ <code>只为多态类型在运行时保存用于运行时类型识别的信息</code>。这从另一个方面说明了非多态类型为什么不宜被公有继承。</li>\n</ul>\n<p>当原始类型为多态类型的指针时，目的类型除了是派生类指针外，还可以是void 指针，例如 dynamic_cast&lt; void *&gt;(p)。这时所执行的实际操作是，先将 指针转换为它所指向的对象的实际类型的指针，再将其转换为 void 指针。换句话说，就是得到所指向对象的首地址(请注意，在多继承存在的情况下，基类指针存储的地址未必是对象的首地址)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Derived&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tDerived* pd1 = <span class=\"built_in\">dynamic_cast</span>&lt;Derived*&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">Base</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pd1 != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tpd1-&gt;<span class=\"built_in\">say</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Base指针直接转换成Derived指针 , 失败</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">\tDerived* pd2 = <span class=\"built_in\">dynamic_cast</span>&lt;Derived*&gt;(b);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pd2 != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tpd2-&gt;<span class=\"built_in\">say</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Base指针用Derived初始化, 再转成derived成功</span></span><br><span class=\"line\">\t<span class=\"comment\">// 只有实际类型与目的类型兼容, 转换才能发生, 比如转换成实际类型或子类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"typeid\">typeid<a title=\"#typeid\" href=\"#typeid\"></a></h3>\n<p><code>typeid</code> C++ 的一个<code>关键字</code>，用它可以获得一个类型的相关信息。</p>\n<p>通过 typeid 得到的是一个 type_info 类型的常引用。 type_info c++ 标准库中的一个类，专用于在运行时表示类型信息，它定义在 typeinfo 头文件中。</p>\n<p>如果 typeid 所作用于的表达式具有多态类型，那么这个表达式会被求值，用 typeid得到的是用于描述表达式求值结果的运行时类型(动态类型)的 type_info 对象的常引用。而如果表达式具有非多态类型，那么用 typeid 得到的是表达式的静态类型，由于这个静态类型在编译时就能确定，这时表达式不会被求值。因此，虽然 typeid 可以作用于任何类型的表达式，但只有它作用于多态类型的表达式时，进行的才是运行时类型识别，否则只是简单的静态类型信息的获取。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>()&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">(Base* b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> type_info&amp; info_1 = <span class=\"built_in\">typeid</span>(b);</span><br><span class=\"line\">\t<span class=\"type\">const</span> type_info&amp; info_2 = <span class=\"built_in\">typeid</span>(*b);</span><br><span class=\"line\">\tcout &lt;&lt; info_1.<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; info_2.<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (info_2 == <span class=\"built_in\">typeid</span>(Base)) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Base Class&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Non Base Class&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tBase b;</span><br><span class=\"line\">\t<span class=\"built_in\">fun</span>(&amp;b);</span><br><span class=\"line\">\tDerived d;</span><br><span class=\"line\">\t<span class=\"built_in\">fun</span>(&amp;d);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指针b不是动态类型, 故得到结果相同.</span></span><br><span class=\"line\"><span class=\"comment\">// *b对象是动态类型, typeid(*b)得到具体类型</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304292146612.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"虚函数动态绑定的实现原理\">虚函数动态绑定的实现原理<a title=\"#虚函数动态绑定的实现原理\" href=\"#虚函数动态绑定的实现原理\"></a></h3>\n<p>每个类各有一个虚表，虚表的内容是由编译器安排的。派生类的虚表中，基类声明的虚函数对应的指针放在前面，派生类新增的虚函数的对应指针放在后面，这样一个虚函数的指针在基类虚表和派生类虚表中具有相同的位置。每个多态类型的对象中都有一个指向当前类型的虚表的指针，该指针在构造函数中被赋值。当通过基类的指针或引用调用一个虚函数时，就可以通过虚表指针找到该对象的虚表，进而找到存放该虚函数的指针的虚表条目。将该条目中存放的指针读出后，就可获得应当被调用的函数的人口地址，然后调用该虚函数，虚函数的动态绑定就是这样完成的。</p>\n<p>执行一个类的构造函数时，首先被执行的是基类的构造函数，因此构造一个派生类的对象时，该对象的虚表指针首先会被指向基类的虚表。只有当基类构造函数执行完后，虚表指针才会被指向派生类的虚表，这就是基类构造函数调用虚函数时不会调用派生类的虚函数的原因。</p>\n<p>在多继承时，情况会更加复杂，因为每个基类都有各自的虚函数，每个基类也会有各自的虚表，这样继承了多个基类的派生类需要多个虚表(或一个虚表分为多段，每个基类的虚表指针指向其中一段的首地址)。</p>\n<p>事实上，一个类的虚表中存放的不只是虚函数的指针，用于支持运行时类型识别的对象的运行时类型信息也需要通过虚表来访问。只有多态类型有虚表，因此只有多态类型支持运行时类型识别。</p>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/29/[C++%E7%AC%94%E8%AE%B0]%E7%BE%A4%E4%BD%93%E7%B1%BB%E5%92%8C%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E4%B8%80/",
            "url": "https://s1acr.github.io/2023/04/29/[C++%E7%AC%94%E8%AE%B0]%E7%BE%A4%E4%BD%93%E7%B1%BB%E5%92%8C%E7%BE%A4%E4%BD%93%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E4%B8%80/",
            "title": "[C++笔记]群体类和群体数据的组织一",
            "date_published": "2023-04-29T00:00:00.000Z",
            "content_html": "<h2 id=\"群体类和群体数据\">群体类和群体数据<a title=\"#群体类和群体数据\" href=\"#群体类和群体数据\"></a></h2>\n<p>基本数据类型是 c++ 编译系统预定义的，而自定义类型的数据是由<code>多个基本类型或自定义类型的元素组成</code>，称之为<code>群体数据</code>。<br>\n对于群体数据，仅有系统预定义的操作是不够的，在很多情况下，还需要设计与某些具体问题相关的特殊操作，并按照面向对象的方法将<code>数据与操作封装起来</code>，这就是<code>群体类</code>。<br>\n群体可分为两种:<code>线性群体和非线性群体</code>。线性群体中的元素按位置排到有序, 如数组。非线性群体不用位置顺序来标识元素， 如拓扑图.</p>\n<h2 id=\"函数模板和类模板\">函数模板和类模板<a title=\"#函数模板和类模板\" href=\"#函数模板和类模板\"></a></h2>\n<p>模板是 C++ 支持<code>参数化程序设计的工具</code>，通过它可以<code>实现参数化多态性</code>。所谓参数化多态性，就是将程序所处理的<code>对象的类型参数化</code>，使得一段程序可以用于处理多种不同类型的对象。</p>\n<p><code>类模板的多文件结构中必须声明与实现都在头文件中</code>. 因为如果分文件编写, 在编译的时候类模板没有实例化就不会产生目标代码. 当其他源文件引用该模板头文件时, 虽然能实例化各个类模板的声明, 但无法将函数的实现实例化, 因为编译器对每个源文件的编译时分别进行的. 编译时无法相互访问. 得不到模板的具体实现, 连接时就会发生错误.<br>\n如果将函数模板、类模板的成员函数和类模板的静态数据成员的定义都放在头文件中，就可以避免这一问题，因为这些定义在编译任何一个源文件时都是可见的，编译器可以按需对它们进行实例化。</p>\n<p>由于函数模板和类模板的成员函数一般放在头文件中，这与内联函数相似，因此容易被人误以为函数模板和类模板的成员函数都会被自动当作内联函数处理。其实<code>函数模板和类模板的成员函数既可以是内联函数，也可以是非内联函数</code>，将其声明为内联函数的方法与非模板的函数一样，都要使用 inline 关键字，或将成员函数写在类定义内。</p>\n<h3 id=\"函数模板\">函数模板<a title=\"#函数模板\" href=\"#函数模板\"></a></h3>\n<p>(1)函数模板本身在编译时不会生成任何目标代码，只有由模板生成的实例会生成目标代码。<br>\n(2) <code>被多个源文件引用的函数模板，应当连同函数体一同放在头文件中</code>，而不能像普通函数那样只将声明放在头文件中。<br>\n(3) 函数指针也只能指向模板的实例，而不能指向模板本身。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;\t\t<span class=\"comment\">// 或者 class 关键字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showT</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">typeid</span>(t).<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">showT</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showT</span>&lt;<span class=\"type\">float</span>&gt;(<span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showT</span>&lt;<span class=\"type\">char</span>&gt;(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">\tshowT&lt;&gt;(<span class=\"string\">&quot;test&quot;</span>);\t<span class=\"comment\">// 也可以不写模板参数, 编译器自动识别, 最好还是写上</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304301229641.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"类模板\">类模板<a title=\"#类模板\" href=\"#类模板\"></a></h3>\n<p>使用类模板使用户可以为类定义一种模式，使得类中的某些数据成员、某些成员函数的参数、返回值或局部变量能取任意类型(包括系统预定义的和用户自定义的)。<br>\n类是对一组对象的公共性质的抽象，而类模板则是对不同类的公共性质的抽象，因此类模板是属于更高层次的抽象。由于类模板需要一种或多种类型参数，所以类模板也常常称为<code>参数化类</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Intel_CPU</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AMD_CPU</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NVIDIA_GPU</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AMD_GPU</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">C</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">G</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Computer</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Computer</span>(C c, G g) : <span class=\"built_in\">c</span>(c), <span class=\"built_in\">g</span>(g) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tC c;</span><br><span class=\"line\">\tG g;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">C</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">G</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Computer&lt;C, G&gt;::<span class=\"built_in\">getInfo</span>() &#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">typeid</span>(c).<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">typeid</span>(g).<span class=\"built_in\">name</span>() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类外实现模板类的成员函数, 有点复杂</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tIntel_CPU IC;</span><br><span class=\"line\">\tAMD_CPU AC;</span><br><span class=\"line\">\t<span class=\"function\">Computer&lt;Intel_CPU, AMD_GPU&gt; <span class=\"title\">c_1</span><span class=\"params\">(IC, AMD_GPU())</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Computer&lt;AMD_CPU, NVIDIA_GPU&gt; <span class=\"title\">c_2</span><span class=\"params\">(AC, NVIDIA_GPU())</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里不知道为什么全部该成创建匿名对象不行, 创建一个就可以, 可能是生存期的问题</span></span><br><span class=\"line\">\tc_1.<span class=\"built_in\">getInfo</span>();</span><br><span class=\"line\">\tc_2.<span class=\"built_in\">getInfo</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304301351523.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"线性群体\">线性群体<a title=\"#线性群体\" href=\"#线性群体\"></a></h2>\n<p>线性群体中的元素次序与其位置关系是对应的。在线性群体中，又可按照访问元素的不同方法分为<code>直接访问、顺序访问和索引访问</code>。<br>\n两种特殊的线性群体 栈和队列。</p>\n<h2 id=\"直接访问群体一一数组类\">直接访问群体一一数组类<a title=\"#直接访问群体一一数组类\" href=\"#直接访问群体一一数组类\"></a></h2>\n<p>实现一个简单的<code>动态数组类模板 Array</code> 。它由任意多个位置连续的、类型相同的元素组成，其元素个数可在程序运行时改变。它虽然比 vector 简单，但与 vector 的工作原理没有本质差别。</p>\n<p>C++ 中，如果想将自定义类型T的对象隐含或显式地转换为S类型，可以将operator S定义为T的成员函数。这样，在把T类型对象显式隐含转换为S类型，或用static_cast 显式转换为S类型时，该成员函数会被调用。转换操作符的重载函数不用指定返回值的类型，这是由于这种情况下重载函数的返回类型与操作符名称一致，因此c++ 标准规定不能为这类函数指定返回值类型(也不要写 void)<br>\n而当对象本身为常数时，为了避免通过指针对数组内容进行修改，只能将对象转换为常指针。</p>\n<h3 id=\"实现动态数组类模板\">实现动态数组类模板<a title=\"#实现动态数组类模板\" href=\"#实现动态数组类模板\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ARRAY_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Array</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT* list;\t<span class=\"comment\">// 指针, 用于动态分配内存</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size;\t<span class=\"comment\">// 数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>(<span class=\"type\">int</span> sz = <span class=\"number\">50</span>);\t\t\t\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Array</span>(<span class=\"type\">const</span> Array&lt;T&gt;&amp; arr);\t\t<span class=\"comment\">// 复制构造函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\tArray&lt;T&gt;&amp; <span class=\"keyword\">operator</span>= (<span class=\"type\">const</span> Array&lt;T&gt;&amp; rhs);\t\t<span class=\"comment\">// 重载 = </span></span><br><span class=\"line\">\tT&amp; <span class=\"keyword\">operator</span>[] (<span class=\"type\">int</span> i);\t\t\t\t\t\t\t<span class=\"comment\">// 重载 []</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>[] (<span class=\"type\">int</span> i) <span class=\"type\">const</span>;\t\t\t\t<span class=\"comment\">// 针对const重载 []</span></span><br><span class=\"line\">\t<span class=\"keyword\">operator</span> T* ();\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 重载到 T* 类型的转换</span></span><br><span class=\"line\">\t<span class=\"keyword\">operator</span> <span class=\"type\">const</span> T* () <span class=\"type\">const</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t\t\t\t<span class=\"comment\">// 获得数组大小</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"type\">int</span> sz)</span></span>;\t\t\t\t\t\t\t<span class=\"comment\">// 修改数组大小</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"built_in\">Array</span>(<span class=\"type\">int</span> sz) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(sz &gt;= <span class=\"number\">0</span>);\t\t\t\t\t\t\t\t<span class=\"comment\">// sz 初始化应 &gt;= 0 </span></span><br><span class=\"line\">\tsize = sz;</span><br><span class=\"line\">\tlist = <span class=\"keyword\">new</span> T[size];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 析构函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::~<span class=\"built_in\">Array</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"built_in\">Array</span>(<span class=\"type\">const</span> Array&lt;T&gt;&amp; a) &#123;</span><br><span class=\"line\">\tsize = a.size;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 复制大小</span></span><br><span class=\"line\">\tlist = <span class=\"keyword\">new</span> T[size];\t\t\t\t\t\t\t\t<span class=\"comment\">// 申请内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;\t\t\t\t<span class=\"comment\">// 复制每个元素</span></span><br><span class=\"line\">\t\tlist[i] = a.list[i];\t\t\t\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载 = 运算符, 实现对象间的赋值</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>= (<span class=\"type\">const</span> Array&lt;T&gt;&amp; rhs) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (&amp;rhs != <span class=\"keyword\">this</span>) &#123;\t\t\t<span class=\"comment\">// 避免 a = a 这种情况</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size != rhs.size) &#123;\t </span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果数组大小与rhs不同, 不好改变已分配大小,选择删除原有内存, 重新分配</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[] list;\t\t\t\t</span><br><span class=\"line\">\t\t\tsize = rhs.size;</span><br><span class=\"line\">\t\t\tlist = <span class=\"keyword\">new</span> T[size];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;\t\t\t<span class=\"comment\">// 复制每个元素</span></span><br><span class=\"line\">\t\t\tlist[i] = rhs.list[i];\t\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;\t\t\t\t<span class=\"comment\">// 返回当前对象的引用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回一个引用, 不仅是为了链式编程, C++中&#x27;=&#x27;运算允许做左值, (a = b) = c + 1, 如果返回对象则不可做左值, 并且调用复制构造额外开销, 一般返回引用 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载下标运算符 []</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(n &gt;= <span class=\"number\">0</span> &amp;&amp; n &lt; size);  <span class=\"comment\">// 数组下标控制</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//返回值应为一个引用, 因为返回值将要作为左值, arr[i] = xx, 如果是返回对象则是不可做左值的.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> n) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(n &gt;= <span class=\"number\">0</span> &amp;&amp; n &lt; size);\t\t\t<span class=\"comment\">// 同上, 重载const修饰条件下的数组下标运算[]</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载指针运算符, 将Array类的对象名转换为T类型指针, 指向当前对象的私有数组</span></span><br><span class=\"line\"><span class=\"comment\">// 为了发生隐式转换编译器能自动调用, 例如函数接受一个int* 指针, 但传入的是 Array&lt;int&gt;* p 的指针</span></span><br><span class=\"line\"><span class=\"comment\">// 这时编译器会尝试转换 (int*)p, 调用重载的 类型转换运算符 </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"keyword\">operator</span> T* () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Array&lt;T&gt;::<span class=\"keyword\">operator</span> <span class=\"type\">const</span> T*() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> Array&lt;T&gt;::<span class=\"built_in\">getSize</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Array&lt;T&gt;::<span class=\"built_in\">resize</span>(<span class=\"type\">int</span> sz) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(sz &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sz == size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tT* newList = <span class=\"keyword\">new</span> T[sz];\t\t\t<span class=\"comment\">// 创建新数组并分配空间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> n = (sz &lt; size) ? sz : size; <span class=\"comment\">// 填入数据的长度应该为 较小的数组长度 n</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\tnewList[i] = list[i];\t\t<span class=\"comment\">// 将前n个元素复制到新数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] list;\t\t\t<span class=\"comment\">// 删除旧数组</span></span><br><span class=\"line\">\tlist = newList;\t\t\t<span class=\"comment\">// 指向新数组</span></span><br><span class=\"line\">\tsize = sz;\t\t\t\t<span class=\"comment\">// 更新size </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">endif</span>  <span class=\"comment\">// ARRAY_H</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\">测试<a title=\"#测试\" href=\"#测试\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Array.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Array&lt;<span class=\"type\">float</span>&gt; <span class=\"title\">Arr_f</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Arr_f.<span class=\"built_in\">getSize</span>(); i++) &#123;</span><br><span class=\"line\">\t\tArr_f[i] = (<span class=\"type\">float</span>)i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; Arr_f.<span class=\"built_in\">getSize</span>(); i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; fixed &lt;&lt; Arr_f[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// defaultfloat 默认浮点数格式化是不显示精度尾0, 可以改成fixed 显示精度 </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tArr_f.<span class=\"built_in\">resize</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tcout &lt;&lt; Arr_f.<span class=\"built_in\">getSize</span>() &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; Arr_f[<span class=\"number\">20</span>] &lt;&lt; endl;   <span class=\"comment\">// 未初始化</span></span><br><span class=\"line\"><span class=\"comment\">//\tcout &lt;&lt; Arr_f[200] &lt;&lt; endl;   // debug 触发断言</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">float</span>* f = (<span class=\"type\">const</span> <span class=\"type\">float</span>*)Arr_f;  <span class=\"comment\">// 转换为常指针</span></span><br><span class=\"line\">\tcout &lt;&lt; f[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span>* ff = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">float</span>*&gt;(f);\t</span><br><span class=\"line\">\tcout &lt;&lt; ff[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"顺序访问群体一一链表类\">顺序访问群体一一链表类<a title=\"#顺序访问群体一一链表类\" href=\"#顺序访问群体一一链表类\"></a></h2>\n<p>链表是一种动态数据结构，可以用来表示顺序访问的线性群体。</p>\n<h3 id=\"实现链表类模板\">实现链表类模板<a title=\"#实现链表类模板\" href=\"#实现链表类模板\"></a></h3>\n<h4 id=\"节点类模板\">节点类模板<a title=\"#节点类模板\" href=\"#节点类模板\"></a></h4>\n<p>结点类的数据成员中应该包括数据域和指针域的内容，函数成员中应该含有对数据和指针进行初始化的方法(函数) ，以及在本结点之后插入新结点和删除后继结点的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Node.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tNode&lt;T&gt;* front, * rear;\t\t<span class=\"comment\">// 表头和表尾指针</span></span><br><span class=\"line\">\tNode&lt;T&gt;* prevPtr, * currPtr; <span class=\"comment\">// 记录当前遍历位置的指针, 用于插入删除操作更新</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size;\t\t\t\t\t<span class=\"comment\">// 表中元素个数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> position;\t\t\t\t<span class=\"comment\">// 当前元素在表中的位置序号, 函数reset 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Node&lt;T&gt;* <span class=\"title\">newNode</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item, Node&lt;T&gt;* ptrNext = <span class=\"literal\">NULL</span>)</span></span>;\t<span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">freeNode</span><span class=\"params\">(Node&lt;T&gt;* p)</span></span>;\t\t\t\t<span class=\"comment\">// 释放结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">copy</span><span class=\"params\">(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L)</span></span>;\t\t<span class=\"comment\">// 将链表L复制到当前表, 被复制构造函数和operator&#x27;=&#x27; 调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>();\t\t\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">LinkedList</span>(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L);  <span class=\"comment\">// 复制构造函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">LinkedList</span>();\t\t\t\t<span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">\tLinkedList&lt;T&gt;&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L);  <span class=\"comment\">// 重载复值运算符 = </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 返回链表元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 返回链表是否为空</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reset</span><span class=\"params\">(<span class=\"type\">int</span> pos = <span class=\"number\">0</span>)</span></span>;\t\t\t<span class=\"comment\">// 初始化游标的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t<span class=\"comment\">// 使游标移动到下一结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">endOfList</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 游标是否到链尾</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">currentPostion</span><span class=\"params\">(<span class=\"type\">void</span>)</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 返回游标当前位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertFront</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t<span class=\"comment\">// 表头插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertRear</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t\t<span class=\"comment\">// 表尾插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertAt</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t\t<span class=\"comment\">// 当前结点之前插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertAfter</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t<span class=\"comment\">// 当前结点之后插入结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">deleteFront</span><span class=\"params\">()</span></span>;\t\t\t\t\t<span class=\"comment\">// 删除头结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteCurrent</span><span class=\"params\">()</span></span>;\t\t\t\t<span class=\"comment\">// 删除当前节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">T&amp; <span class=\"title\">data</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t\t<span class=\"comment\">// 返回当前节点对应数据的引用</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T&amp; <span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 返回常引用</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t<span class=\"comment\">// 清空链表, 释放内存, 被析构和operator=调用</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成新结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">Node&lt;T&gt;* LinkedList&lt;T&gt;::<span class=\"built_in\">newNode</span>(<span class=\"type\">const</span> T&amp; item, Node&lt;T&gt;* ptrNext <span class=\"comment\">/* = NULL */</span>) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>&lt;T&gt;(item, ptrNext);</span><br><span class=\"line\">\tsize++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">freeNode</span>(Node&lt;T&gt;* p) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\tsize--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制链表</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">copy</span>(<span class=\"type\">const</span> LinkedList&amp; L) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isEmpty</span>(L)) <span class=\"keyword\">return</span>;\t\t\t\t<span class=\"comment\">// 如果链表空返回</span></span><br><span class=\"line\">\tLinkedList newList;</span><br><span class=\"line\">\tL.<span class=\"built_in\">reset</span>(<span class=\"number\">1</span>);\t\t\t\t\t\t\t<span class=\"comment\">// 从第二个结点开始</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; L.<span class=\"built_in\">getSize</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">insertAfter</span>(L.<span class=\"built_in\">data</span>());</span><br><span class=\"line\">\t\tL.<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::<span class=\"built_in\">LinkedList</span>() &#123;</span><br><span class=\"line\">\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tposition = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"built_in\">newNode</span>(<span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);\t\t\t\t\t\t<span class=\"comment\">// 初始化头结点</span></span><br><span class=\"line\">\tfront = rear = prevPtr = currPtr = p_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制构造</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::<span class=\"built_in\">LinkedList</span>(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(L);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 析构</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;::~<span class=\"built_in\">LinkedList</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载 = </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">LinkedList&lt;T&gt;&amp; LinkedList&lt;T&gt;::<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> LinkedList&lt;T&gt;&amp; L) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(L);</span><br><span class=\"line\">\t<span class=\"built_in\">clear</span>(L);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回链表元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> LinkedList&lt;T&gt;::<span class=\"built_in\">getSize</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size ;\t\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回链表是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedList&lt;T&gt;::<span class=\"built_in\">isEmpty</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (front == rear) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化游标的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">reset</span>(<span class=\"type\">int</span> pos <span class=\"comment\">/* =  0 */</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pos == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;\t\t\t\t\t<span class=\"comment\">// </span></span><br><span class=\"line\">\tcurrPtr = prevPtr = front;\t\t\t\t\t<span class=\"comment\">// 从头开始偏移</span></span><br><span class=\"line\">\tposition = pos;\t\t\t\t\t\t\t\t<span class=\"comment\">// 偏移完成 position 应等于 pos</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; position; i++) &#123;\t\t<span class=\"comment\">// prevPtr 和 currPtr移动到对应位置</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 游标移动到下一结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">next</span>() &#123;</span><br><span class=\"line\">\tprevPtr = currPtr;</span><br><span class=\"line\">\tcurrPtr = currPtr-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\tposition++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 游标是否到链尾</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> LinkedList&lt;T&gt;::<span class=\"built_in\">endOfList</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (position == size) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回游标当前位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">int</span> LinkedList&lt;T&gt;::<span class=\"built_in\">currentPostion</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> position;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertFront</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\tNode* p_node = <span class=\"built_in\">newNode</span>(item, front);</span><br><span class=\"line\">\tfront = p_node;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表尾插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertRear</span>(<span class=\"type\">const</span> T&amp; item)&#123;</span><br><span class=\"line\">\tNode* p_node = <span class=\"built_in\">newNode</span>(item, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\trear-&gt;<span class=\"built_in\">insertAfter</span>(p_node);</span><br><span class=\"line\">\trear = p_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前节点之前插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertAt</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"built_in\">newNode</span>(item, currPtr);</span><br><span class=\"line\">\tprevPtr-&gt;<span class=\"built_in\">insertAfter</span>(p_node);</span><br><span class=\"line\">\tcurrPtr = p_node;\t\t\t\t\t<span class=\"comment\">// currPtr前移</span></span><br><span class=\"line\">\tposition--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前结点之后插入结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">insertAfter</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* p_node = <span class=\"built_in\">newNode</span>(item, currPtr-&gt;<span class=\"built_in\">nextNode</span>());</span><br><span class=\"line\">\tcurrPtr-&gt;<span class=\"built_in\">insertAfter</span>(p_node);</span><br><span class=\"line\">\tcurrPtr = p_node;\t\t\t\t\t\t<span class=\"comment\">// currPtr后移</span></span><br><span class=\"line\">\tposition++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除头结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T LinkedList&lt;T&gt;::<span class=\"built_in\">deleteFront</span>() &#123;</span><br><span class=\"line\">\tNode&lt;T&gt;* temp = front;</span><br><span class=\"line\">\tT data = front-&gt;data;</span><br><span class=\"line\">\tfront = front-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">freeNode</span>(temp);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除当前结点</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">deleteCurrent</span>() &#123;</span><br><span class=\"line\">\tprevPtr-&gt;<span class=\"built_in\">insertAfter</span>(currPtr-&gt;<span class=\"built_in\">nextNode</span>());</span><br><span class=\"line\">\tNode&lt;T&gt;* temp_curr = currPtr;</span><br><span class=\"line\">\tcurrPtr = currPtr-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">freeNode</span>(temp_curr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回当前结点对应数据的引用</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T&amp; LinkedList&lt;T&gt;::<span class=\"built_in\">data</span>()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currPtr-&gt;data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回常引用</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; LinkedList&lt;T&gt;::<span class=\"built_in\">data</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currPtr-&gt;data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空链表</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> LinkedList&lt;T&gt;::<span class=\"built_in\">clear</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (front != rear) &#123;</span><br><span class=\"line\">\t\tNode&lt;T&gt;* temp = front-&gt;<span class=\"built_in\">nextNode</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">freeNode</span>(front);</span><br><span class=\"line\">\t\tfront = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">freeNode</span>(front);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-1\">测试<a title=\"#测试-1\" href=\"#测试-1\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LinkedList.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tLinkedList&lt;<span class=\"type\">char</span>&gt; L;</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;G&#x27;</span>);\t\t\t<span class=\"comment\">// 后插</span></span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;O&#x27;</span>);\t\t\t</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;O&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAfter</span>(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">reset</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; L.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">\t\tL.<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;4&#x27;</span>);\t\t\t<span class=\"comment\">// 前插</span></span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">insertAt</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">\tL.<span class=\"built_in\">reset</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; L.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">\t\tL.<span class=\"built_in\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304302219400.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>感觉实现有点问题, position 还没用. 书上给的是游标来控制插入删除取数的位置, 既有头插也有尾插, 用双向链表的节点好实现些.</p>\n<h2 id=\"栈类\">栈类<a title=\"#栈类\" href=\"#栈类\"></a></h2>\n<p>栈的基本状态有:一般状态、栈空、栈满。当栈中没有元素时称为栈空;当栈中元素个数达到上限时，称为栈满;栈中有元素、但未达到栈满状态时，即处于一般状态。如果用静态数组存储存元素，则元素个数达到数组声明的元素个数时即为栈满。如果使用动态数组或链表，则可以根据需要设置或不设置元素的最大个数。</p>\n<p>无论采用哪种数据结构，栈类中都应该包括下列基本操作:初始化、入栈、出栈、栈清空、访问栈顶元素、检测栈的状态(满或空)。</p>\n<h3 id=\"实现栈类模板\">实现栈类模板<a title=\"#实现栈类模板\" href=\"#实现栈类模板\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 定义类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE = <span class=\"number\">50</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> Stack &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT list[SIZE];\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> top;\t\t\t\t<span class=\"comment\">// 栈顶位置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Stack</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t<span class=\"comment\">// 入栈</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;\t\t\t\t\t<span class=\"comment\">// 出栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;\t\t\t\t<span class=\"comment\">// 清空栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T&amp; <span class=\"title\">peek</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t<span class=\"comment\">// 访问栈顶元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t<span class=\"comment\">// 栈是否空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t<span class=\"comment\">// 栈是否满</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt; </span><br><span class=\"line\">Stack&lt;T, SIZE&gt;::<span class=\"built_in\">Stack</span>() : <span class=\"built_in\">top</span>(<span class=\"number\">-1</span>) &#123;&#125;\t\t<span class=\"comment\">// 构造函数, 初始化栈顶为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入栈</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">push</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(!<span class=\"built_in\">isFull</span>());\t\t\t\t<span class=\"comment\">// 栈满报错</span></span><br><span class=\"line\">\tlist[++top] = item;\t\t\t\t<span class=\"comment\">// 新元素压入栈顶</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt; </span><br><span class=\"line\">T Stack&lt;T, SIZE&gt;::<span class=\"built_in\">pop</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(!<span class=\"built_in\">isEmpty</span>());\t\t\t\t<span class=\"comment\">// 栈空报错</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[top--];\t\t\t\t<span class=\"comment\">// 栈顶出栈</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问栈顶元素</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; Stack&lt;T, SIZE&gt;::<span class=\"built_in\">peek</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(!<span class=\"built_in\">isEmpty</span>());\t\t\t\t<span class=\"comment\">// 栈空报错</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[top];\t\t\t\t<span class=\"comment\">// 返回栈顶元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈是否空</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">isEmpty</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> top == <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈是否满</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">isFull</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> top == SIZE - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空栈</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T, SIZE&gt;::<span class=\"built_in\">clear</span>() &#123;</span><br><span class=\"line\">\ttop = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-2\">测试<a title=\"#测试-2\" href=\"#测试-2\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Stack.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tStack&lt;<span class=\"type\">char</span>, <span class=\"number\">50</span>&gt; s;</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;L&#x27;</span>);</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;I&#x27;</span>);</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;V&#x27;</span>);</span><br><span class=\"line\">\ts.<span class=\"built_in\">push</span>(<span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.<span class=\"built_in\">isEmpty</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.<span class=\"built_in\">peek</span>();</span><br><span class=\"line\">\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// EVIL</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"队列类\">队列类<a title=\"#队列类\" href=\"#队列类\"></a></h2>\n<p>队列也有三种基本状态:一般状态、队空、队满。当队中没有元素时称为队空;当队中元素个数达到上限时，称为队满;队中有元素，但未达到队满状态时，即处于一般状态。<br>\n如果用静态数组存储队列元素，则元素个数达到数组声明的元素个数时即为队满。如果使用动态数组或链表，则可以根据需要设置或不设置元素的最大个数。</p>\n<p>无论采用哪种数据结构，队列类的数据成员都应包括:队列元素、队头指针和队尾指针。队列类中函数成员应该能够实现下列基本操作:初始化、入队、出队、清空队列、访问队首元素、检测队列的状态(满、空、队列长度)。</p>\n<p>如果用静态数组存储队列元素，每当有元素出队时，队中元素都要向队头方向移动。因此数据移动量大，效率不高。</p>\n<p>可以将队列设计为<code>循环队列</code>。也就是在想象中将数组弯曲成环形，元素出队时，后继元素不移动，每当队尾达到数组最后一个元素时，便再回到数组开头。为了使队尾达到数组最后一个元素时，再回到数组开头，需要运用取余运算(%)。另外，为了判断队列的状态，需要对元素个数进行记录。当元素个数为0时，队空。当元素个数等于最大值时，队满。</p>\n<h3 id=\"实现\">实现<a title=\"#实现\" href=\"#实现\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span>  QUEUE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QUEUE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类模板定义</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE = <span class=\"number\">50</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> Queue &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> front, rear, count;\t\t\t<span class=\"comment\">// 队头指针 对位指针 元素个数</span></span><br><span class=\"line\">\tT list[SIZE];\t\t\t\t\t<span class=\"comment\">// 元素数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Queue</span>();\t\t\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; item)</span></span>;\t\t<span class=\"comment\">// 入队</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">remove</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t<span class=\"comment\">// 出队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;\t\t\t\t\t<span class=\"comment\">// 清空队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T&amp; <span class=\"title\">getFront</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 访问队首元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 返回队列元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 是否队空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t<span class=\"comment\">// 是否队满</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\">Queue&lt;T, SIZE&gt;::<span class=\"built_in\">Queue</span>() : <span class=\"built_in\">front</span>(<span class=\"number\">0</span>), <span class=\"built_in\">rear</span>(<span class=\"number\">0</span>), <span class=\"built_in\">count</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">insert</span>(<span class=\"type\">const</span> T&amp; item) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(count != SIZE);\t\t\t\t<span class=\"comment\">// 队满报错</span></span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\tlist[rear] = item;\t\t\t\t\t<span class=\"comment\">// 插入队尾</span></span><br><span class=\"line\">\trear = (rear + <span class=\"number\">1</span>) % SIZE;\t\t\t<span class=\"comment\">// 队尾后移, 取余实现循环, 余数范围在 [0, SIZE-1] 循环</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\">T Queue&lt;T, SIZE&gt;::<span class=\"built_in\">remove</span>() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">assert</span>(count != <span class=\"number\">0</span>);\t\t\t\t\t<span class=\"comment\">// 队空报错</span></span><br><span class=\"line\">\tcount--;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = front;\t\t\t\t\t<span class=\"comment\">// 记录队首</span></span><br><span class=\"line\">\tfront = (front + <span class=\"number\">1</span>) % SIZE;\t\t    <span class=\"comment\">// 队头后移, 取余实现循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[temp];\t\t\t\t\t<span class=\"comment\">// 返回首元素的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问队列首元素</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">const</span> T&amp; Queue&lt;T, SIZE&gt;::<span class=\"built_in\">getFront</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list[front];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">int</span>  Queue&lt;T, SIZE&gt;::<span class=\"built_in\">getLength</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否队空</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">isEmpty</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否队满</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">isFull</span>() <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count == SIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空队列</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> SIZE&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Queue&lt;T, SIZE&gt;::<span class=\"built_in\">clear</span>() &#123;</span><br><span class=\"line\">\tcount = front = rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// ! QUEUE_H</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-3\">测试<a title=\"#测试-3\" href=\"#测试-3\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Queue.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tQueue&lt;<span class=\"type\">int</span>, <span class=\"number\">10</span>&gt; q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; !q.<span class=\"built_in\">isFull</span>() ; i++) &#123;</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; !q.<span class=\"built_in\">isEmpty</span>(); i++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; q.<span class=\"built_in\">getFront</span>();</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">remove</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 0123456789</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/28/[C++%E7%AC%94%E8%AE%B0]%E7%BB%A7%E6%89%BF/",
            "url": "https://s1acr.github.io/2023/04/28/[C++%E7%AC%94%E8%AE%B0]%E7%BB%A7%E6%89%BF/",
            "title": "[C++笔记]继承",
            "date_published": "2023-04-28T00:00:00.000Z",
            "content_html": "<h2 id=\"继承与派生\">继承与派生<a title=\"#继承与派生\" href=\"#继承与派生\"></a></h2>\n<h3 id=\"派生类生成过程\">派生类生成过程<a title=\"#派生类生成过程\" href=\"#派生类生成过程\"></a></h3>\n<p>吸收基类成员、改造基类成员、添加新的成员</p>\n<h3 id=\"访问控制\">访问控制<a title=\"#访问控制\" href=\"#访问控制\"></a></h3>\n<p>三种继承方式 public protected private<br>\n无论什么继承方式, 都无法访问基类private成员; public继承访问属性不变; private继承访问属性变private; protected继承访问属性变protected.</p>\n<h3 id=\"类型兼容规则\">类型兼容规则<a title=\"#类型兼容规则\" href=\"#类型兼容规则\"></a></h3>\n<p>类型兼容规则是指在需要基类对象的任何地方，都可以使用公有派生类的对象来替代。</p>\n<ul>\n<li>派生类的对象可以隐含转换为基类对象。</li>\n<li>派生类的对象可以初始化基类的引用。</li>\n<li>派生类的指针可以隐含转换为基类的指针。</li>\n</ul>\n<p>由于类型兼容规则的引入，对于基类及其公有派生类的对象，可以使用相同的函数统一进行处理。因为<code>当函数的形参为基类的对象(或引用、指针)时，实参可以是派生类的对象(或指针)</code> .而没有必要为每一个类设计单独的模块，大大提高了程序的效率。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GrandFather</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;GrandFather Say&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> : <span class=\"keyword\">public</span> GrandFather &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Father Say&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Father &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Son Say&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(GrandFather&amp; gf)</span> </span>&#123;</span><br><span class=\"line\">\tgf.<span class=\"built_in\">say</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tGrandFather gf;</span><br><span class=\"line\">\tFather f;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">\t<span class=\"built_in\">test</span>(gf);</span><br><span class=\"line\">\t<span class=\"built_in\">test</span>(f);</span><br><span class=\"line\">\t<span class=\"built_in\">test</span>(s);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304261729260.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>虽然发生了函数重写, 但通过这个基类型的引用(/指针/对象), 只能访问基类继承的成员.</p>\n<h3 id=\"继承中的构造析构\">继承中的构造析构<a title=\"#继承中的构造析构\" href=\"#继承中的构造析构\"></a></h3>\n<h4 id=\"继承中普通构造函数\">继承中普通构造函数<a title=\"#继承中普通构造函数\" href=\"#继承中普通构造函数\"></a></h4>\n<p>派生类继承了基类除自身构造析构函数之外的成员. 基类的构造函数并没有继承下来，要完成这些工作，就必须给派生类添加新的构造函数。派生类对于基类的很多成员对象是不能直接访问的，因此要完成对基类成员对象的初始化, 需要通过<code>调用基类的构造函数</code>。</p>\n<p>在构造派生类的对象时，会首先<code>调用基类的构造函数</code>，来初始化它们的数据成员，然后按照构造函<code>数初始化列表</code>中指定的方式初始化派生类新增的成员对象，最后才执行派生类构造函数的函数体。<br>\n当一个类同时有多个基类时，对于所有需要给予参数进行初始化的基类，都要显式给出基类名和参数表。对于使用默认构造函数的基类，可以不给出类名。</p>\n<p>派生类构造函数执行的一般次序如下。<br>\n(1)调用基类构造函数，调用顺序按照它们被继承时声明的顺序(从左向右)。<br>\n(2) 对派生类新增的成员对象初始化，调用顺序按照它们在类中声明的顺序。<br>\n(3) 执行派生类的构造函数体中的内容。</p>\n<p>构造函数初始化列表中基类名、对象名之间的次序无关紧要，它们各自出现的顺序可以是任意的，无论它们的顺序怎样安排，基类构造函数的调用和各个成员对象的初始化顺序都是确定的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base_1</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;\t\t\t\t<span class=\"comment\">// 有参</span></span><br><span class=\"line\">\t<span class=\"built_in\">Base_1</span>(<span class=\"type\">int</span> i) : <span class=\"built_in\">i</span>(i) &#123; cout &lt;&lt; <span class=\"string\">&quot;Base_1 Construct_&quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base_2</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> j;\t\t\t\t<span class=\"comment\">// 有参</span></span><br><span class=\"line\">\t<span class=\"built_in\">Base_2</span>(<span class=\"type\">int</span> j) : <span class=\"built_in\">j</span>(j) &#123; cout &lt;&lt; <span class=\"string\">&quot;Base_2 Construct_&quot;</span> &lt;&lt; j &lt;&lt; endl; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base_3</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:\t\t\t\t\t<span class=\"comment\">// 默认</span></span><br><span class=\"line\">\t<span class=\"built_in\">Base_3</span>()&#123; cout &lt;&lt; <span class=\"string\">&quot;Base_3 Construct_*&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base_3, <span class=\"keyword\">public</span> Base_2, <span class=\"keyword\">public</span> Base_1 &#123; <span class=\"comment\">// 继承顺序 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase_1 M_1;\t\t\t\t\t\t\t\t<span class=\"comment\">// 函数执行顺序</span></span><br><span class=\"line\">\tBase_2 M_2;</span><br><span class=\"line\">\t <span class=\"comment\">//Base_1::Base_1(int i) : i(i) &#123;&#125;;</span></span><br><span class=\"line\">\t<span class=\"built_in\">Derived</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c, <span class=\"type\">int</span> d) : <span class=\"built_in\">Base_1</span>(a), <span class=\"built_in\">Base_2</span>(b), <span class=\"built_in\">M_1</span>(c), <span class=\"built_in\">M_2</span>(d)&#123;  </span><br><span class=\"line\">\t\t<span class=\"comment\">// 初始化列表中对基类有参构造函数引用性声明, 并传递初始化值, 没有声明的基类构造函数则调用默认构造.</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Derived Construct&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Derived <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304261909543.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"继承中拷贝构造函数\">继承中拷贝构造函数<a title=\"#继承中拷贝构造函数\" href=\"#继承中拷贝构造函数\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">B</span>(<span class=\"type\">int</span> x): <span class=\"built_in\">x</span>(x)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">B</span>(<span class=\"type\">const</span> B&amp; b) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;base copy&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;x = b.x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> : <span class=\"keyword\">public</span> B &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">D</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y):<span class=\"built_in\">B</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">D</span>(<span class=\"type\">const</span> D&amp; d) : <span class=\"built_in\">B</span>(d) &#123;\t<span class=\"comment\">// 重写拷贝构造, 这里用到类型兼容, 基类要接受的是基类指针.</span></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;derived copy&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;y = d.y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">class</span> D <span class=\"title\">D_1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; D_1.x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; D_1.y &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">class</span> D <span class=\"title\">D_2</span><span class=\"params\">(D_1)</span></span>;   </span><br><span class=\"line\">\t<span class=\"comment\">// 默认调用派生类拷贝构造, 默认的拷贝构造是递归的, 会将派生类对象作为参数调用基类的拷贝构造</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承中析构函数\">继承中析构函数<a title=\"#继承中析构函数\" href=\"#继承中析构函数\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">B</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x) &#123;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">B</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;base destruct&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> : <span class=\"keyword\">public</span> B &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">D</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) :<span class=\"built_in\">B</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">D</span>()&#123; cout &lt;&lt; <span class=\"string\">&quot;derived destruct&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 派生类不继承基类析构函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 编译器会自动生成一个默认析构</span></span><br><span class=\"line\">\t<span class=\"comment\">// 派生类析构函数中没写也隐含调用基类析构函数, 析构与构造顺序相反. </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">class</span> D <span class=\"title\">D_1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"虚继承与虚基类\">虚继承与虚基类<a title=\"#虚继承与虚基类\" href=\"#虚继承与虚基类\"></a></h3>\n<p>当某类的部分或全部直接基类是从另一个共同基类派生而来时，在这些直接基类中从上一级共同基类继承来的成员就拥有相同的名称。在派生类的对象中，这些同名数据成员在内存中同时拥有多个副本，同一个函数名会有多个映射。可以使用作用域分辨符来唯一标识并分别访问它们，也可以将<code>共同基类设置为虚基类</code>，这时从<code>不同的路径继承过来的同名数据成员在内存中就只有一个副本，同一个函数名也只有一个映射</code>。这样就解决了同名成员的唯一标识问题。<br>\n虚基类的声明是在派生类的定义过程中进行的.<br>\n声明基类为派生类的虚基类。在多继承情况下，<code>虚基类关键字的作用范围和继承方式关键字相同，只对紧跟其后的基类起作用</code>。声明了虚基类之后，虚基类的成员在进一步派生过程中和派生类一起维护同一个内存数据副本。</p>\n<p>虚继承解决了复杂继承关系中多个重复含义的成员的问题.</p>\n<p>比如这个例子:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">Base</span>() :<span class=\"built_in\">x</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Base</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base_1</span> : <span class=\"keyword\">public</span>  Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">Base_1</span>() :<span class=\"built_in\">y</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Base_1</span>(<span class=\"type\">int</span> y) : <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base_2</span> :  <span class=\"keyword\">public</span>  Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">Base_2</span>() :<span class=\"built_in\">y</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Base_2</span>(<span class=\"type\">int</span> y) : <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base_1, <span class=\"keyword\">public</span> Base_2 &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> z;</span><br><span class=\"line\">\t<span class=\"built_in\">Derived</span>(<span class=\"type\">int</span> z) : <span class=\"built_in\">z</span>(z) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Derived <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>类图:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304271836108.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304272133158.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304271838733.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Derived中含有两个不同的x 和 y</p>\n<p>将Base_1 Base_2 改成虚继承.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base_1</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span>  Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">Base_1</span>() :<span class=\"built_in\">y</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Base_1</span>(<span class=\"type\">int</span> y) : <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base_2</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span>  Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304272132282.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304272125429.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>类中多了一个虚基类的成员. 发生虚继承的子类中成员多了一个四个字节的<code>虚基类表指针vbptr</code>.vbptr指向<code>该作用域下的虚基类表vbtable</code>.虚基类表中记录了该类中虚基类成员的偏置值. 由该<code>偏置值就可以获取唯一的虚基类成员</code>. 虚函数地址表由编译器为每个类建立.</p>\n<p>vbi是一个该类中<code>虚基类信息表指针</code>, 指向<code>虚基类信息表</code>, 虚基类信息表中记录了虚基类的一些信息, 比如class和offset偏置值.</p>\n<p>分析虚继承发生了什么:<br>\n将基类的成员的吸收形式改为<code>一个虚基类表指针</code>和一<code>将基类的成员开辟在派生类后面</code>, 这个虚基类指针指向了一个虚基类表. 虚基类表中的每个继承的成员偏置值可以按照此时相对位置填充.<br>\n当Derived同时公共继承Base_1和Base_2时, 还是将其成员全部吸收,新增本类成员, 将虚基类成员开辟在本类后, 相同的基类成员在虚基类中只会出现一次, 然后更新虚基类表指针与虚基类表.</p>\n<p>复杂点, 试试把Derived也设置成虚继承.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Base_1, <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Base_2 &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> z;</span><br><span class=\"line\">\t<span class=\"built_in\">Derived</span>(<span class=\"type\">int</span> z) : <span class=\"built_in\">z</span>(z) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304272214166.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304272222983.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看到, Base_1, Base_2 都变成了虚基类, 本类中多了一个<code>虚基类指针vbptr</code>, 用来记录从Base_1, Base_2中虚继承下来的成员. 指向的虚基类表记录了三个虚基类的偏置值. 虚基类Base_1中 又记录了他的虚基类Base的的vbptr.<br>\nBase现在既是Derived的虚基类, 也是Base的虚基类Base_1的虚基类.</p>\n<p>x的地址还是唯一的在虚基类base中, 当我们访问x时会在本类寻找, 本类没有在利用虚函数指针在虚基类表中寻找虚基类的地址偏置值, 再在虚基类中寻找. 虚基类中基类成员是唯一的.</p>\n<p><code>虚继承的目的是为了解决多继承(网状), 出现继承同一个类的多个相同成员副本的问题</code>. 单继承(树状)则不会产生这样的问题. 这样做并不会影响程序的执行, 但本例中没有必要. 除非呈现下图类似的网状关系.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304280151853.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>构造一个类的对象的一般顺序</code>:<br>\n(1) 如果该类有直接或间接的虚基类，则先执行虚基类的构造函数。<br>\n(2) 如果该类有其他基类，则按照它们在继承声明列表中出现的次序，分别执行它们<br>\n的构造函数，但构造过程中，不再执行它们的虚基类的构造函数。<br>\n(3) 按照在类定义中出现的顺序，对派生类中新增的成员对象进行初始化。对于类<br>\n类型的成员对象，如果出现在构造函数初始化列表中，则以其中指定的参数执行构造函<br>\n数，如未出现，则执行默认构造函数;对于基本数据类型的成员对象，如果出现在构造函数<br>\n的初始化列表中，则使用其中指定的值为其赋初值，否则什么也不做。<br>\n(4) 执行构造函数的函数体。</p>\n<h3 id=\"派生类对象的内存布局\">派生类对象的内存布局<a title=\"#派生类对象的内存布局\" href=\"#派生类对象的内存布局\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> d, e, f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tDerived d;</span><br><span class=\"line\">\tDerived* ptr_derived = &amp;d; </span><br><span class=\"line\">\tBase* ptr_base = &amp;d;</span><br><span class=\"line\">\t<span class=\"comment\">// 基类指针接收派生类对象, 只需使基类指针定向到派生类中该基类的首地址,  由于基类指针的偏置量确定, 故无法访问派生类的成员.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 指针类型转换时不止是复制地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304282105272.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>派生类成按访问属性可分为: 不可访问成员, 私有成员, 保护成员, 共有成员.</li>\n<li>如果某派生类的多个基类拥有同名的成员，同时，派生类又新增这样的同名成员，在这种情况下，派生类成员将隐藏所有基类的同名成员。只有在相同的作用域中定义的函数才可以重载。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;from base&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> Base::test;    <span class=\"comment\">// 或者用using 关键词在当前作用域下声明  using 将一个作用域中的名字引入到另一个作用域中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;from derived&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tDerived d;</span><br><span class=\"line\">\t<span class=\"comment\">// d.test(1, 1);   // 既使参数表不同, 符合重载的形式, 但作用域的关系, 派生类只要存在同名成员, 基类的同名成员就是不可见的, 只有在相同的作用域中定义的函数才可以重载。</span></span><br><span class=\"line\">\td.Base::<span class=\"built_in\">test</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 加作用域以区分</span></span><br><span class=\"line\">\td.<span class=\"built_in\">test</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);\t\t<span class=\"comment\">// 使用using关键词后可以调用</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>多继承会出现一种菱形继承的情况, 产生的派生类中存在同级作用域下的同名成员, 此时必须用直接基类的类作用域加以区分.</li>\n<li>void 指针可以指向任何类型的对象，因此 void 类型指针和具体类型的指针具有一般与特殊的关系;基类指针可以指向任何派生类的对象，因此基类指针和派生类指针也具有一般和特殊的关系。从特殊的指针转换到一般的指针是安全的，因此允许隐含转换;从一般的指针转换到特殊的指针是不安全的，因此只能显式地转换。</li>\n<li>而从派生类对象到基类对象的转换之所以能够执行，是因为基类对象的复制构造函数接收一个基类引用的参数，而用派生类对象是可以给基类引用初始化的，因此基类的复制构造函数可以被调用，转换就能够发生。</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/26/[C++%E7%AC%94%E8%AE%B0]%E6%8C%87%E9%92%88/",
            "url": "https://s1acr.github.io/2023/04/26/[C++%E7%AC%94%E8%AE%B0]%E6%8C%87%E9%92%88/",
            "title": "[C++笔记]指针",
            "date_published": "2023-04-26T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>C++笔记</p>\n</blockquote>\n<h2 id=\"指针\">指针<a title=\"#指针\" href=\"#指针\"></a></h2>\n<h3 id=\"函数指针\">函数指针<a title=\"#函数指针\" href=\"#函数指针\"></a></h3>\n<p>函数名就表示函数的代码在内存中的起始地址。调用函数的通常形式&quot;函数名(参数表)“的实质就是&quot;函数代码首地址(参数表)”。<br>\n函数名在表示函数代码起始地址的同时，也包括函数的返回值类型和参数的个数、类型、排列次序等信息。因此在通过函数名调用函数时，编译系统能够自动检查实参与形参是否相符，用函数的返回值参与其他运算时，能自动进行类型一致性检查。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test_01</span><span class=\"params\">(<span class=\"type\">float</span>)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;test_01&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test_02</span><span class=\"params\">(<span class=\"type\">float</span> f)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;test_02_&quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test_03</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;test_03_&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*fp)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (*func_ptr)(<span class=\"type\">float</span>);</span><br><span class=\"line\">\tfunc_ptr = test_01;\t\t\t<span class=\"comment\">// 定义的函数指针必须与test_01相同 void(*)(float)</span></span><br><span class=\"line\">\t<span class=\"built_in\">func_ptr</span>(<span class=\"number\">0.1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunc_ptr = test_02;</span><br><span class=\"line\">\t<span class=\"built_in\">func_ptr</span>(<span class=\"number\">0.2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (*func_ptr_2)(<span class=\"type\">int</span>);</span><br><span class=\"line\">\tfunc_ptr_2 = test_03;</span><br><span class=\"line\">\t<span class=\"built_in\">func_ptr_2</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfp my_fptr = test_03;\t<span class=\"comment\">// 使用自定义的函数指针类型</span></span><br><span class=\"line\">\t<span class=\"built_in\">my_fptr</span>(<span class=\"number\">999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组指针\">数组指针<a title=\"#数组指针\" href=\"#数组指针\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[a<span class=\"number\">-2</span>][a<span class=\"number\">-1</span>][a];\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">int</span>(*arr_ptr)[a<span class=\"number\">-1</span>][a] = arr;   <span class=\"comment\">//\t三维数组的指针 arr_ptr既是指针也是数组名</span></span><br><span class=\"line\">\tcout &lt;&lt; arr_ptr[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tarr_ptr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[a<span class=\"number\">-2</span>][a<span class=\"number\">-1</span>][a]();</span><br><span class=\"line\">\tcout &lt;&lt; arr_ptr[<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; a - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; a; k++) &#123;</span><br><span class=\"line\">\t\t\t\t*(*(*(arr_ptr + i) + j) + k) = (i+<span class=\"number\">1</span>) * <span class=\"number\">100</span> + (j+<span class=\"number\">1</span>) * <span class=\"number\">10</span> + (k+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"comment\">// 用指针偏移量访问数组</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; a - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; a; k++) &#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; arr_ptr[i][j][k] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"comment\">// 用下标访问数组</span></span><br><span class=\"line\">\t\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;===================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] arr_ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this指针\">this指针<a title=\"#this指针\" href=\"#this指针\"></a></h3>\n<p>this 指针实际上是类成员函数的一个隐含参数。在调用类的成员函数时，<code>目的对象的地址会自动作为该参数的值</code>，传递给被调用的成员函数，这样被调函数就能够通过this 指针来访问目的对象的数据成员。对于常成员函数来说，这个隐含的参数是常指针类型的。</p>\n<h3 id=\"指向类的成员的指针\">指向类的成员的指针<a title=\"#指向类的成员的指针\" href=\"#指向类的成员的指针\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> y = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> z;  <span class=\"comment\">// 引用性声明</span></span><br><span class=\"line\">\t<span class=\"built_in\">P</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(string s)</span> <span class=\"type\">const</span></span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">st</span><span class=\"params\">(string s)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> P::z;   <span class=\"comment\">// 定义性声明, 静态成员默认初始值0, 也可以指定值.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">P::st</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">P <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\tP* PTR = &amp;p;</span><br><span class=\"line\">\t<span class=\"type\">int</span> P::* ptr;   <span class=\"comment\">// 声明指向类中数据成员的指针</span></span><br><span class=\"line\">\tptr = &amp;P::x;\t<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\tcout &lt;&lt; p.*ptr &lt;&lt; endl;\t<span class=\"comment\">// 使用对象名调用</span></span><br><span class=\"line\">\tcout &lt;&lt; PTR-&gt;*ptr &lt;&lt; endl;  <span class=\"comment\">// 使用对象指针调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; PTR &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &amp;(p.*ptr) &lt;&lt; endl;\t<span class=\"comment\">// 对象名的地址就是第一个元素的地址</span></span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (P:: * f_ptr) (string) <span class=\"type\">const</span>;\t<span class=\"comment\">// 成员函数指针</span></span><br><span class=\"line\">\tf_ptr = &amp;P::test;\t\t\t\t<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\t(p.*f_ptr)(<span class=\"string\">&quot;good&quot;</span>);\t\t\t\t<span class=\"comment\">// 调用</span></span><br><span class=\"line\">\t(PTR-&gt;*f_ptr)(<span class=\"string\">&quot;nice&quot;</span>);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span>* s_ptr = &amp;P::z;\t\t\t<span class=\"comment\">// 静态成员的指针, 全局变量</span></span><br><span class=\"line\">\tcout &lt;&lt; (*s_ptr) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">void</span> (* sf_ptr)(string) = &amp;P::st;\t\t<span class=\"comment\">// &amp; 可写可不写</span></span><br><span class=\"line\">\t(sf_ptr)(<span class=\"string\">&quot;well&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态内存分配\">动态内存分配<a title=\"#动态内存分配\" href=\"#动态内存分配\"></a></h2>\n<p>在程序运行过程中申请和释放的存储单元也称为堆对象，申请和释放过程一般称为建立和删除。<br>\nnew 数据类型(初始化参数列表);</p>\n<p>如果内存申请成功. new 运算便返回一个指向新分配内存首地址的类型的指针，可以通过这个指针对堆对象进行访问. 如果申请失败，会抛出异常.<br>\n对于基本数据类型，如采不希望在分配内存后设定初值，可以把括号省去<br>\n如采保留括号，但括号中不写任何数值，则表示用。对该对象初始化</p>\n<p>delete 指针名;<br>\n对象的析构函数将被调用。<br>\n对于用 new 建立的对象，只能使用 delete 进行<code>一次删除</code>操作</p>\n<p>new 分配的内存，必须用 delete 加以释放，否则会导致动态分配的内存无法回收，使得程序占据的内存越来越大，造成&quot;内存泄漏&quot;。</p>\n<p>new 动态创建一维数组时，在方括号后仍然可以加小括号&quot;()&quot;, 初始化0;</p>\n<p>利用动态内存分配操作实现了数组的动态创建，使得数组元素的个数可以根据运行时的需要而确定。但是建立和删除数组的过程使得程序略显烦琐，更好的方法是将数组的建立和删除过程封装起来，形成一个<code>动态数组类</code>。</p>\n<p>assert 的含义是&quot;断言&quot;，它是标准 c+十的 cassert 头文件中定义的一个宏，用来判断一个条件表达式的值是否为 true ，如果不为 true ，程序会中止，并且报告出错误，这样就很容易将错误定位。一个程序一般可以以两种模式编译 <code>调试(debug) 模式和发行( release) 模式</code>， assert 只在调试模式下生效，而在发行模式下不执行任何操作，这样兼顾了调试模式的调试需求和发行模式的效率需求。</p>\n<h2 id=\"字符串和string容器\">字符串和string容器<a title=\"#字符串和string容器\" href=\"#字符串和string容器\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// C字符串</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* str = <span class=\"string\">&quot;code&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> str_1[<span class=\"number\">5</span>] = &#123; <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"literal\">NULL</span> &#125;;</span><br><span class=\"line\">\tcout &lt;&lt; str_1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;______________________&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// string容器</span></span><br><span class=\"line\">\t<span class=\"comment\">// string类有需多重载与操作方法</span></span><br><span class=\"line\">\tstring s_1 = <span class=\"string\">&quot;foobar&quot;</span>;\t<span class=\"comment\">// </span></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_2</span><span class=\"params\">(s_1)</span></span>;\t\t<span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_3</span><span class=\"params\">(str)</span></span>;\t\t<span class=\"comment\">// 字符串指针</span></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_4</span><span class=\"params\">(<span class=\"string\">&quot;code&quot;</span>)</span></span>;\t\t<span class=\"comment\">// </span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_5</span><span class=\"params\">(s_1, <span class=\"number\">3</span>, <span class=\"number\">3</span>)</span></span>;\t\t<span class=\"comment\">// bar</span></span><br><span class=\"line\">\tcout &lt;&lt; s_5 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// string(const string&amp; rhs, unsigned int pos, unsigned int n) ;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_6</span><span class=\"params\">(s_1, <span class=\"number\">5</span>)</span></span>;\t\t\t<span class=\"comment\">// r</span></span><br><span class=\"line\">\tcout &lt;&lt; s_6 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">string <span class=\"title\">s_7</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">&#x27;c&#x27;</span>)</span></span>;\t\t<span class=\"comment\">// cccccccccc</span></span><br><span class=\"line\">\tcout &lt;&lt; s_7 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;foo&quot;</span>) + <span class=\"built_in\">string</span>(<span class=\"string\">&quot;bar&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"built_in\">string</span>(<span class=\"string\">&quot;aaa&quot;</span>) &lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;ddd&quot;</span>) )&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;012345&quot;</span>)[<span class=\"number\">3</span>] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 常用方法</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;g&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;o&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;o&quot;</span>).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;d&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;01234567&quot;</span>).<span class=\"built_in\">substr</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;012345&quot;</span>).<span class=\"built_in\">find</span>(<span class=\"string\">&quot;3&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">string</span>(<span class=\"string\">&quot;123&quot;</span>).<span class=\"built_in\">length</span>() &lt;&lt; endl;</span><br><span class=\"line\">\ts_1.<span class=\"built_in\">swap</span>(s_2);\t\t<span class=\"comment\">// s_1 指向 s_2</span></span><br><span class=\"line\">\tcout &lt;&lt; s_1 &lt;&lt; <span class=\"string\">&quot;   &quot;</span> &lt;&lt; s_2 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// ....</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"指针与引用\">指针与引用<a title=\"#指针与引用\" href=\"#指针与引用\"></a></h2>\n<p>所以说指针是一种底层的机制。引用则是一种较高层的机制，在语言概念上它是另一变量的&quot;别名&quot;，把地址这一概念隐藏起来了，但在引用运行时的实现机制中，还不得不借助于地址。二者可以说是殊途同归，差异主要是语言形式, 最后都是靠存储地址来实现的。<code>引用相当于指针常量, 引用是为了方便使用对指针的包装</code>.</p>\n<p>有些时候引用不能代替使用指针:</p>\n<ul>\n<li>使用函数指针，由于没有函数引用，所以函数指针无法被引用替代。</li>\n<li>用 new 动态创建的对象或数组，需要用指针来存储它的地址。</li>\n<li>以数组形式传递大批量数据时，需要用指针类型接收参数</li>\n</ul>\n<p><code>T &amp;s = *(new T()); delete &amp;s;</code>, 这样其实可以, 一般不用.</p>\n<h3 id=\"指针类型安全性\">指针类型安全性<a title=\"#指针类型安全性\" href=\"#指针类型安全性\"></a></h3>\n<p><code>reinterpret_cast</code>可以将一种类型的指针转换为另一种类型的指针. 具有很大的危险性和不确定性，c++ 标准只保证用 reinterpret_cast 转换后与再转换回的值相同.</p>\n<p>C 允许 void 指针隐含地转换为其他任何类型的指针，而 c++ 规定这种情况只能显式转换，这是 c++ 相比的一个安全之处。</p>\n<p>void 指针的另一个用途在于，有时一个指针可能会指向不同类型的对象， void 指针只起一定的传递作用，最终使用该指针时，还需要根据情况将指针还原为它原先的类型。</p>\n<p>有很多从C标准 继承而来的函数会使用 void 指针作为参数和返回值，例如将二段内存空间设为一个固定值 (memset) 、比较两段内存空间 (memcmp) 、复制一段内存空间(memcpy) 、动态分配一段内存空间 (malloc) 、释放动态分配的内存空间 (free) 等，这些操作都是不管具体的数据类型，把不同类型的数据当作无差别的二进制序列。其中，动态内存管理的函数( malloc free 等)已经可以被 c++ new delete 关键字全面替代，而直接内存操作的函数 (memset memcmp , memcpy 等)只能针对对象的二进制表示进行处理，不符合面向对象的要求，一般不用，至多对一些基本数据类型的数组使用。</p>\n<p>总结起来，保证指针类型安全性的办法有以下几种。</p>\n<ul>\n<li>除非非常特殊的底层用途， reinterprt_cast 不要用。</li>\n<li>继承标准 的涉及 void 指针的函数，一般不要用，至多对一些基本数据类型及其数组使用。</li>\n<li>如果一定需要用 void 指针，那么用 static_cast void 指针转换为具体类型的指针时，一定要转换为最初的类型(即当初转换到该 void 指针的指针类型)。</li>\n</ul>\n<h3 id=\"堆对象管理\">堆对象管理<a title=\"#堆对象管理\" href=\"#堆对象管理\"></a></h3>\n<p>通常使用的局部变量，在运行栈上分配空间，空间分配和释放的过程是由编译器生成的代码控制的，一个函数返回后相应的空间会自行释放;而静态生存期变量，其空间的分配是由连接器完成的，它们占用的空间大小始终是固定的，在运行过程中无须释放。然而，用 new 在程序运行时动态创建的堆对象，则必须由程序用 delete 显式删除。如果动态生成的对象不再需要使用也不用 delete 删除，会使得这部分空间始终不能被其他对象利用，造成内存资源的泄漏。</p>\n<p>有时确实需要在<code>不同类之间转移堆对象的归属</code>。例如，如果一个函数需要返回一个对象，为了避免复制构造函数因传递返回值被调用(因为大对象的复制构造会有较大开销) ，可以在函数内用 new 建立该对象，再将该对象的地址返回，但这就要求调用这个函数的类确保这个返回的堆对象最后被删除。每当遇到这种情况，都应当在函数的注释中明确指出，函数的调用者应当负责删除函数所返回的堆对象。这实际上是类的对外接口约定的一部分，不过能否正确履行不由编译器来检查，而需完全由编程者来保证。</p>\n<p>解决动态对象的管理问题，也可以借助于<code>共享指针</code>。共享指针是一种具有指针行为的特殊的类，它会在<code>指向一个堆对象的所有指针都不再有效时，自动将其删除</code>。虽然使用共享指针要付出一定的效率代价，但安全性很好，容易使用。</p>\n<h3 id=\"cosnt_cast\">cosnt_cast<a title=\"#cosnt_cast\" href=\"#cosnt_cast\"></a></h3>\n<p><code>const_cast</code> 只用于将<code>常指针转换为普通指针，将常引用转换为普通引用</code>，而不用来将常对象转换为普通对象，因为这是没有意义的。因为对象(而非引用)的转换会生成对象的副本，而使用常对象本来就可以直接生成普通对象的副本.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>* ptr = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//*ptr = 88;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* q = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">int</span>* &gt;(ptr);</span><br><span class=\"line\">\t*q = <span class=\"number\">88</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"知识点:\">知识点:<a title=\"#知识点:\" href=\"#知识点:\"></a></h2>\n<ol>\n<li>\n<p>指针取值两种方式</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span>* p = &amp;nums[<span class=\"number\">4</span>];</span><br><span class=\"line\">cout &lt;&lt; p[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">cout &lt;&lt; p[<span class=\"number\">-2</span>] &lt;&lt; endl;</span><br><span class=\"line\">cout &lt;&lt; *(p + <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>常引用指向的对象可以是常量, <code>const int&amp; a = 1;</code></p>\n</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/26/[C++%E7%AC%94%E8%AE%B0]%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/",
            "url": "https://s1acr.github.io/2023/04/26/[C++%E7%AC%94%E8%AE%B0]%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/",
            "title": "[C++笔记]类与对象",
            "date_published": "2023-04-26T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>C++笔记</p>\n</blockquote>\n<h2 id=\"类的访问控制\">类的访问控制<a title=\"#类的访问控制\" href=\"#类的访问控制\"></a></h2>\n<p>三种访问权限类型: <code>public</code> <code>private</code> <code>protected</code><br>\n<code>public</code> 公共权限, 类内类外都能访问, 可继承<br>\n<code>private</code> 私有权限, 类内访问, 不可继承<br>\n<code>protected</code> 保护权限, 类内访问, 可继承<br>\n习惯将<code>public</code>写在类的最前.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Computer</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">turnON</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tpower = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Sleep</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;loading 33%..&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Sleep</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;loading 70%..&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Sleep</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;loading 99%..&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;welcome_&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">bool</span> power;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tstring CPU;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tComputer c;</span><br><span class=\"line\">\tc.<span class=\"built_in\">turnON</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造析构\">构造析构<a title=\"#构造析构\" href=\"#构造析构\"></a></h2>\n<p>构造函数在对象创建时自动调用初始化对象.<br>\n析构函数在对象生存期结束时自动调用, 完成内存回收工作.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;construct building&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>(<span class=\"type\">int</span> area) : <span class=\"built_in\">area</span>(area)&#123;&#125;\t<span class=\"comment\">// 初始化列表</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Building</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;destruct building&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> area;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tBuilding b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化列表与构造析构顺序\">初始化列表与构造析构顺序<a title=\"#初始化列表与构造析构顺序\" href=\"#初始化列表与构造析构顺序\"></a></h3>\n<p>有些数据成员的初始化必须在初始化表中进行, 因为构造函数在在执行函数体前会先按初始化表初始化成员变量, 如果没有就是默认值, 有些情况就会报错. 一类是那些没有默认构造函数的内嵌对象, 因为这类对象初始化时必须提供参数，另一类是引用类型的数据成员, 因为引用型变量必须在初始化时绑定引用的对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y):<span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y)&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Point constructor&quot;</span> &lt;&lt; <span class=\"string\">&quot;_&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>(<span class=\"type\">const</span> Point&amp; p) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;x = p.x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;y = p.y;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Point assignment&quot;</span> &lt;&lt; <span class=\"string\">&quot;_&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Point</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Point destructor&quot;</span> &lt;&lt; <span class=\"string\">&quot;_&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Line</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPoint p1, p2;</span><br><span class=\"line\">\t<span class=\"built_in\">Line</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Line</span>(Point p1, Point p2) : <span class=\"built_in\">p1</span>(p1), <span class=\"built_in\">p2</span>(p2) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Line constructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Line</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Line destructor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Point <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Point <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Line</span>(p1, p2);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304242300154.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>构造一个类的对象时, 先构造内嵌对象再构造自身</p>\n<p>构造与析构顺序相反, 因为函数调用栈的关系.</p>\n<h3 id=\"拷贝构造\">拷贝构造<a title=\"#拷贝构造\" href=\"#拷贝构造\"></a></h3>\n<p>把初始值对象的每个数据成员的值都复制到新建立的对象中。因此，也可以说是完成了同类对象的复制 (clone) • 这样得到的对象和原对象具有完全相同的数据成员，即完全相同的属性。</p>\n<h4 id=\"调用拷贝构造时机\">调用拷贝构造时机<a title=\"#调用拷贝构造时机\" href=\"#调用拷贝构造时机\"></a></h4>\n<ul>\n<li>用类的一个对象去初始化类的另一个对象</li>\n<li>调用函数把<code>对象当值传递</code>时, 会用实参初始化形参.</li>\n<li>函数返回值为对象时, 会在主函数中创建一个生存期仅在调用语句中的临时无名对象, 用返回值的对象初始化该临时对象.</li>\n</ul>\n<h4 id=\"浅拷贝的问题\">浅拷贝的问题<a title=\"#浅拷贝的问题\" href=\"#浅拷贝的问题\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_num = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> num)&#123;</span><br><span class=\"line\">\t\tp_num = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p_num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(t1)</span></span>;  <span class=\"comment\">// 或者 Test t2 = t1;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>手动释放指针的时候由于拷贝构造初始化的对象只是值传递, 造成析构时指针的重复释放.<br>\n可以通过重载拷贝构造解决</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_num = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> num)&#123;</span><br><span class=\"line\">\t\tp_num = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// override copy constructor</span></span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">const</span> Test&amp; t) &#123;</span><br><span class=\"line\">\t\tp_num = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*(t.p_num));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">Test</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> p_num;\t<span class=\"comment\">// 释放堆区空间</span></span><br><span class=\"line\">\t\tp_num = <span class=\"literal\">NULL</span>;\t<span class=\"comment\">// 保险起见, 避免野指针.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Test <span class=\"title\">t2</span><span class=\"params\">(t1)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\">结构体<a title=\"#结构体\" href=\"#结构体\"></a></h2>\n<p>C++结构体是一种<code>特殊形态的类</code>, 结构体和类具有不同的默认访问控制属性, 类中默认访问控制权限是 private, 结构体中是 public.<br>\n结构体中, 习惯将数据成员设置为公共; 类中习惯设置为私有.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>: </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> foo;</span><br><span class=\"line\">\t<span class=\"type\">float</span> bar;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Mode</span> : <span class=\"keyword\">public</span> Node &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tNode N;</span><br><span class=\"line\">\tMode M;</span><br><span class=\"line\">\tN = &#123; <span class=\"number\">1</span> , <span class=\"number\">2.0</span> &#125;;</span><br><span class=\"line\">\tN.<span class=\"built_in\">gank</span>();</span><br><span class=\"line\">\tM.<span class=\"built_in\">gank</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合体\">联合体<a title=\"#联合体\" href=\"#联合体\"></a></h2>\n<p>联合体的全部数据成员<code>共享同一组内存单元</code>。<br>\n联合体也可以不声明名称，称为元名联合体。无名联合体没有标记名，只是声明一个<br>\n成员项的集合，这些成员项具有相同的内存地址，可以自成员项的名字直接访问。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> A, B, C;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> A) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(Test) &lt;&lt; endl;  <span class=\"comment\">// 4</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"title class_\">My</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> A, B, C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMy u;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>(<span class=\"type\">int</span> A) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(Test) &lt;&lt; endl;  <span class=\"comment\">// 4</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"位域\">位域<a title=\"#位域\" href=\"#位域\"></a></h2>\n<p>某些数据只需要几个二进制位即可保存, 以通过冒号( :)后的位数来指定为一个位域所占用的二进制位数.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Status</span> &#123; OK, WARNING, ERROR, UNSAFE&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Feedback</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tStatus s1 : <span class=\"number\">2</span>;</span><br><span class=\"line\">\tStatus s2 : <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tFeedback f;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">sizeof</span>(Feedback) &lt;&lt; endl;  <span class=\"comment\">//4</span></span><br><span class=\"line\">\tf.s1 = OK;</span><br><span class=\"line\">\tcout &lt;&lt; f.s1 &lt;&lt; endl;   <span class=\"comment\">// 0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数定义类型转换\">构造函数定义类型转换<a title=\"#构造函数定义类型转换\" href=\"#构造函数定义类型转换\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">P</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> : x(x)&#123;</span>&#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">L</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tP p1, p2;</span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(P p1, P p2) : <span class=\"built_in\">p1</span>(p1), <span class=\"built_in\">p2</span>(p2) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(<span class=\"built_in\">P</span>(<span class=\"number\">1</span>), <span class=\"built_in\">P</span>(<span class=\"number\">2</span>));   <span class=\"comment\">// 构造匿名对象, 也可以看成类型转换</span></span><br><span class=\"line\">\t<span class=\"built_in\">L</span>((P)<span class=\"number\">1</span>, <span class=\"built_in\">P</span>(<span class=\"number\">2</span>));\t<span class=\"comment\">// 自定义类型转换</span></span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(<span class=\"built_in\">static_cast</span>&lt;P&gt;(<span class=\"number\">1</span>), <span class=\"built_in\">static_cast</span>&lt;P&gt;(<span class=\"number\">2</span>));   <span class=\"comment\">// 和上面等同</span></span><br><span class=\"line\">\t<span class=\"built_in\">L</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>);\t\t<span class=\"comment\">// 隐式转换, 参数列表比对时发生构造</span></span><br><span class=\"line\">\t<span class=\"comment\">// 给P 加上explicit 关键词后上, 不允许发生隐式类型转换P p1 = 1 这种情况实际上是P p1 = P(1).</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据的保护和共享\">数据的保护和共享<a title=\"#数据的保护和共享\" href=\"#数据的保护和共享\"></a></h2>\n<h3 id=\"作用域\">作用域<a title=\"#作用域\" href=\"#作用域\"></a></h3>\n<p>作用域是一个标识符在程序正文中有效的区域。C++中标识符的作用域有<code>函数原型作用域</code>、<code>局部作用域(块作用域)</code>、<code>类作用域</code>和<code>命名空间作用域</code>。</p>\n<h4 id=\"命名空间\">命名空间<a title=\"#命名空间\" href=\"#命名空间\"></a></h4>\n<p>namespace , 为了区分不同的程序模块的标识符, 一个命名空间确定了一个命名空间作用域. 在命名空间内部, 可以直接引用当前命名空间中声明的标识符.</p>\n<p>std是C++标准库的命名空间, 使用了该命名空间就不用再加std作用域了.<br>\n命名空间也允许嵌套.<br>\n具有命名空间作用域的变量也是全局变量.</p>\n<p>两类特殊命名空间<br>\n<code>全局命名空间</code>: 所有显示声明的命名空间之外声明的标识符都定义在全局命名空间之下.<br>\n<code>匿名命名空间</code>: 不希望暴露给其他源文件使用, 仅在<code>定义该匿名命名空间的编译单元中生效</code>, 不需要使用声明.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span>  中文模式 &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> 字符串 &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\tstd::string s;</span><br><span class=\"line\">\t\t字符串()&#123;&#125;</span><br><span class=\"line\">\t\t字符串(<span class=\"type\">const</span> <span class=\"type\">char</span>* s):<span class=\"built_in\">s</span>(std::<span class=\"built_in\">string</span>(s))&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"type\">void</span> 输出(字符串&amp; s) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; s.s &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">void</span> 输出(<span class=\"type\">const</span> <span class=\"type\">char</span>* s) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; s &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">void</span> 输入(字符串&amp; s) &#123;</span><br><span class=\"line\">\t\tstd::cin &gt;&gt; s.s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t字符串 环境 = <span class=\"string\">&quot;中文模式v0.1&quot;</span>;  <span class=\"comment\">// 命名空间中的变量也是全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> 中文模式;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t输出(环境);</span><br><span class=\"line\">\t字符串 信息;</span><br><span class=\"line\">\t输出(<span class=\"string\">&quot;请输入信息&quot;</span>);</span><br><span class=\"line\">\t输入(信息);</span><br><span class=\"line\">\t输出(信息);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可见性\">可见性<a title=\"#可见性\" href=\"#可见性\"></a></h4>\n<p>从标识符引用的角度，来看<code>标识符的有效范围</code>，即标识符的可见性<br>\n<img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304251236795.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"对象生存期\">对象生存期<a title=\"#对象生存期\" href=\"#对象生存期\"></a></h3>\n<p>对象从诞生到结束的时间段.</p>\n<h4 id=\"静态生存期\">静态生存期<a title=\"#静态生存期\" href=\"#静态生存期\"></a></h4>\n<p>如果对象的生存期与程序的运行期相同，则称它具有静态生存期。在命名空间作用域中声明的对象都是具有静态生存期的。如果要在函数内部的局部作用域中声明具有静态生存期的对象，则要使用关键字 statìc<br>\n定义时未指定初值的基本类型静态生存期变量，会被赋予0值初始化，而对于动态生存期变量，不指定初值意味着初值不确定。</p>\n<h4 id=\"动态生存期\">动态生存期<a title=\"#动态生存期\" href=\"#动态生存期\"></a></h4>\n<p>在局部作用域中声明的具有动态生存期的对象，习惯上也称为局部生存期对象。局部生存期对象诞生于声明点，结束于声明所在的块执行完毕之时。</p>\n<h3 id=\"静态成员变量\">静态成员变量<a title=\"#静态成员变量\" href=\"#静态成员变量\"></a></h3>\n<p>static关键字来声明静态成员, 类属性是描述类的所有对象共同特征的一个数据项，对于任何对象实例，它的属性值是相同的. 静态数据成员具有静态生存期。</p>\n<p>静态数据成员不属于任何一个对象，因此可以通过类名对它进行访问，</p>\n<p>在类的定义中仅仅对静态数据成员进行<code>引用性声明</code>，必须在<code>命名空间作用域</code>的某个地方使用<code>类名限定定义性声明</code>，这时也可以进行初始化.</p>\n<h3 id=\"静态成员函数\">静态成员函数<a title=\"#静态成员函数\" href=\"#静态成员函数\"></a></h3>\n<p>静态成员函数可以直接访问该类的静态数据和函数成员。而访问非静态成员，必须通过对象名。<br>\n静态成员可以通过类名访问.</p>\n<h3 id=\"友元\">友元<a title=\"#友元\" href=\"#友元\"></a></h3>\n<p>友元关系提供了不同类或对象的成员函数之间、类的成员函数与一般函数之间进行数据共享的机制.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">double</span> <span class=\"title\">getLen</span><span class=\"params\">(P p1, P p2)</span></span>;   <span class=\"comment\">// 设置getLen为P友元, 可以访问P中所有成员</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">double</span> x;</span><br><span class=\"line\">\t<span class=\"type\">double</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">getLen</span><span class=\"params\">(P p1, P p2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">pow</span>(p1.x - p2.x, <span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(p1.y - p2.y, <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">getLen</span>(<span class=\"built_in\">P</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">P</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>)) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"共享数据的保护\">共享数据的保护<a title=\"#共享数据的保护\" href=\"#共享数据的保护\"></a></h3>\n<p>虽然数据隐藏保证了数据的安全性，但各种形式的数据共享却又不同程度地破坏了数据的安全。因此，对于<code>既需要共享又需要防止改变的数据应该声明为常量</code>。因为常量在程序运行期间是不可改变的，所以可以有效地保护数据。</p>\n<h4 id=\"常对象\">常对象<a title=\"#常对象\" href=\"#常对象\"></a></h4>\n<p>常对象的数据成员值在对象的整个生存期间内不能被改变. 常对象必须在声明时初始化，因为之后不能更改。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> P <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;\t<span class=\"comment\">// 常对象, 不可修改</span></span><br><span class=\"line\">\t<span class=\"function\">P <span class=\"type\">const</span> <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">4</span>)</span></span>;  <span class=\"comment\">// 放在类型名后也可以 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常数据成员\">常数据成员<a title=\"#常数据成员\" href=\"#常数据成员\"></a></h4>\n<p>常数据成员只能被初始化，不能被赋值，因此要用初始化列表，或者定义时初始化.</p>\n<h4 id=\"常成员函数\">常成员函数<a title=\"#常成员函数\" href=\"#常成员函数\"></a></h4>\n<p>成员函数有两类, 修改对象状态的成员函数，获取对象状态的成员函数。<br>\n<code>常成员函数就是一种获取成员状态的函数，并且不能改变对象状态</code></p>\n<ol>\n<li>常对象只能调用常成员函数</li>\n<li>常成员函数只能调用常成员</li>\n<li>常成员函数可以成为其它函数的重载</li>\n<li>常成员函数不能用于初始化对象，因为这时只能叫赋值</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">mutable</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">\t<span class=\"built_in\">Test</span>() : <span class=\"built_in\">x</span>(<span class=\"number\">111</span>)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;\t<span class=\"comment\">// 常成员函数, 注意标志是后面那个 const</span></span><br><span class=\"line\">\t\ty = <span class=\"number\">100</span>;\t\t\t<span class=\"comment\">// 常成员函数不能改变对象的状态\t\t\t\t\t\t     </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//getY();\t\t // 但我们可以用 mutable 关键字使在常成员函数中也可改变成员变量的值\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tTest t;</span><br><span class=\"line\">\tcout &lt;&lt; t.<span class=\"built_in\">getX</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"关于const和引用\">关于const和引用<a title=\"#关于const和引用\" href=\"#关于const和引用\"></a></h4>\n<p>const 关键字修饰其实就是指定一个空间不可被修改, 其中的值就是固定的.<br>\n比如C++中的引用, 本质上是一个 <code>指针常量</code>, 固定指向的指针. 引用发生赋值实际上是取<br>\n常引用实际上是 <code>(常量指针)常量</code>, 固定指向且不可修改指向的值的指针.<br>\n但凡引用数据类型就必须涉及到’指针’, 指针实际上谈指向有些不准确的意味, 就是用来存放地址的特殊变量.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">P</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">x</span>(x) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tP p;</span><br><span class=\"line\">\tP&amp; quote_p = p; </span><br><span class=\"line\">\tP* <span class=\"type\">const</span> ptr_p = &amp;p;\t<span class=\"comment\">// 上面的引用相当于定义指针常量, 引用的写法是一种简化.</span></span><br><span class=\"line\">\tptr_p-&gt;x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tP&amp; test_p = quote_p;\t<span class=\"comment\">// 引用赋值, test_p 也是指向p的指针常量, 指向确定了就不可修改.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tP pp;</span><br><span class=\"line\">\t<span class=\"type\">const</span> P&amp; quote_pp = pp; <span class=\"comment\">// 常引用, 不可修改指向的值</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> P* <span class=\"type\">const</span> ptr_pp = &amp;pp; <span class=\"comment\">// 上式相当于一个常量指针常量\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多文件结构和编译预处理命令\">多文件结构和编译预处理命令<a title=\"#多文件结构和编译预处理命令\" href=\"#多文件结构和编译预处理命令\"></a></h2>\n<h3 id=\"多文件组织结构\">多文件组织结构<a title=\"#多文件组织结构\" href=\"#多文件组织结构\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304251511191.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>#include &lt;filename&gt;</code>表示按照标准方式搜索要嵌入的文件，该文件位于编译环境的 include 子目录下，一般要嵌入系统提供的标准文件时采用这样的方式,<br>\n<code>#include &quot;filename&quot;</code>, 表示首先在当前目录下搜索要嵌入的文件，如果没有，再按照标准方式搜索，对用户自己编写的文件一般采用这种方式，</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304251529318.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>决定一个声明放在源文件中还是头文件中的一般原则是，将<code>需要分配空间的定义放在源文件中</code>，例如函数的定义(需要为函数代码分配空间)、命名空间作用域中变量的定义(需要为变量分配空间)等;而将不需要分配空间的声明放在头文件中，例如类声明、外部函数的原型声明、外部变量的声明、基本数据类型常量的声明等。内联函数比较特殊，由于它的内容需要嵌入到每个调用它的函数之中，所以对于那些需要被多个编译单元调用的内联函数，它们的代码应该被各个编译单元可见，这些内联函数的定义应当出现在头文件中。</p>\n<h3 id=\"外部变量与外部函数\">外部变量与外部函数<a title=\"#外部变量与外部函数\" href=\"#外部变量与外部函数\"></a></h3>\n<p>如果一个变量除了在定义它的源文件中可以使用外，还能被其他文件使用，那么就称这个变量是外部变量。命名空间作用域中定义的变量，默认情况下都是外部变量，但在其他文件中如果需要使用这一变量，需要用<code>extern</code>关键字加以声明。</p>\n<p>通常情况下，变量和函数的定义都放在源文件中，而对<code>外部变量和外部函数的引用性声明则放在头文件</code>中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file one</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> i = <span class=\"number\">9</span>;\t\t\t\t<span class=\"comment\">// 定义性声明, 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; &amp;i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\ti++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// another</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;\t\t\t\t<span class=\"comment\">// 引用性声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test</span>();</span><br><span class=\"line\">\tcout &lt;&lt; &amp;i &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"标准c++库\">标准C++库<a title=\"#标准c++库\" href=\"#标准c++库\"></a></h3>\n<p>C语言中，系统函数、系统的外部变量和一些宏定义都放置在运行库( run-time library) 中。 c++ 的库中除继续保留了大部分 语言系统函数外，还加入了预定义的模板和类。标准 c++ 类库是一个极为灵活并可扩展的可<code>重用软件模块的集合</code>。标准 c++ 类与组件在逻辑上分为如下6种类型。包含了必要的头文件后，就可以使用其中预定义的内容了。</p>\n<ul>\n<li>输入输出类;</li>\n<li>容器类与 ADT( 抽象数据类型) ;</li>\n<li>存储管理类;</li>\n<li>算法;</li>\n<li>错误处理;</li>\n<li>运行环境支持。</li>\n</ul>\n<h3 id=\"编译预处理\">编译预处理<a title=\"#编译预处理\" href=\"#编译预处理\"></a></h3>\n<p>在编译器对摞程序进行编译之前，首先要由预处理器对程序文本进行预处理。<code>预处理器提供了一组编译预处理指令和预处理操作符</code>。预处理指令实际上不是 c++ 语言的一部分，它只是用来扩充 c++ 程序设计的环境。所有的预处理指令在程序中都是以&quot;#&quot;来引导，每一条预处理指令单独占用一行，不要用分号结束。预处理指令可以根据需要出现在程序中的任何位置。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">#define</td>\n<td style=\"text-align:left\">定义宏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#include</td>\n<td style=\"text-align:left\">包含一个源代码文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#undef</td>\n<td style=\"text-align:left\">取消已定义的宏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#ifdef</td>\n<td style=\"text-align:left\">如果宏已经定义，则返回真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#ifndef</td>\n<td style=\"text-align:left\">如果宏没有定义，则返回真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#if</td>\n<td style=\"text-align:left\">如果给定条件为真，则编译下面代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#else</td>\n<td style=\"text-align:left\">#if 的替代方案</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#elif</td>\n<td style=\"text-align:left\">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#endif</td>\n<td style=\"text-align:left\">结束一个 #if……#else 条件编译块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#error</td>\n<td style=\"text-align:left\">当遇到标准错误时，输出错误消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#pragma</td>\n<td style=\"text-align:left\">使用标准化方法，向编译器发布特殊的命令到编译器中</td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __STDC__</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;yes\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG \\</span></span><br><span class=\"line\"><span class=\"meta\">printf(<span class=\"string\">&quot;debug begin!!\\n&quot;</span>);         <span class=\"comment\">// 这个 \\ 是宏延续运算符, 与下一句之间必须只有一个换行</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> squre(x) (x*x)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Max(x, y) (x &gt; y ? x : y)</span></span><br><span class=\"line\"><span class=\"comment\">// 参数化宏来模拟函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> tokenpaster(n) printf (<span class=\"string\">&quot;token&quot;</span> #n <span class=\"string\">&quot; = %d\\n&quot;</span>, token##n)</span></span><br><span class=\"line\"><span class=\"comment\">// #标记粘连运算符, 允许宏定义中两个独立标记合并为一个, #n 代表取n的字符串, ##n表示将token与n两个字符串粘连成一个新标识符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FILE__);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, __LINE__);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __DATE__);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __TIME__); <span class=\"comment\">// 预定义宏</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(&quot;%s\\n&quot;, __STDC__);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> token30 = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">tokenpaster</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">squre</span>(<span class=\"number\">5</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">Max</span>(<span class=\"number\">88</span>, <span class=\"number\">99</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"typedef-vs-#define\">typedef vs #define<a title=\"#typedef-vs-#define\" href=\"#typedef-vs-#define\"></a></h4>\n<p>typedef 仅限于为类型定义符号名称，#define不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。<br>\ntypedef 是由编译器执行解释的，#define 语句是由预编译器进行处理的。</p>\n<h2 id=\"代码的编译连接与执行过程\">代码的编译连接与执行过程<a title=\"#代码的编译连接与执行过程\" href=\"#代码的编译连接与执行过程\"></a></h2>\n<p><code>编译</code><br>\n一个个源文件，经过编译系统的处理，生成目标文件的过程叫做编译。编译是对一个个源文件分别处理的，因此每个源文件构成了一个独立的编译单元，编译过程中不同的编译单元互不影响。<br>\n目标文件主要用来描述程序在运行过程中需要放在内存中的内容，这些内容包括两大类一一代码和数据。相应地，<code>目标文件也分成代码段和数据段</code>。<br>\n<code>代码段(. text)</code>中的内容就是源文件中定义的一个个<code>函数编译后得到的目标代码</code>。<br>\n<code>数据段</code>中包含对源文件中定义的各个<code>静态生存期对象(包括基本类型变量)</code>的描述。<br>\n数据段又分为初始化的数据段(. data) 和未初始化的数据段(. bss) 。</p>\n<p><code>初始化的数据段</code>中包括了那些在<code>定义的同时设置了初值的静态生存期对象</code>(通过执行构造函数的方式赋初值的不在此列)。这些对象在运行时占多少内存空间，在目标文件中就要提供多少空间存放它们的初值。<br>\n其他静态生存期对象，都放在<code>未初始化的数据段中</code>。由于它们没有静态的初值，目标文件中不需要保留专门空间存储它们的信息，只需记录这个段的大小。</p>\n<p>不同编译单元间的相同变量或函数的联系要通过这些变量或函数的名字来建立，这些名字都存放在目标代码的符号表中。</p>\n<p>符号表是用来把各个标识符名称和它们在各段中的地址关联起来的数据结构。具体地说，符号表应当包含若干个条目，每个静态生存期对象或函数都对应于符号表中的一个条目。这个条目存储了该静态生存期对象或函数的名字和它在该目标文件中的位置，位置是通过它所在那个段以及它相对于该段段首的偏移地址来表示。</p>\n<p>对于那些在编译单元中被引用但未定义的外部变量、外部函数，在符号表中也有相关的条目，但条目中只有符号名，而位置信息是未定义的。</p>\n<p>符号表中，函数并不只以它在源程序中的名字命名，函数在符号表中的名字至少要包括源程序中的函数名和参数表类型信息。</p>\n<p>目标文件代码段的目标代码中对静态生存期对象的引用和对函数的调用所使用的地址都是未定义的，因为它们的地址在连接阶段才能确定。</p>\n<p>在目标文件中还需要保存一些信息，用来将目标代码中的地址和符号表中的条目建立关联，这样到连接时，通过这些信息就可以将这些指令中的地址设置为有效的地址。这些信息称为重定位信息。</p>\n<p><code>链接</code></p>\n<p>在连接期间，需要将各个编译单元的目标文件和运行库当中被调用过的单元加以合并。运行库实际上就是一个个目标代码文件的集合，运行库的各个组成部分a.o这样的目标代码具有相同的结构。经过合并后，不同编译单元的代码段和两类数据段就分别合并到一起了，程序在运行时代码和静态数据需要占据的内存空间就全部已知了，因此所有代码和数据都可以被分配确定的地址了。</p>\n<p>与此同时，各个目标文件的符号表也可以被综合起来，符号表的每个条目都会有确定的地址。重定位信息这时也能发挥作用了，各段代码中未定义的地址，都可以被替换为有效地址。</p>\n<p>连接的对象除了用户源程序生成的目标文件外，还有系统的运行库。例如，执行输入输出功能，调用 sin.fabs 这类标准函数，都需要通过系统运行库。此外，系统运行库中还包括程序的引导代码。在执行 maln 函数之前，程序需要执行一些初始化工作;在 main函数返回后，需要通知操作系统程序执行完毕，这些都要由运行库中的代码来完成。</p>\n<h2 id=\"知识点:\">知识点:<a title=\"#知识点:\" href=\"#知识点:\"></a></h2>\n<ol>\n<li>OOP基本特征: <code>抽象封装继承多态</code></li>\n<li>通常情况下， using namespace 语句不宜放在头文件中，因为这会使一个命名空间不被察觉地对一个源文件开放。</li>\n<li>zu%, 格式化输出size_t 类型</li>\n<li>出现不安全报错可以添加编译预处理指令<code>#pragma warning(disable _code)</code></li>\n<li>mutable修饰的成员对象在任何时候都不会被视为常对象, 也就是说常对象的mutable对象成员是可变的</li>\n<li>函数声明中可以不指定形参名, 只给类型.</li>\n</ol>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/22/[C++%E7%AC%94%E8%AE%B0]%E5%9F%BA%E7%A1%80/",
            "url": "https://s1acr.github.io/2023/04/22/[C++%E7%AC%94%E8%AE%B0]%E5%9F%BA%E7%A1%80/",
            "title": "[C++笔记]基础",
            "date_published": "2023-04-22T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>C++课程笔记.</p>\n</blockquote>\n<h2 id=\"c++简介\">C++简介<a title=\"#c++简介\" href=\"#c++简介\"></a></h2>\n<p>C语言于1969年至1973年间，为了移植与开发UNIX操作系统，由<code>丹尼斯·里奇</code>(Dennis Ritchie)与肯·汤普逊(Ken Thompson)，以B语言为基础，在贝尔实验室设计、开发出来.<br>\n但C仅是一个面向过程的语言. 为了实现更好的C ,<code>比雅尼·斯特劳斯特鲁普</code>(Bjarne Stroustrup)博士在贝尔实验室工作期间在<code>20世纪80年代</code>发明并实现了C++. 起初，这种语言被称作“C with Classes” 作为C语言的增强版出现。随后，C++不断增加新特性。虚函数、运算符重载、多继承、标准模板库、异常处理、运行时类型信息、名字空间等概念逐渐纳入标准草案。1998年，国际标准组织颁布了C++程序设计语言的第一个国际标准ISO/IEC 14882:1998.</p>\n<h3 id=\"c++程序过程\">C++程序过程<a title=\"#c++程序过程\" href=\"#c++程序过程\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304222105609.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>通过编辑器等手段将程序输入到计算机, 生成<code>.cpp</code>磁盘文件, 编译器进行编译转换为机器语言文件<code>.obj</code>, 再将多个目标文件与库文件等链接生成可执行文件, 然后运行/调试.</p>\n<h3 id=\"c++关键字\">C++关键字<a title=\"#c++关键字\" href=\"#c++关键字\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304222121166.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"c++标识符\">C++标识符<a title=\"#c++标识符\" href=\"#c++标识符\"></a></h3>\n<ul>\n<li>以大写字母、小写字母或下划线开始。</li>\n<li>可以由以大写字母、小写字母、下划线或数字 O~9 组成</li>\n<li>大小写敏感, 不能是C++关键字</li>\n</ul>\n<h3 id=\"基本数据类型\">基本数据类型<a title=\"#基本数据类型\" href=\"#基本数据类型\"></a></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304222125406.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"基础\">基础<a title=\"#基础\" href=\"#基础\"></a></h2>\n<h3 id=\"位运算\">位运算<a title=\"#位运算\" href=\"#位运算\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num_1 = <span class=\"number\">015</span>; <span class=\"comment\">// 001 101</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num_2 = <span class=\"number\">016</span>; <span class=\"comment\">// 001 110</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num_3 = <span class=\"number\">0xffffffff</span>; <span class=\"comment\">// x86 32位1</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num_4 = <span class=\"number\">0x7fffffff</span>; <span class=\"comment\">// x86 0, 31位1</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> num_5 = <span class=\"number\">0xf0ffffff</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%o\\n&quot;</span>, num_1 &amp; num_2);  <span class=\"comment\">//按位与 014, 001 100</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%o\\n&quot;</span>, num_1 | num_2);  <span class=\"comment\">//按位或 017, 001 111</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%o\\n&quot;</span>, num_1 ^ num_2);  <span class=\"comment\">//按位异或 03, 000 011</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, ~num_3);\t\t\t<span class=\"comment\">//按位取反  0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%o\\n&quot;</span>, num_1 &lt;&lt; <span class=\"number\">2</span>);\t\t<span class=\"comment\">//左移两位 064, 110 100</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%o\\n&quot;</span>, num_1 &gt;&gt; <span class=\"number\">2</span>);\t\t<span class=\"comment\">//右移两位 03, 000 011</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 右移有两种补法, 要么补符号位, 要么补0, 测试的是补符号位 </span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, num_3 &gt;&gt; <span class=\"number\">4</span>);\t\t<span class=\"comment\">//右移4位 ffffffff, 每次移位会补上符号位1</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, num_3 &lt;&lt; <span class=\"number\">4</span>);\t\t<span class=\"comment\">//左移4位 fffffff0</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, num_4 &gt;&gt; <span class=\"number\">4</span>);\t\t<span class=\"comment\">//右移4位 07ffffff, 每次移位会补上符号位0</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, num_4 &lt;&lt; <span class=\"number\">4</span>);\t\t<span class=\"comment\">//左移4位 fffffff0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 无论左移右移, 移出的位数都舍去</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, num_5 &lt;&lt; <span class=\"number\">4</span>);\t\t<span class=\"comment\">//左移4位 0ffffff0, 符号位移去了</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型转换\">类型转换<a title=\"#类型转换\" href=\"#类型转换\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 隐式转换, 从低到高</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"number\">90</span> + <span class=\"number\">0.3333</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示转换</span></span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"type\">int</span>)<span class=\"number\">90.5</span> &lt;&lt; endl; \t<span class=\"comment\">// C 风格, float --&gt; int 截断 90</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">int</span>(<span class=\"number\">90.5</span>) &lt;&lt; endl;  <span class=\"comment\">// C++ 风格</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 四种转换操作符</span></span><br><span class=\"line\">\t<span class=\"comment\">// const_cast&lt;type&gt;(expression)</span></span><br><span class=\"line\">\t<span class=\"comment\">// dynamic_cast&lt;type&gt;(expression)</span></span><br><span class=\"line\">\t<span class=\"comment\">// reinterpret_cast&lt;type&gt;(expression)</span></span><br><span class=\"line\">\t<span class=\"comment\">// static_cast&lt;type&gt;(expression)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">bool</span>&gt;(<span class=\"string\">&quot;slacr&quot;</span>) &lt;&lt; endl; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单i/o-格式控制\">简单I/O 格式控制<a title=\"#简单i/o-格式控制\" href=\"#简单i/o-格式控制\"></a></h3>\n<p><code>iostream 和 iomanip </code>库中有些控制格式的函数和常量标识符<br>\n<a href=\"https://zh.cppreference.com/w/cpp/header/iomanip\" target=\"_blank\">https://zh.cppreference.com/w/cpp/header/iomanip</a><br>\n<a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/ios?view=msvc-170\" target=\"_blank\">https://learn.microsoft.com/zh-cn/cpp/standard-library/ios?view=msvc-170</a><br>\n<a href=\"https://zh.cppreference.com/w/cpp/header/ios\" target=\"_blank\">https://zh.cppreference.com/w/cpp/header/ios</a></p>\n<p>可能用到的几个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> hex_num = <span class=\"number\">0xffffffff</span>;\t\t<span class=\"comment\">// x86 32位1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ios</span></span><br><span class=\"line\">\tcout &lt;&lt; oct &lt;&lt; hex_num &lt;&lt; endl;\t\t\t<span class=\"comment\">// 37777777777_O, 32位1</span></span><br><span class=\"line\"> \tcout &lt;&lt; dec &lt;&lt; hex_num &lt;&lt; endl;\t\t\t<span class=\"comment\">// 4294967295_D, 2^32-1</span></span><br><span class=\"line\">\tcout &lt;&lt; hex &lt;&lt; hex_num &lt;&lt; endl;\t\t\t<span class=\"comment\">// ffffffff_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; noboolalpha &lt;&lt; <span class=\"literal\">true</span> &lt;&lt; endl;\t<span class=\"comment\">// 1</span></span><br><span class=\"line\">\tcout &lt;&lt; boolalpha &lt;&lt; <span class=\"literal\">true</span> &lt;&lt; endl;\t\t<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; dec &lt;&lt; showpos;\t\t\t\t\t<span class=\"comment\">// 显示符号</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;\t\t\t\t\t\t<span class=\"comment\">// -1</span></span><br><span class=\"line\">\tcout &lt;&lt;  <span class=\"number\">1</span> &lt;&lt; endl;\t\t\t\t\t\t<span class=\"comment\">// +1</span></span><br><span class=\"line\">\tcout &lt;&lt; noshowpos;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; fixed &lt;&lt; <span class=\"number\">333.222211</span> &lt;&lt; endl;\t<span class=\"comment\">// 显示浮点的默认6位, 超过则是defaultfloat</span></span><br><span class=\"line\">\tcout &lt;&lt; scientific &lt;&lt; <span class=\"number\">333.22221</span> &lt;&lt; endl;<span class=\"comment\">// 科学计数法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// iomanip</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">6</span>) &lt;&lt; left &lt;&lt; <span class=\"built_in\">setfill</span>(<span class=\"string\">&#x27;?&#x27;</span>) &lt;&lt; <span class=\"string\">&quot;||&quot;</span> &lt;&lt; <span class=\"string\">&quot;||&quot;</span> &lt;&lt; endl; </span><br><span class=\"line\">\t<span class=\"comment\">// 位宽6个字符, 左对齐, &#x27;?&#x27; 填充</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"number\">7.33333</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">// 两位有效数字</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义数据类型\">自定义数据类型<a title=\"#自定义数据类型\" href=\"#自定义数据类型\"></a></h3>\n<h4 id=\"typedef\">typedef<a title=\"#typedef\" href=\"#typedef\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring fur_color;</span><br><span class=\"line\">\t<span class=\"type\">float</span> weight;</span><br><span class=\"line\">&#125; Cat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tCat gaffe;</span><br><span class=\"line\">\tgaffe.fur_color = <span class=\"string\">&quot;orange&quot;</span>;</span><br><span class=\"line\">\tgaffe.weight = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;gaffe is a &quot;</span> &lt;&lt; gaffe.fur_color &lt;&lt; <span class=\"string\">&quot; cat&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// gaffe is a orange cat</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"enum\">enum<a title=\"#enum\" href=\"#enum\"></a></h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Choice</span> &#123; A, B, C &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tChoice answer_sheet[<span class=\"number\">3</span>];</span><br><span class=\"line\">\tanswer_sheet[<span class=\"number\">0</span>] = A;</span><br><span class=\"line\">\tanswer_sheet[<span class=\"number\">1</span>] = A;</span><br><span class=\"line\">\tanswer_sheet[<span class=\"number\">2</span>] = B;</span><br><span class=\"line\">\t<span class=\"type\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tChoice standard_answer[<span class=\"number\">3</span>] = &#123; C, A, B &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (answer_sheet[i] == standard_answer[i]) &#123;</span><br><span class=\"line\">\t\t\tscore++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;you got &quot;</span> &lt;&lt; score &lt;&lt; <span class=\"string\">&quot;/3 in total!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\">函数<a title=\"#函数\" href=\"#函数\"></a></h2>\n<h3 id=\"内联函数\">内联函数<a title=\"#内联函数\" href=\"#内联函数\"></a></h3>\n<p>类的成员函数可以分为<code>内联函数和外联函数</code>。<code>内联函数是指那些定义在类体内的成员函数</code>，即该函数的函数体放在类体内。而说明在类体内，定义在类体外的成员函数叫外联函数。外联函数的函数体在类的实现部分。</p>\n<p>内联函数在调用时不是像一般的函数那样要转去执行被调用函数的函数体，执行完成后再转回调用函数中，执行其后语句，而是在调用函数处用内联函数体的代码来替换，这样将会节省调用开销，提高运行速度。</p>\n<p>内联函数与前面讲过的带参数的宏定义进行一下比较，它们的代码效率是一样的，但是内联函数要优于宏定义，因为内联函数遵循函数的类型和作用域规则，它与一般函数更相近，在一些编译器中，一旦关上内联扩展，将与一般函数一样进行调用，调试比较方便。</p>\n<p>内联函数不是在调用时发生控制转移, 内联函数在<code>编译时将函数体嵌入到调用处</code>, 节省了参数传递, 控制转移等开销.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">inline_func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;just a inline_func |=_=|&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数默认参数\">函数默认参数<a title=\"#函数默认参数\" href=\"#函数默认参数\"></a></h3>\n<p>函数可以有默认参数, <code>默认参数只能排在参数表最后</code>. 并且声明和实现的时候函数的默认参数只用写一次, 否则重定义.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getRes</span><span class=\"params\">(string ok = <span class=\"string\">&quot;&quot;</span>, string err = <span class=\"string\">&quot;&quot;</span>, string def = <span class=\"string\">&quot;nothing here&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">getRes</span>(<span class=\"string\">&quot;everything is ok, sever is running...&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">getRes</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;compile error, `syntax` invalid! &quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">getRes</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getRes</span><span class=\"params\">(string ok <span class=\"comment\">/*= &quot;&quot;*/</span>, string err<span class=\"comment\">/* = &quot;&quot;*/</span>, string def <span class=\"comment\">/*= &quot;nothing here&quot;*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ok != <span class=\"string\">&quot;&quot;</span>)\tcout &lt;&lt; ok &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (err != <span class=\"string\">&quot;&quot;</span>) cout &lt;&lt; err &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout &lt;&lt; def &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数重载\">函数重载<a title=\"#函数重载\" href=\"#函数重载\"></a></h3>\n<p>函数名相同, 但形参<code>个数\\类型\\顺序</code>不同, 会被编译器判定为不同的函数. 在调用的过程中, 会根据同名函数的参数表判定调用哪一个函数.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Hero</span> &#123;</span><br><span class=\"line\">\tstring name = <span class=\"string\">&quot;undefined&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ATK = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">float</span> price = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showAtrr</span><span class=\"params\">(Hero&amp; h)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;┏━━━━━━┳━━━━━━━━━━━━┓&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;┃ name ┃&quot;</span> &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">12</span>) &lt;&lt; h.name &lt;&lt; <span class=\"string\">&quot;┃&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;┣━━━━━━╋━━━━━━━━━━━━┫&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;┃ ATK  ┃&quot;</span> &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">12</span>) &lt;&lt; h.ATK &lt;&lt; <span class=\"string\">&quot;┃&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;┣━━━━━━╋━━━━━━━━━━━━┫&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;┃ price┃&quot;</span> &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">12</span>) &lt;&lt; h.price &lt;&lt; <span class=\"string\">&quot;┃&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;┗━━━━━━┻━━━━━━━━━━━━┛&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setAtrr</span><span class=\"params\">(Hero&amp; hero, string name)</span> </span>&#123;</span><br><span class=\"line\">\thero.name = name;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;set name ok&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">showAtrr</span>(hero);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setAtrr</span><span class=\"params\">(Hero&amp; hero, <span class=\"type\">int</span> ATK)</span> </span>&#123;</span><br><span class=\"line\">\thero.ATK = ATK;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;set ATK ok&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">showAtrr</span>(hero);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setAtrr</span><span class=\"params\">(Hero&amp; hero, string name, <span class=\"type\">int</span> ATK, <span class=\"type\">float</span> price)</span> </span>&#123;</span><br><span class=\"line\">\thero.ATK = ATK;</span><br><span class=\"line\">\thero.name = name;</span><br><span class=\"line\">\thero.price = price;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;set all Atrr ok&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">showAtrr</span>(hero);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tHero h;</span><br><span class=\"line\">\t<span class=\"built_in\">setAtrr</span>(h, <span class=\"string\">&quot;ironman&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">setAtrr</span>(h, <span class=\"number\">9999</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">setAtrr</span>(h, <span class=\"string\">&quot;batman&quot;</span>, <span class=\"number\">888</span>, <span class=\"number\">19.99F</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304232200551.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"知识点\">知识点<a title=\"#知识点\" href=\"#知识点\"></a></h2>\n<ol>\n<li>实型常量默认为<code>double</code>, <code>float</code>型可以加后缀F以区分.</li>\n<li>标识不同进制可以加后缀 H(hexadecimal, HEX) O(Octal, OCT) D(Decimal, DEC) B(Binary BIN).</li>\n<li>八进制和十六进制能用转义字符表示 \\nnn \\xnnn. 字面量 0nnn, 0xnnn.</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">0x12</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> num_char = <span class=\"string\">&#x27;\\x12&#x27;</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;num: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;num_char: &quot;</span> &lt;&lt; num_char &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202304222153052.png\" alt=\"\" loading=\"lazy\"><br>\n4. 逗号也是一个运算符, 先求左式, 在求右式, 结果为左式.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tnum = (num++, num++, <span class=\"number\">3</span> * num);</span><br><span class=\"line\">\tcout &lt;&lt; num; <span class=\"comment\">// 6 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ol>\n<li>《C++语言程序设计（第4版）》 IBSN 9787302227984</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/C%2B%2B\" target=\"_blank\">Wikipedia-C++</a></li>\n<li><a href=\"https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\" target=\"_blank\">C++参考手册</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/cpp/standard-library/iomanip?view=msvc-170\" target=\"_blank\">Microsoft C++文档</a></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/16/[C++Lab]/",
            "url": "https://s1acr.github.io/2023/04/16/[C++Lab]/",
            "title": "[C++Lab]",
            "date_published": "2023-04-16T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>C++实验课</p>\n</blockquote>\n<h2 id=\"lab2_3\">lab2_3<a title=\"#lab2_3\" href=\"#lab2_3\"></a></h2>\n<h3 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h3>\n<p>补充实验：成绩表里找同学<br>\n【问题描述】<br>\n编写一个程序，读入 N 个同学的姓名和语数外三门功课的单科成绩，对其按照一定的排序规则排序形成一张成绩表（先按总分从高到低排序，总分相同则按语文成绩由高到低排序，仍然相同则按数学成绩由高到低排序，若总分和单科成绩均相同则最后按姓名的字典序排序）。最后给定一个数字 K(K&lt;=N) ，输出在这张排好序的成绩表中位置在第 K 位的同学的姓名和总分。<br>\n字典序举例说明：<br>\nabc &gt; abd<br>\na &gt; aa<br>\n要求：用C++对象数组表示学生数据。采用多文件结构，类的声明放在头文件如student.h，类的实现放在源文件如student.cpp。<br>\n【输入形式】<br>\n第一行输入一个正整数 N(1&lt;=N&lt;=1024)，代表接下来将录入 N 个学生的成绩。<br>\n接下来 N 行录入 N 条学生的成绩记录，每条记录依次为姓名，语文成绩，数学成绩，英语成绩，这四个字段以空格分隔。姓名为字符串（仅包含小写字母，不含空格，长度&lt;=19），学生之间不会重名。三科成绩均为整数（0~100）。<br>\n最后输入一个正整数 K(1&lt;=K&lt;=N)，代表需要在成绩表中从前往后找到的位置。<br>\n【输出形式】<br>\n在成绩表中从前往后处在第 K 位的同学的姓名和总分，中间以空格分隔。<br>\n【样例输入1】<br>\n2<br>\ntom 90 91 92<br>\nlucy 91 90 92<br>\n1<br>\n【样例输出1】<br>\nlucy 273<br>\n【样例输入2】<br>\n4<br>\nlily 90 100 88<br>\njack 87 79 95<br>\nhanz 90 89 71<br>\ndavid 90 89 71<br>\n4<br>\n【样例输出2】<br>\nhanz 250</p>\n<h3 id=\"解答\">解答<a title=\"#解答\" href=\"#解答\"></a></h3>\n<figure class=\"highlight plaintext\"><figcaption><span>lab2_3_Stu.h C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma once</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">class Student &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\tint yu;</span><br><span class=\"line\">\tint shu;</span><br><span class=\"line\">\tint wai;</span><br><span class=\"line\">\tint sum;</span><br><span class=\"line\">\tStudent() &#123;&#125;</span><br><span class=\"line\">\tStudent(string name, int yu, int shu, int wai) :name(name), yu(yu), shu(shu), wai(wai) &#123;&#125;</span><br><span class=\"line\">\tvoid setInfo();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>lab2_3_Stu.cpp C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;lab2_3_Stu.h&quot;</span><br><span class=\"line\">void Student::setInfo() &#123;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;name;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;yu;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;shu;</span><br><span class=\"line\">\tcin &gt;&gt; this-&gt;wai;</span><br><span class=\"line\">\tsum = this-&gt;yu + this-&gt;wai + this-&gt;shu;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>lab2_3.cpp C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &quot;lab2_3_Stu.h&quot;</span><br><span class=\"line\">class Mypred &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool operator()(Student s1, Student s2) &#123;</span><br><span class=\"line\">\t\tif (s1.sum == s2.sum) &#123;</span><br><span class=\"line\">\t\t\treturn s1.name &lt; s2.name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\treturn s1.sum &gt; s2.sum;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class ScoreSheet &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numOfStu;</span><br><span class=\"line\">\tvector&lt;Student&gt; vstus;</span><br><span class=\"line\">\tvoid initSheet() &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; numOfStu;</span><br><span class=\"line\">\t\tvstus.resize(numOfStu);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; numOfStu; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tStudent stu;</span><br><span class=\"line\">\t\t\tstu.setInfo();</span><br><span class=\"line\">\t\t\tvstus[i] = stu;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsort(vstus.begin(), vstus.end(), Mypred());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvoid queeryCode() &#123;</span><br><span class=\"line\">\t\tint code;</span><br><span class=\"line\">\t\tcin &gt;&gt; code;</span><br><span class=\"line\">\t\tcout &lt;&lt; vstus[code-1].name &lt;&lt; &quot; &quot; &lt;&lt; vstus[code-1].sum &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tScoreSheet ss;</span><br><span class=\"line\">\tss.initSheet();</span><br><span class=\"line\">\tss.queeryCode();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分文件, 我这里只分了一个<br>\n<strong>分文件方法:</strong><br>\n.h 中放声明, .cpp中放实现, 主函数中引用 .h<br>\n或者.hpp中放声明和实现, 主函数中引用 .hpp<br>\n这题很典型, vector容器储存, sort算法排序传个谓词进去, 不同排序的方式由谓词实现.</p>\n<h2 id=\"lab3_1\">lab3_1<a title=\"#lab3_1\" href=\"#lab3_1\"></a></h2>\n<h3 id=\"题目-1\">题目<a title=\"#题目-1\" href=\"#题目-1\"></a></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编写一个学生和教师数据输入和显示程序。其中，学生数据有编号、姓名、班级和成绩，教师数据有编号、姓名、职称和部门。</span><br><span class=\"line\">要求：</span><br><span class=\"line\">（1）将编号、姓名输入和显示设计成一个类person；</span><br><span class=\"line\">（2）设计类person的派生类：学生类student和教师类teacher；</span><br><span class=\"line\">（3）主函数中分别定义一个学生对象和教师对象进行测试。</span><br><span class=\"line\">【输入形式】</span><br><span class=\"line\">程序参考的输入（输入数据前面为提示文字）：</span><br><span class=\"line\">Input id:1</span><br><span class=\"line\">Input name:zhangsan</span><br><span class=\"line\">Input class:1</span><br><span class=\"line\">Input score:90</span><br><span class=\"line\">Input id:2</span><br><span class=\"line\">Input name:lisi</span><br><span class=\"line\">Input title:teacher</span><br><span class=\"line\">Input department:computer</span><br><span class=\"line\">【输出形式】</span><br><span class=\"line\">程序参考的输出：</span><br><span class=\"line\">Student&#x27;s info:</span><br><span class=\"line\">Id:1</span><br><span class=\"line\">Name:zhangsan</span><br><span class=\"line\">Class:1</span><br><span class=\"line\">Score:90</span><br><span class=\"line\">Teacher&#x27;s info:</span><br><span class=\"line\">Id:2</span><br><span class=\"line\">Name:lisi</span><br><span class=\"line\">Title:teacher</span><br><span class=\"line\">Department:computer</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答-1\">解答<a title=\"#解答-1\" href=\"#解答-1\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">person</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input  id:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; id;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input  name:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Id:&quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Name:&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string  id;</span><br><span class=\"line\">    string  name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 填充部分</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">student</span> : <span class=\"keyword\">public</span> person&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">student</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input class:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; classNum;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input score:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Student&#x27;s info:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        person::<span class=\"built_in\">display</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Class:&quot;</span> &lt;&lt; classNum &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Score:&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string classNum;</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">teacher</span> : <span class=\"keyword\">public</span> person &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">teacher</span>() &#123; </span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input title:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; title;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Input department:&quot;</span>;</span><br><span class=\"line\">        cin &gt;&gt; department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Teacher&#x27;s info:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        person::<span class=\"built_in\">display</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Title:&quot;</span> &lt;&lt; title &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Department:&quot;</span> &lt;&lt; department &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string title;</span><br><span class=\"line\">    string department;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    student  stu;</span><br><span class=\"line\">    teacher  tea;</span><br><span class=\"line\">    stu.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    tea.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一开始想了半天调用父类的private成员要用友元, 又不能更改题目, 后来才发现不是给了公共display接口么. 写派生类多关注公共接口, 私有的不需要管.</p>\n<h2 id=\"lab3_2\">lab3_2<a title=\"#lab3_2\" href=\"#lab3_2\"></a></h2>\n<h3 id=\"题目-2\">题目<a title=\"#题目-2\" href=\"#题目-2\"></a></h3>\n<p>补充：字符串统计排序，继承系统string类<br>\n【问题描述】<br>\n编写一个程序，接收用户输入的一个字符串(可以包含空格)，统计其中所有出现过的所有字符，并按照频率高低的顺序排列输出。频率相同的字符按输入顺序输出。<br>\n【输入形式】<br>\n用户在第一行输入一个字符串，以回车结束输入。<br>\n【输出形式】<br>\n程序统计字符串中出现的所有字符，然后按照字符出现频率大小排序输出，频率相同时，按输入顺序输出。输出形式规定为每行输出4个字符数据，输出格式为：字符-出现次数。每个字符-出现次数输出中间用一个空格分隔，每行末尾没有空格。程序输出结尾有一个回车。<br>\n【样例输入】<br>\nThe job requires an agile mind.<br>\n【样例输出】<br>\n#-5 e-4 i-3 r-2<br>\na-2 n-2 T-1 h-1<br>\nj-1 o-1 b-1 q-1<br>\nu-1 s-1 g-1 l-1<br>\nm-1 d-1 .-1               #表示空格(在程序请输出空格，而不是字符&quot;#&quot;，这里只是表示而已。)<br>\n【样例说明】<br>\n用户首先输入字符串The job requires an agile mind. 程序统计完毕之后按照每行4个统计结果输出，字符串中有5个空格，所以输出为#-5,#表示空格。字符’b’和’T’出现次数同为1，因为输入时’b’先于’T’输入，所以输出时也先打印’b’的统计信息。</p>\n<h3 id=\"解答-2\">解答<a title=\"#解答-2\" href=\"#解答-2\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">MyChar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyChar</span>() :<span class=\"built_in\">num</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"type\">char</span>  ch;        <span class=\"comment\">//字符</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>  num;        <span class=\"comment\">//出现次数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">MyString</span> : <span class=\"keyword\">public</span>  string</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">input</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getline</span>(cin, *<span class=\"keyword\">this</span>);  <span class=\"comment\">//输入一行，支持空格</span></span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">putchar</span><span class=\"params\">(<span class=\"type\">char</span>  ch)</span></span>;  <span class=\"comment\">//放入字符</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">output</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tMyChar  chars[<span class=\"number\">300</span>];  <span class=\"comment\">//字符计数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>  sum; <span class=\"comment\">//已有总数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">MyString::putchar</span><span class=\"params\">(<span class=\"type\">char</span>  ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 存在有这个字符的话num++</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sum; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (chars[i].ch == ch)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tchars[i].num++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//没有这个字符的话初始化这个字符</span></span><br><span class=\"line\">\tchars[sum].ch = ch;</span><br><span class=\"line\">\tchars[sum].num++;</span><br><span class=\"line\">\tsum++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 填空一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">MyString::compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//分析字符出现频次并排序</span></span><br><span class=\"line\">\t<span class=\"comment\">//遍历输入的字符串 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (*<span class=\"keyword\">this</span>).<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>((*<span class=\"keyword\">this</span>)[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//按照字符个数排序chars[], 冒泡排序, 如果两个字符数量相同, 冒泡排序是安全的, 不会改变位置.</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sum - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; sum - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (chars[j].num &lt; chars[j + <span class=\"number\">1</span>].num) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\t\tMyChar temp = chars[j];</span><br><span class=\"line\">\t\t\t\tchars[j] = chars[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tchars[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 填空二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">MyString::output</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//输出分析结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= sum; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; chars[i - <span class=\"number\">1</span>].ch &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; chars[i - <span class=\"number\">1</span>].num &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span>) cout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使得程序正确执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyString  s;</span><br><span class=\"line\">\ts.<span class=\"built_in\">input</span>();</span><br><span class=\"line\">\ts.<span class=\"built_in\">compute</span>();</span><br><span class=\"line\">\ts.<span class=\"built_in\">output</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要看懂每一个函数是做什么, <code>getline(cin, *this);</code>, 用到了多态, *this是string的派生类, 父类指针指向子类对象.<br>\nchars[]中的是引用对象, 交换位置的时候交换引用就行了, 而不是值交换.</p>\n<h2 id=\"lab5\">lab5<a title=\"#lab5\" href=\"#lab5\"></a></h2>\n<p>两道分析题</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>   <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>   <span class=\"string\">&lt;complex&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span>   std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Base-ctor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Base</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Base-dtor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;Base::f(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;Base::f(double)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span> i = <span class=\"number\">10</span>)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;Base::g()&quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Derived</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Derived-ctor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Derived</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;Derived-dtor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(complex&lt;<span class=\"type\">double</span>&gt;)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived::f(complex)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(<span class=\"type\">int</span>   i = <span class=\"number\">20</span>)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived::g()&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class=\"line\">    Base b;</span><br><span class=\"line\">    Derived d;</span><br><span class=\"line\">    Base* pb = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\">    b.<span class=\"built_in\">f</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    d.<span class=\"built_in\">f</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    pb-&gt;<span class=\"built_in\">f</span>(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">g</span>();</span><br><span class=\"line\">    d.<span class=\"built_in\">g</span>();</span><br><span class=\"line\">    pb-&gt;<span class=\"built_in\">g</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> pb;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">分析： </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">8                         // vfptr 64位 占 8 字节, 32位占 4 字节</span></span><br><span class=\"line\"><span class=\"comment\">8                          // 同上</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor                   //  基类构造</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor                   // 派生类先构造基类再构造派生类</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor        </span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor                      // new 创建派生类再堆区， 同上先构造基类再构造派生类</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Base::f(double)                 // 本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Derived::f(complex)             //  本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Base::f(double)                 // pb是基类指针指向派生类对象，调用f函数，先再Derived类中的Base中匹配发现无， 再利用继承的vfptr向vftable中寻找发现匹配基类中的函数， 调用, 基类f函数没有重写. 虚表中还是基类函数的地址 </span></span><br><span class=\"line\"><span class=\"comment\">Base::g()10                     //  本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Derived::g()20                   //   本类函数调用</span></span><br><span class=\"line\"><span class=\"comment\">Derived::g()10                    //   pb依旧先在Derived中的Base下寻找g发现无, 利用继承的vfptr向vftable中寻找, 因为Derived重写了Base的g, 继承时基类虚表的g函数地址被改变, 从而调用派生类的g</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor                           // delete释放, pb调用派生类下基类析构</span></span><br><span class=\"line\"><span class=\"comment\">Derived-dtor                        // 编译器自动调用清理内存, 按主函数调用栈中本地变量的创建顺序相反, 析构d, 先析构派生类再析构基类 </span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor                           //析构b</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>   <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>   <span class=\"keyword\">namespace</span>   std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>   <span class=\"title class_\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() :<span class=\"built_in\">data</span>(count)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base-ctor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     ~<span class=\"built_in\">Base</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Base-dtor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        --count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Base::count;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Derived</span>() :<span class=\"built_in\">data</span>(count), <span class=\"built_in\">data1</span>(data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived-ctor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Derived</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Derived-dtor&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        --count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\">    <span class=\"type\">int</span> data1;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Derived::count = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class=\"line\">    Base* pb = <span class=\"keyword\">new</span> Derived[<span class=\"number\">3</span>];</span><br><span class=\"line\">    cout &lt;&lt; pb[<span class=\"number\">2</span>].data &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; ((<span class=\"built_in\">static_cast</span>&lt;Derived*&gt;(pb)) + <span class=\"number\">2</span>)-&gt;data1 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] pb;</span><br><span class=\"line\">    cout &lt;&lt; Base::count &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; Derived::count &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">4           // static 静态变量, 在编译时确定内存, 不包括在类中, Base中含有一个int, 分配的大小为 4 字节, </span></span><br><span class=\"line\"><span class=\"comment\">12          // Base中的data, 和Derived中的data, data1, 三个int , 12字节</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor       // new 堆区初始化Derived实例, 三次, 先构造基类在构造自身</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Base-ctor</span></span><br><span class=\"line\"><span class=\"comment\">Derived-ctor</span></span><br><span class=\"line\"><span class=\"comment\">10              // pb基类指针指向派生类对象, 基类在派生类的内存分布在最前, pb访问到的是派生类的成员, 并且有偏移量限制, 不能访问派生类的内存.</span></span><br><span class=\"line\"><span class=\"comment\">-842150451      // static_cast将pb转换为Derived*, 这是可以的, 或者用更安全的dynamic_cast, 只要改变偏移量, 不过基类要改成多态类型的抽象类, </span></span><br><span class=\"line\"><span class=\"comment\">//  这题有点问题, 搞不懂为什么要用data初始化data1, data而又没有初始化值, 所以是不确定的内存值, 初始化了data1就是正常值</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor       // 调用pb指向的Derived中Base下的析构三次</span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor       // </span></span><br><span class=\"line\"><span class=\"comment\">Base-dtor</span></span><br><span class=\"line\"><span class=\"comment\">0               // 静态变量默认初始化0</span></span><br><span class=\"line\"><span class=\"comment\">13              // Derived 构造三次 13, 没有调用Derived析构.内存泄漏,  建议把基类析构声明成虚函数就可以动态绑定按顺序析构派生类.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"lab6\">lab6<a title=\"#lab6\" href=\"#lab6\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">CFraction</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span>  nume;    <span class=\"comment\">//  分子</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>  deno;    <span class=\"comment\">//  分母</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">CFraction</span>(<span class=\"type\">int</span>  nu = <span class=\"number\">0</span>, <span class=\"type\">int</span>  de = <span class=\"number\">1</span>) :<span class=\"built_in\">nume</span>(nu), <span class=\"built_in\">deno</span>(de)  &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">simplify</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//输入输出的重载</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span>  istream  &amp;<span class=\"keyword\">operator</span>&gt;&gt;(istream  &amp;in, CFraction  &amp;x);</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span>  ostream  &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream  &amp;out, CFraction  x);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ldeno = deno * c2.deno;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> lnume = nume * c2.deno + c2.nume * deno;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">temp</span><span class=\"params\">(lnume, ldeno)</span></span>;</span><br><span class=\"line\">\t\t\ttemp.<span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相加，结果要化简</span></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ldeno = deno * c2.deno;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> lnume = nume * c2.deno - c2.nume * deno;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">temp</span><span class=\"params\">(lnume, ldeno)</span></span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\ttemp.<span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相减，结果要化简</span></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ldeno = deno * c2.deno;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> lnume = nume * c2.nume;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">temp</span><span class=\"params\">(lnume, ldeno)</span></span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\ttemp.<span class=\"built_in\">simplify</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相乘，结果要化简</span></span><br><span class=\"line\">\tCFraction  <span class=\"keyword\">operator</span>/(<span class=\"type\">const</span>  CFraction  &amp;c2)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\">CFraction <span class=\"title\">rotate</span><span class=\"params\">(c2.deno, c2.nume)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>*rotate;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;    <span class=\"comment\">//两个分数相除，结果要化简</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream  &amp;in, CFraction  &amp;x)&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> temp;</span><br><span class=\"line\">\tin &gt;&gt; x.nume &gt;&gt; temp &gt;&gt; x.deno;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp;  <span class=\"keyword\">operator</span>&lt;&lt;(ostream  &amp;out, CFraction  x)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x.deno == <span class=\"number\">1</span>)&#123; out &lt;&lt; x.nume &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> out &lt;&lt; (x.nume &lt; <span class=\"number\">0</span> ? showpos : noshowpos) &lt;&lt; x.nume &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; noshowpos &lt;&lt; x.deno;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\ta = <span class=\"built_in\">abs</span>(a);</span><br><span class=\"line\">\tb = <span class=\"built_in\">abs</span>(b);</span><br><span class=\"line\">\t<span class=\"type\">int</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tr = a % b;</span><br><span class=\"line\">\t\ta = b;</span><br><span class=\"line\">\t\tb = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CFraction::simplify</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> common = <span class=\"built_in\">gcd</span>(deno, nume);</span><br><span class=\"line\">\tnume /= common;</span><br><span class=\"line\">\tdeno /= common;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator+(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint deno = c1.deno * c2.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint nume = c1.nume * c2.deno + c2.nume * c1.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction temp(nume, deno);</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.simplify();</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相加，结果要化简</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator-(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint deno = c1.deno * c2.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint nume = c1.nume * c2.deno - c2.nume * c1.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction temp(nume, deno);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.simplify();</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相减，结果要化简</span></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator*(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint deno = c1.deno * c2.deno;</span></span><br><span class=\"line\"><span class=\"comment\">//\tint nume = c1.nume * c2.nume;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction temp(nume, deno);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.simplify();</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相乘，结果要化简</span></span><br><span class=\"line\"><span class=\"comment\">//CFraction  operator/(const  CFraction  &amp;c1, const  CFraction  &amp;c2)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tCFraction rotate(c2.deno, c2.nume);</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn c1*rotate;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;    //两个分数相除，结果要化简</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCFraction  x, y, s;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Input x: &quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; x;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Input y: &quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; y;</span><br><span class=\"line\">\ts = x + y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x+y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\ts = x - y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x-y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\ts = x*y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x*y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\ts = x / y;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;x/y=&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Matrix</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) :<span class=\"built_in\">i</span>(i), <span class=\"built_in\">j</span>(j) &#123;</span><br><span class=\"line\">\t\tv.<span class=\"built_in\">resize</span>(i * j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 赋值运算</span></span><br><span class=\"line\">\tMatrix&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(m.v.<span class=\"built_in\">begin</span>(), m.v.<span class=\"built_in\">end</span>(), v.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t\tj = m.j;</span><br><span class=\"line\">\t\ti = m.i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 &lt;&lt; </span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>; p &lt; m.i; p++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> q = <span class=\"number\">0</span>; q &lt; m.j; q++) &#123;</span><br><span class=\"line\">\t\t\t\tout &lt;&lt; m.v[p * m.j + q] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tout &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 &gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> istream&amp; <span class=\"keyword\">operator</span>&gt;&gt; (istream&amp; in, Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m.v.<span class=\"built_in\">size</span>(); i++) cin &gt;&gt; m.v[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> in;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 += </span></span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>+=(<span class=\"type\">const</span> Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i != m.i || j != m.j) cout &lt;&lt; <span class=\"string\">&quot;ERROR!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m.v.<span class=\"built_in\">size</span>(); i++) v[i] += m.v[i];</span><br><span class=\"line\">\t\t\tcout &lt;&lt; *<span class=\"keyword\">this</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载 *=</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"keyword\">operator</span>*=(<span class=\"type\">const</span> Matrix&amp; m) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j != m.i) cout &lt;&lt; <span class=\"string\">&quot;ERROR!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tMatrix <span class=\"built_in\">res</span>(i, m.j);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 矩阵乘, 比如 ij 矩阵 乘 jk 矩阵得到 ik 矩阵, 求ik矩阵只需遍历i行k列, 然后遍历j次求和得到 m[i][k]   </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>; p &lt; res.i; p++) &#123;   </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> q = <span class=\"number\">0</span>; q &lt;res.j; q++) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = <span class=\"number\">0</span>; r &lt; j; r++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres.v[p * res.j + q] = res.v[p * res.j + q] + v[p * j + r] * m.v[r * m.j + q];</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">copy</span>(res.v.<span class=\"built_in\">begin</span>(), res.v.<span class=\"built_in\">end</span>(), v.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t\t\tcout &lt;&lt; *<span class=\"keyword\">this</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 重载()</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v[a * j + b];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> row1, col1, row2, col2;</span><br><span class=\"line\">\tcin &gt;&gt; row1 &gt;&gt; col1;</span><br><span class=\"line\">\t<span class=\"function\">Matrix <span class=\"title\">m1</span><span class=\"params\">(row1, col1)</span></span>;</span><br><span class=\"line\">\tcin &gt;&gt; m1;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; row2 &gt;&gt; col2;</span><br><span class=\"line\">\t<span class=\"function\">Matrix <span class=\"title\">m2</span><span class=\"params\">(row2, col2)</span></span>;</span><br><span class=\"line\">\tcin &gt;&gt; m2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">m1</span>(row1 / <span class=\"number\">2</span>, col1 / <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\">\tm1 *= m2;</span><br><span class=\"line\">\tm1 += m2;</span><br><span class=\"line\">\tm1 = m2;</span><br><span class=\"line\">\tcout &lt;&lt; m1 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://s1acr.github.io/2023/04/16/[C++Task]/",
            "url": "https://s1acr.github.io/2023/04/16/[C++Task]/",
            "title": "[C++Task]",
            "date_published": "2023-04-16T00:00:00.000Z",
            "content_html": "<blockquote>\n<p>C++作业</p>\n</blockquote>\n<h2 id=\"task2_3\">task2_3<a title=\"#task2_3\" href=\"#task2_3\"></a></h2>\n<h3 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h3>\n<p>教材习题4_20：定义满足要求的复数类Complex类<br>\n【问题描述】<br>\n定义一个复数类Complex，使得下面的代码能够工作。（注：下列代码需放在主函数中。）<br>\nComplex c1(3,5);    //用复数3+5i初始化c1<br>\nComplex c2=4.5;     <a href=\"//xn--4-6c2b230a3lq.xn--5c2-2h2en8bl4w\">//用实数4.5初始化c2</a><br>\nc1.add(c2);   //将c1与c2相加，结果保存在c1中<br>\nc1.show(); //将c1输出（这时的结果应该是7.5+5i）<br>\n【输入形式】<br>\n无<br>\n【输出形式】<br>\n7.5+5i<br>\n【样例输入】<br>\n【样例输出】<br>\n7.5+5i</p>\n<h3 id=\"解答\">解答<a title=\"#解答\" href=\"#解答\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Complex</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">double</span> a;</span><br><span class=\"line\">\t<span class=\"type\">double</span> b;</span><br><span class=\"line\">\t<span class=\"built_in\">Complex</span>() :<span class=\"built_in\">a</span>(<span class=\"number\">0</span>), <span class=\"built_in\">b</span>(<span class=\"number\">0</span>) &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">Complex</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b):<span class=\"built_in\">a</span>(a), <span class=\"built_in\">b</span>(b)&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Complex</span>(<span class=\"type\">double</span> num) &#123;     <span class=\"comment\">// 重载拷贝构造</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;a = num;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;b = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">Complex&amp; <span class=\"title\">add</span><span class=\"params\">(Complex&amp; comp)</span> </span>&#123;</span><br><span class=\"line\">\t\ta += comp.a;</span><br><span class=\"line\">\t\tb += comp.b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tComplex&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">double</span> num) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;a = num;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"keyword\">this</span>-&gt;a &lt;&lt; showpos &lt;&lt; <span class=\"keyword\">this</span>-&gt;b&lt;&lt; <span class=\"string\">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Complex <span class=\"title\">c1</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span></span>;    <span class=\"comment\">//用复数3+5i初始化c1</span></span><br><span class=\"line\">\tComplex c2 = <span class=\"number\">4.5</span>;     <span class=\"comment\">//用实数4.5初始化c2  // 这个相当于c2(4.5), 要重载的是拷贝构造,而不是内置的=运算符</span></span><br><span class=\"line\">\tc1.<span class=\"built_in\">add</span>(c2);   <span class=\"comment\">//将c1与c2相加，结果保存在c1中</span></span><br><span class=\"line\">\tc1.<span class=\"built_in\">show</span>(); <span class=\"comment\">//将c1输出（这时的结果应该是7.5+5i）</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ClassType c = value 相当于 ClassType c(value)</p>\n<h2 id=\"task3_1\">task3_1<a title=\"#task3_1\" href=\"#task3_1\"></a></h2>\n<h3 id=\"题目-1\">题目<a title=\"#题目-1\" href=\"#题目-1\"></a></h3>\n<p>编写数学类，能求开平方，sin 绝对值，圆面积等操作<br>\n【样例输入输出】<br>\ninput a number:3.5<br>\nthe result of sqrt is:1.87083<br>\nthe result of sin is:-0.350783<br>\nthe result of fabs is:3<br>\nthe result of fabs is:3.5<br>\nthe result of area is:38.4845</p>\n<h3 id=\"解答-1\">解答<a title=\"#解答-1\" href=\"#解答-1\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">myMath</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span>  <span class=\"type\">double</span>  <span class=\"title\">mysqrt</span><span class=\"params\">(<span class=\"type\">double</span>  x)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span>  <span class=\"type\">double</span>  <span class=\"title\">mysin</span><span class=\"params\">(<span class=\"type\">double</span>  x)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span>  <span class=\"type\">double</span>  <span class=\"title\">myfabs</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span>  <span class=\"type\">int</span>  <span class=\"title\">myfabs</span><span class=\"params\">(<span class=\"type\">int</span>  x)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span>  <span class=\"type\">double</span>  <span class=\"title\">circleArea</span><span class=\"params\">(<span class=\"type\">double</span>  x)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span>  <span class=\"type\">static</span>  <span class=\"type\">double</span>  PI;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> myMath::PI = <span class=\"number\">3.1415926</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span>  <span class=\"title\">myMath::mysin</span><span class=\"params\">(<span class=\"type\">double</span>  x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sin</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span>  <span class=\"title\">myMath::mysqrt</span><span class=\"params\">(<span class=\"type\">double</span>  x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">myMath::myfabs</span><span class=\"params\">(<span class=\"type\">double</span>  x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"built_in\">fabs</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">myMath::myfabs</span><span class=\"params\">(<span class=\"type\">int</span>  x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"built_in\">fabs</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span>  <span class=\"title\">myMath::circleArea</span><span class=\"params\">(<span class=\"type\">double</span>  x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  PI * x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span>  x;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;input  a  number:&quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; x;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;the  result  of  sqrt  is:&quot;</span> &lt;&lt; myMath::<span class=\"built_in\">mysqrt</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;the  result  of  sin  is:&quot;</span> &lt;&lt; myMath::<span class=\"built_in\">mysin</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;the  result  of  fabs  is:&quot;</span> &lt;&lt; myMath::<span class=\"built_in\">myfabs</span>((<span class=\"type\">int</span>)x) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;the  result  of  fabs  is:&quot;</span> &lt;&lt; myMath::<span class=\"built_in\">myfabs</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;the  result  of  area  is:&quot;</span> &lt;&lt; myMath::<span class=\"built_in\">circleArea</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写工具类, 使用静态方法. 构造函数最好给成private,不能实例化对象. 只能通过类名调用</p>\n<h2 id=\"task5_1\">task5_1<a title=\"#task5_1\" href=\"#task5_1\"></a></h2>\n<h3 id=\"解答-2\">解答<a title=\"#解答-2\" href=\"#解答-2\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">Mammal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Mammal</span>(string  name) :<span class=\"built_in\">name</span>(name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Con.Mammal&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Mammal</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Des.Mammal&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    string  name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> : <span class=\"keyword\">public</span> Mammal &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:   </span><br><span class=\"line\">    <span class=\"built_in\">Dog</span>(string name) :<span class=\"built_in\">Mammal</span>(name) &#123;   <span class=\"comment\">// 这一步</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Con.Dog:&quot;</span> &lt;&lt; Mammal::name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">Dog</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Des.Dog:&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string  name;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Input  Dog  Name:&quot;</span>;</span><br><span class=\"line\">    cin &gt;&gt; name;</span><br><span class=\"line\">    <span class=\"function\">Dog  <span class=\"title\">d</span><span class=\"params\">(name)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>派生类构造函数给继承的基类初始化</p>\n<h2 id=\"task6_3\">task6_3<a title=\"#task6_3\" href=\"#task6_3\"></a></h2>\n<h3 id=\"题目-2\">题目<a title=\"#题目-2\" href=\"#题目-2\"></a></h3>\n<p>【问题描述】<br>\n从键盘中读入最多不超过50个学生的学生信息（包括空格隔开的姓名、学号、年龄信息，以学号从低到高排序）</p>\n<p>人员类：包含姓名，年龄。</p>\n<p>学生类：继承自人员类，增加学号。</p>\n<p>【输入形式】<br>\n每次键盘读入最多不超过50个学生的学生信息：<br>\n第一行为学生人数；<br>\n后面每一行为空格隔开的学生学号、姓名、年龄，其中学号和年龄都是整数。<br>\n【输出形式】<br>\n分别以姓名顺序（从低到高）和年龄顺序（从低到高）将学生信息输出，每行输出一位学生的信息，其中学号占3位，姓名（英文）占6位，年龄占3位，均为右对齐。年龄相同时按姓名从低到高排序。两种顺序的输出结果用一行空行相隔。<br>\n【输入样例】</p>\n<p>4<br>\n1 aaa 22<br>\n45 bbb 23<br>\n54 ddd 20<br>\n110 ccc 19<br>\n【输出样例】</p>\n<p>1    aaa     22<br>\n45     bbb     23<br>\n110     ccc     19<br>\n54     ddd     20<br>\n110     ccc     19<br>\n54     ddd     20<br>\n1     aaa     22<br>\n45     bbb     23</p>\n<h3 id=\"解答-3\">解答<a title=\"#解答-3\" href=\"#解答-3\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(string name, <span class=\"type\">int</span> age) : <span class=\"built_in\">name</span>(name), <span class=\"built_in\">age</span>(age)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> : <span class=\"keyword\">public</span> Person &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> code;</span><br><span class=\"line\">\t<span class=\"built_in\">Student</span>()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Student</span>(<span class=\"type\">int</span> code, string name, <span class=\"type\">int</span> age): <span class=\"built_in\">code</span>(code), <span class=\"built_in\">Person</span>(name, age)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myPred</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(Student s1, Student s2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s1.name &lt; s2.name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myPred2</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(Student s1, Student s2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s1.age &lt; s2.age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printvStus</span><span class=\"params\">(vector&lt;Student&gt;&amp; vStus)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 打印Stu数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (vector&lt;Student&gt;::iterator it = vStus.<span class=\"built_in\">begin</span>(); it != vStus.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">3</span>) &lt;&lt; it-&gt;code &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">6</span>) &lt;&lt; it-&gt;name &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">3</span>) &lt;&lt; it-&gt;age &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;Student&gt; vStus;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num;</span><br><span class=\"line\">\tcin &gt;&gt; num;</span><br><span class=\"line\">\t<span class=\"type\">int</span> code;</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化vStus</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; code &gt;&gt; name &gt;&gt; age;</span><br><span class=\"line\">\t\tvStus.<span class=\"built_in\">push_back</span>(*(<span class=\"keyword\">new</span> <span class=\"built_in\">Student</span>(code, name, age)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 排序, 按姓名</span></span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(vStus.<span class=\"built_in\">begin</span>(), vStus.<span class=\"built_in\">end</span>(), <span class=\"built_in\">myPred</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">printvStus</span>(vStus);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(vStus.<span class=\"built_in\">begin</span>(), vStus.<span class=\"built_in\">end</span>(), <span class=\"built_in\">myPred2</span>());</span><br><span class=\"line\">\t<span class=\"comment\">// 排序, 按学号</span></span><br><span class=\"line\">\t<span class=\"built_in\">printvStus</span>(vStus);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很基础的继承然后排序<br>\n要引入 iomanip<br>\n<code>setw()</code>设置输出流占位, 后面还可以跟<code>setfill()</code>指定填充符号</p>\n<h2 id=\"task7_3\">task7_3<a title=\"#task7_3\" href=\"#task7_3\"></a></h2>\n<h3 id=\"题目-3\">题目<a title=\"#题目-3\" href=\"#题目-3\"></a></h3>\n<p>【问题描述】<br>\n下面的程序能得到预期的结果吗？如何避免类似问题的发生？<br>\n请修改程序，使它得到我们想要的结果。即希望两个输出的值相同。<br>\n提示：struct在C++中也可以用来定义类，它与class的不同在于struct定义的类成员的默认访问权限是public。<br>\n#include <iostream><br>\nusing namespace std;<br>\nstruct Base1 {int x;};<br>\nstruct Base2 {float y;};<br>\nstruct Derived : Base1,Base2{};<br>\nint main()<br>\n{<br>\nDerived *pd=new Derived;<br>\npd-&gt;x=1;pd-&gt;y=2.0f;<br>\nvoid *pv = pd;<br>\nBase2 <em>pb=static_cast&lt;Base2</em>&gt;(pv);<br>\ncout&lt;<pd->y&lt;&lt;&quot; &quot;&lt;<pb->y&lt;&lt;endl;<br>\ndelete pd;<br>\nreturn 0;<br>\n}<br>\n【输入形式】<br>\n无<br>\n【输出形式】<br>\n2 2</p>\n<h3 id=\"解答-4\">解答<a title=\"#解答-4\" href=\"#解答-4\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base1</span> &#123; <span class=\"type\">int</span> x; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base2</span> &#123; <span class=\"type\">float</span> y; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">virtual</span> Base1,  <span class=\"keyword\">virtual</span> Base2 &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Derived* pd = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\">    pd-&gt;x = <span class=\"number\">1</span>; </span><br><span class=\"line\">    pd-&gt;y = <span class=\"number\">2.0f</span>;</span><br><span class=\"line\">    <span class=\"comment\">// void* pv = pd;</span></span><br><span class=\"line\">    <span class=\"comment\">// Derived*转void*再转Base2* 会丢失数据, 因为Derived中继承的是vbptr指针, </span></span><br><span class=\"line\">\t<span class=\"comment\">// 转void*丢失指针信息, 再转Base* 会按照 float 类型 解释对应的 vbptr,</span></span><br><span class=\"line\">    <span class=\"comment\">// 正确的做法应该直接将Derived*转Base2*, 编译器会改变偏置值, 使指针名(对象入口)偏置到对应位置.  </span></span><br><span class=\"line\">    <span class=\"comment\">// 正确写法:</span></span><br><span class=\"line\">    Base2* pb = <span class=\"built_in\">static_cast</span>&lt;Base2*&gt;(pd);</span><br><span class=\"line\">    <span class=\"comment\">// Base2* pb = static_cast&lt;Base2*&gt;(pv);</span></span><br><span class=\"line\">    cout &lt;&lt; pd-&gt;y &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; pb-&gt;y &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> pd;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"task9_1\">task9_1<a title=\"#task9_1\" href=\"#task9_1\"></a></h2>\n<h3 id=\"题目-4\">题目<a title=\"#题目-4\" href=\"#题目-4\"></a></h3>\n<p>对类Point重载“++”（自增）、“–”（自减）运算符，要求同时重载前缀和后缀。</p>\n<h3 id=\"解答-5\">解答<a title=\"#解答-5\" href=\"#解答-5\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x,  y;</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>() &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) : <span class=\"built_in\">x</span> (x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 前置++</span></span><br><span class=\"line\">    Point&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;x++;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;y++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 后置++</span></span><br><span class=\"line\">    Point&amp; <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">        Point temp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;x++;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;y++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Point&amp; <span class=\"keyword\">operator</span>--() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;x--;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;y--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Point&amp; <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">        Point temp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;x--;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;y--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class=\"string\">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Point  a, <span class=\"built_in\">b</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    a = b++;</span><br><span class=\"line\">    a.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    a = ++b;</span><br><span class=\"line\">    a.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    a = --b;</span><br><span class=\"line\">    a.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">    a = b--;</span><br><span class=\"line\">    a.<span class=\"built_in\">display</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"task9_2\">task9_2<a title=\"#task9_2\" href=\"#task9_2\"></a></h2>\n<h3 id=\"题目-5\">题目<a title=\"#题目-5\" href=\"#题目-5\"></a></h3>\n<p>定义一个时间类CTime，分钟和秒钟是其两个私有成员数据。输入一个起始时间和一个结束时间(起始时间早于结束时间)，通过运算符重载-（减号），计算这两个时间相隔多少秒钟。说明：这两个时间在同一小时之内，且采用60分钟60秒钟的计时分式，即从00:00-59:59。</p>\n<h3 id=\"解答-6\">解答<a title=\"#解答-6\" href=\"#解答-6\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span>  <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>  N  100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CTime</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> minute;</span><br><span class=\"line\">    <span class=\"type\">int</span> hour;</span><br><span class=\"line\">    <span class=\"built_in\">CTime</span>() : <span class=\"built_in\">minute</span>(<span class=\"number\">0</span>), <span class=\"built_in\">hour</span>(<span class=\"number\">0</span>) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cin &gt;&gt; hour &gt;&gt; minute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">beZero</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (minute == <span class=\"number\">0</span> &amp;&amp; hour == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getTotalMinutes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minute + hour * <span class=\"number\">60</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CTime&amp; <span class=\"keyword\">operator</span>-(CTime&amp; ct) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"built_in\">getTotalMinutes</span>() - ct.<span class=\"built_in\">getTotalMinutes</span>();</span><br><span class=\"line\">        hour = left / <span class=\"number\">60</span>;</span><br><span class=\"line\">        minute = left % <span class=\"number\">60</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; o,  CTime&amp; ct) &#123;</span><br><span class=\"line\">    o &lt;&lt; ct.<span class=\"built_in\">getTotalMinutes</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>    <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CTime  time[N];</span><br><span class=\"line\">    <span class=\"type\">int</span>  count = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        time[<span class=\"number\">2</span> * count].<span class=\"built_in\">input</span>();</span><br><span class=\"line\">        time[<span class=\"number\">2</span> * count + <span class=\"number\">1</span>].<span class=\"built_in\">input</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!(time[<span class=\"number\">2</span> * count].<span class=\"built_in\">beZero</span>() &amp;&amp; time[<span class=\"number\">2</span> * count + <span class=\"number\">1</span>].<span class=\"built_in\">beZero</span>()));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; time[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>] - time[<span class=\"number\">2</span> * i] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>    <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"task10_1\">task10_1<a title=\"#task10_1\" href=\"#task10_1\"></a></h2>\n<h3 id=\"题目-6\">题目<a title=\"#题目-6\" href=\"#题目-6\"></a></h3>\n<p>约瑟夫问题：n个骑士编号1，2，…，n，围坐在圆桌旁。编号为1的骑士从1开始报数，报到m的骑士出列，然后下一个位置再从1开始报数，找出最后留在圆桌旁的骑士编号。</p>\n<h3 id=\"解答-7\">解答<a title=\"#解答-7\" href=\"#解答-7\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;  a;</span><br><span class=\"line\">\t<span class=\"type\">int</span>  n, m, x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Input  n  and  m:&quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\ta.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\ta[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator vit = a.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (a.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;  <span class=\"comment\">// 取模</span></span><br><span class=\"line\">\t\t\tvit++;    </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (vit == a.<span class=\"built_in\">end</span>()) vit = a.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> dis = <span class=\"built_in\">distance</span>(<span class=\"built_in\">begin</span>(a), vit);</span><br><span class=\"line\">\t\ta.<span class=\"built_in\">erase</span>(vit);      <span class=\"comment\">// 擦除点之后的迭代器失效, 得重新获取</span></span><br><span class=\"line\">\t\tvit =  (a.<span class=\"built_in\">begin</span>() + dis == a.<span class=\"built_in\">end</span>() ? a.<span class=\"built_in\">begin</span>() : a.<span class=\"built_in\">begin</span>() + dis);   <span class=\"comment\">// 如果清除最后一个需要置为begin</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Result:&quot;</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调试了半天, 主要实现迭代器怎么取模, 返回迭代器之间的距离用std::distance().</p>\n<p>第一眼想到方法的是不改变vector大小:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span>  <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSurvivorNum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : v) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (it != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tnum++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">soluteJoselphRing</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; v, <span class=\"type\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">getSurvivorNum</span>(v) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> dist = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> total = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tdist++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (v[(i + dist) % v.<span class=\"built_in\">size</span>()] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\ttotal++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (total == m) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ti = (i + dist) % v.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t\tv[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it : v) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (it != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tv[<span class=\"number\">0</span>] = it;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> it;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;  a;</span><br><span class=\"line\">\t<span class=\"type\">int</span>  n, m, x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Input  n  and  m:&quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\ta.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"built_in\">soluteJoselphRing</span>(a, m);</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Result:&quot;</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-47\">6-47<a title=\"#6-47\" href=\"#6-47\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表驱动法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyDate</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyDate</span>(<span class=\"type\">int</span> m = <span class=\"number\">1</span>, <span class=\"type\">int</span> d = <span class=\"number\">1</span>, <span class=\"type\">int</span> y = <span class=\"number\">1900</span>) :<span class=\"built_in\">month</span>(m), <span class=\"built_in\">day</span>(d), <span class=\"built_in\">year</span>(y) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setDate</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> d, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d &gt; <span class=\"number\">31</span> || m &gt; <span class=\"number\">12</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tmonth = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tday = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tyear = <span class=\"number\">1900</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmonth = m;</span><br><span class=\"line\">\t\tday = d;</span><br><span class=\"line\">\t\tyear = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, <span class=\"type\">const</span> MyDate&amp; date) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> string month_name[<span class=\"number\">13</span>] = &#123; <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;January&quot;</span>, <span class=\"string\">&quot;February&quot;</span>, <span class=\"string\">&quot;March&quot;</span>, <span class=\"string\">&quot;April&quot;</span>, <span class=\"string\">&quot;May&quot;</span>, <span class=\"string\">&quot;June&quot;</span>, <span class=\"string\">&quot;July&quot;</span>, <span class=\"string\">&quot;August&quot;</span>, <span class=\"string\">&quot;September&quot;</span>, <span class=\"string\">&quot;October&quot;</span>, <span class=\"string\">&quot;November&quot;</span>, <span class=\"string\">&quot;December&quot;</span> &#125;;</span><br><span class=\"line\">\t\tos &lt;&lt; month_name[date.month] &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; date.day &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; date.year;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tMyDate&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> month_days = <span class=\"built_in\">days</span>(month, year);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (day &lt; month_days) &#123;</span><br><span class=\"line\">\t\t\tday++;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tday = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (month &lt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmonth++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tmonth = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tyear++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tMyDate <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"function\">MyDate <span class=\"title\">temp</span><span class=\"params\">(*<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">\t\t++(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tMyDate&amp; <span class=\"keyword\">operator</span>+=(<span class=\"type\">int</span> days) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; days; i++) &#123;</span><br><span class=\"line\">\t\t\t++(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> month, day, year;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">days</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> <span class=\"type\">int</span> month_days[<span class=\"number\">13</span>] = &#123; <span class=\"number\">0</span>,<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m == <span class=\"number\">2</span> &amp;&amp; ((y % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; y % <span class=\"number\">100</span> != <span class=\"number\">0</span>) || (y % <span class=\"number\">400</span> == <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">29</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> month_days[m];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"task12\">task12<a title=\"#task12\" href=\"#task12\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxWid 20</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> snakeMap[MaxWid][MaxWid] = &#123; <span class=\"number\">0</span> &#125;; </span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 总共 n x n 方阵, 从外向内有 (n+1)/2  层</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 第一个从左到右的情况必须是满一行的, 因为奇数情况下需要最后填一次</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 其他的随便循环怎么写, 把一圈遍历完就可以</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n - i; j++) &#123;</span><br><span class=\"line\">\t\t\tsnakeMap[i][j] = num++;\t\t\t\t\t<span class=\"comment\">// 从左向右</span></span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\tsnakeMap[j][n - <span class=\"number\">1</span> - i] = num++;\t\t\t<span class=\"comment\">// 从上往下</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\tsnakeMap[n - <span class=\"number\">1</span> - i][n - <span class=\"number\">1</span> - j] = num++; <span class=\"comment\">// 从右往左</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\tsnakeMap[n - <span class=\"number\">1</span> - j][i] = num++;\t\t\t<span class=\"comment\">// 从下往上</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int i, j, k;</span></span><br><span class=\"line\">\t<span class=\"comment\">//for (k = 0; k &lt;= 2/n; k++) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tfor (j = k; j &lt; n - k; j++) snakeMap[k][j] = num++;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tfor (i = k + 1; i &lt; n - k; i++) snakeMap[i][n - k - 1] = num++;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tfor (j = n - k - 1 - 1; j &gt;= k; j--) snakeMap[n - k - 1][j] = num++;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tfor (i = n - k - 1 - 1; i &gt; k; i--) snakeMap[i][k] = num++;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 课上给的答案, 原理都一样, 外层条件最好还是按  k &lt; (n + 1) / 2, 或 n/2取上限更准确, 不然偶数情况多了几次无效判断   </span></span><br><span class=\"line\">\t <span class=\"comment\">//打印输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">4</span>) &lt;&lt; <span class=\"built_in\">setfill</span>(<span class=\"string\">&#x27;*&#x27;</span>) &lt;&lt; snakeMap[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/s1acr/PicGoLib@main/Typora/202305251445815.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>写的另一种解法, 很巧妙</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">direction</span> &#123;</span><br><span class=\"line\">\tpair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; left = <span class=\"built_in\">make_pair</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\tpair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; right = <span class=\"built_in\">make_pair</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\tpair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; up = <span class=\"built_in\">make_pair</span>(<span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tpair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; down = <span class=\"built_in\">make_pair</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">direction d;</span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; directions[] = &#123; d.left, d.down, d.right, d.up &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; arr;</span><br><span class=\"line\">\tarr.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"built_in\">size</span>(); i++) &#123; arr[i].<span class=\"built_in\">resize</span>(n);&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tpair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; next = directions[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (num &lt;= n*n) &#123;    <span class=\"comment\">// 这里可以填[n*n, 2*n*n -1], 超过了会旋转回去</span></span><br><span class=\"line\">\t\tarr[i][j] = num++;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 四个点转向</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((i == n - size &amp;&amp; j == size - <span class=\"number\">1</span>) || (i == size - <span class=\"number\">1</span> &amp;&amp; j == size - <span class=\"number\">1</span>) || (i == size - <span class=\"number\">1</span>) &amp;&amp; (j == n - size) || (i == n - size + <span class=\"number\">1</span> &amp;&amp; j == n - size)) &#123;</span><br><span class=\"line\">\t\t\tnext = directions[++idx % <span class=\"number\">4</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == n - size + <span class=\"number\">1</span> &amp;&amp; j == n - size) size--;   <span class=\"comment\">// 缩小规模</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ti += next.first;</span><br><span class=\"line\">\t\tj += next.second;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">4</span>) &lt;&lt; <span class=\"built_in\">setfill</span>(<span class=\"string\">&#x27;*&#x27;</span>) &lt;&lt; arr[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Input n:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Dec:&quot;</span> &lt;&lt; <span class=\"built_in\">setiosflags</span>(ios_base::dec) &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">resetiosflags</span>(ios_base::dec);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Oct:&quot;</span> &lt;&lt; <span class=\"built_in\">setiosflags</span>(ios_base::oct) &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">resetiosflags</span>(ios_base::oct);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Hex:&quot;</span> &lt;&lt; <span class=\"built_in\">setiosflags</span>(ios_base::hex) &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">resetiosflags</span>(ios_base::hex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; oct &lt;&lt; n &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout.setf(ios_base::uppercase);</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; hex &lt;&lt; n &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; bitset&lt;8&gt;&#123;255&#125; &lt;&lt; endl;  // 1111 1111</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> string <span class=\"title\">toString</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;v)</span> </span>&#123;</span><br><span class=\"line\">\tostringstream os;   <span class=\"comment\">// 创建输出字符串流</span></span><br><span class=\"line\">\tos &lt;&lt; v;\t\t\t<span class=\"comment\">// 写入数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> os.<span class=\"built_in\">str</span>();\t\t<span class=\"comment\">// 返回输出字符串流生成的字符串</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> T <span class=\"title\">fromString</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; str)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">istringstream <span class=\"title\">is</span><span class=\"params\">(str)</span></span>;\t\t<span class=\"comment\">// 创建输入字符串流</span></span><br><span class=\"line\">\tT v;\t\t\t\t\t\t</span><br><span class=\"line\">\tis &gt;&gt; v;\t\t\t\t\t<span class=\"comment\">// 从输入字符串流中读取 T 类型的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">toString</span>(<span class=\"number\">123</span>).<span class=\"built_in\">append</span>(<span class=\"built_in\">toString</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>)) &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">fromString</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"string\">&quot;34&amp;56&quot;</span>) &lt;&lt; endl;   <span class=\"comment\">// 只读取第一个该类型的数据</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">fromString</span>&lt;<span class=\"type\">double</span>&gt;(<span class=\"string\">&quot;56.78**&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}